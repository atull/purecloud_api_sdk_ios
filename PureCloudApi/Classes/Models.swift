// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [ININADFS]
            Decoders.addDecoder(clazz: [ININADFS].self) { (source: AnyObject) -> [ININADFS] in
                return Decoders.decode(clazz: [ININADFS].self, source: source)
            }
            // Decoder for ININADFS
            Decoders.addDecoder(clazz: ININADFS.self) { (source: AnyObject) -> ININADFS in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININADFS()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.relyingPartyIdentifier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relyingPartyIdentifier"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.issuerURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerURI"])
                instance.ssoTargetURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssoTargetURI"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAccount]
            Decoders.addDecoder(clazz: [ININAccount].self) { (source: AnyObject) -> [ININAccount] in
                return Decoders.decode(clazz: [ININAccount].self, source: source)
            }
            // Decoder for ININAccount
            Decoders.addDecoder(clazz: ININAccount.self) { (source: AnyObject) -> ININAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAccount()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.orgLegalName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgLegalName"])
                instance.billingAddressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressLine1"])
                instance.billingAddressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressLine2"])
                instance.billingAddressCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressCity"])
                instance.billingAddressState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressState"])
                instance.billingAddressZipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressZipCode"])
                instance.billingAddressCountry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingAddressCountry"])
                instance.legalAddressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressLine1"])
                instance.legalAddressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressLine2"])
                instance.legalAddressCity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressCity"])
                instance.legalAddressState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressState"])
                instance.legalAddressZipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressZipCode"])
                instance.legalAddressCountry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["legalAddressCountry"])
                instance.billingContactFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactFirstName"])
                instance.billingContactLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactLastName"])
                instance.billingContactEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactEmail"])
                instance.billingContactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactPhone"])
                instance.purchaseOrderNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrderNumber"])
                instance.isTaxExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTaxExempt"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.paymentTerm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["paymentTerm"])
                instance.contractTerm = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contractTerm"])
                instance.autoRenew = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["autoRenew"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.minCommitQuantities = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["minCommitQuantities"])
                instance.estimatedQuantities = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["estimatedQuantities"])
                instance.oneTimeCharges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["oneTimeCharges"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAccountManager]
            Decoders.addDecoder(clazz: [ININAccountManager].self) { (source: AnyObject) -> [ININAccountManager] in
                return Decoders.decode(clazz: [ININAccountManager].self, source: source)
            }
            // Decoder for ININAccountManager
            Decoders.addDecoder(clazz: ININAccountManager.self) { (source: AnyObject) -> ININAccountManager in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAccountManager()
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }


            // Decoder for [ININAccountOverview]
            Decoders.addDecoder(clazz: [ININAccountOverview].self) { (source: AnyObject) -> [ININAccountOverview] in
                return Decoders.decode(clazz: [ININAccountOverview].self, source: source)
            }
            // Decoder for ININAccountOverview
            Decoders.addDecoder(clazz: ININAccountOverview.self) { (source: AnyObject) -> ININAccountOverview in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAccountOverview()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.isSuperUser = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isSuperUser"])
                instance.hasAccountNumber = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasAccountNumber"])
                instance.usageCharges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["usageCharges"])
                instance.domesticChargesTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["domesticChargesTotal"])
                instance.internationalChargesTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["internationalChargesTotal"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAccountStatus]
            Decoders.addDecoder(clazz: [ININAccountStatus].self) { (source: AnyObject) -> [ININAccountStatus] in
                return Decoders.decode(clazz: [ININAccountStatus].self, source: source)
            }
            // Decoder for ININAccountStatus
            Decoders.addDecoder(clazz: ININAccountStatus.self) { (source: AnyObject) -> ININAccountStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAccountStatus()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.orgName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgName"])
                instance.configured = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["configured"])
                instance.adminUIURL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adminUIURL"])
                instance.thirdPartyAccountId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyAccountId"])
                instance.thirdPartySubscriptionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartySubscriptionId"])
                instance.thirdPartySubscriptionNonAcbId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartySubscriptionNonAcbId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININActions]
            Decoders.addDecoder(clazz: [ININActions].self) { (source: AnyObject) -> [ININActions] in
                return Decoders.decode(clazz: [ININActions].self, source: source)
            }
            // Decoder for ININActions
            Decoders.addDecoder(clazz: ININActions.self) { (source: AnyObject) -> ININActions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININActions()
                instance.skillsToRemove = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skillsToRemove"])
                return instance
            }


            // Decoder for [ININAcwSettings]
            Decoders.addDecoder(clazz: [ININAcwSettings].self) { (source: AnyObject) -> [ININAcwSettings] in
                return Decoders.decode(clazz: [ININAcwSettings].self, source: source)
            }
            // Decoder for ININAcwSettings
            Decoders.addDecoder(clazz: ININAcwSettings.self) { (source: AnyObject) -> ININAcwSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAcwSettings()
                instance.wrapupPrompt = ININAcwSettings.ININWrapupPrompt(rawValue: (sourceDictionary["wrapupPrompt"] as? String) ?? "") 
                instance.timeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeoutMs"])
                return instance
            }


            // Decoder for [ININAdditionalInfo]
            Decoders.addDecoder(clazz: [ININAdditionalInfo].self) { (source: AnyObject) -> [ININAdditionalInfo] in
                return Decoders.decode(clazz: [ININAdditionalInfo].self, source: source)
            }
            // Decoder for ININAdditionalInfo
            Decoders.addDecoder(clazz: ININAdditionalInfo.self) { (source: AnyObject) -> ININAdditionalInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAdditionalInfo()
                return instance
            }


            // Decoder for [ININAddress]
            Decoders.addDecoder(clazz: [ININAddress].self) { (source: AnyObject) -> [ININAddress] in
                return Decoders.decode(clazz: [ININAddress].self, source: source)
            }
            // Decoder for ININAddress
            Decoders.addDecoder(clazz: ININAddress.self) { (source: AnyObject) -> ININAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAddress()
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.a1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["A1"])
                instance.a3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["A3"])
                instance.RD = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["RD"])
                instance.HNO = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["HNO"])
                instance.LOC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["LOC"])
                instance.NAM = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["NAM"])
                instance.PC = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["PC"])
                return instance
            }


            // Decoder for [ININAddressListing]
            Decoders.addDecoder(clazz: [ININAddressListing].self) { (source: AnyObject) -> [ININAddressListing] in
                return Decoders.decode(clazz: [ININAddressListing].self, source: source)
            }
            // Decoder for ININAddressListing
            Decoders.addDecoder(clazz: ININAddressListing.self) { (source: AnyObject) -> ININAddressListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAddressListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININAgent]
            Decoders.addDecoder(clazz: [ININAgent].self) { (source: AnyObject) -> [ININAgent] in
                return Decoders.decode(clazz: [ININAgent].self, source: source)
            }
            // Decoder for ININAgent
            Decoders.addDecoder(clazz: ININAgent.self) { (source: AnyObject) -> ININAgent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAgent()
                instance.stage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stage"])
                return instance
            }


            // Decoder for [ININAgentActivity]
            Decoders.addDecoder(clazz: [ININAgentActivity].self) { (source: AnyObject) -> [ININAgentActivity] in
                return Decoders.decode(clazz: [ININAgentActivity].self, source: source)
            }
            // Decoder for ININAgentActivity
            Decoders.addDecoder(clazz: ININAgentActivity.self) { (source: AnyObject) -> ININAgentActivity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAgentActivity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.agent = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["agent"])
                instance.numEvaluations = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numEvaluations"])
                instance.averageEvaluationScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["averageEvaluationScore"])
                instance.agentEvaluatorActivityList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agentEvaluatorActivityList"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAgentActivityEntityListing]
            Decoders.addDecoder(clazz: [ININAgentActivityEntityListing].self) { (source: AnyObject) -> [ININAgentActivityEntityListing] in
                return Decoders.decode(clazz: [ININAgentActivityEntityListing].self, source: source)
            }
            // Decoder for ININAgentActivityEntityListing
            Decoders.addDecoder(clazz: ININAgentActivityEntityListing.self) { (source: AnyObject) -> ININAgentActivityEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAgentActivityEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININAgentEvaluatorActivity]
            Decoders.addDecoder(clazz: [ININAgentEvaluatorActivity].self) { (source: AnyObject) -> [ININAgentEvaluatorActivity] in
                return Decoders.decode(clazz: [ININAgentEvaluatorActivity].self, source: source)
            }
            // Decoder for ININAgentEvaluatorActivity
            Decoders.addDecoder(clazz: ININAgentEvaluatorActivity.self) { (source: AnyObject) -> ININAgentEvaluatorActivity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAgentEvaluatorActivity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.agent = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["agent"])
                instance.evaluator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["evaluator"])
                instance.numEvaluations = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numEvaluations"])
                instance.averageEvaluationScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["averageEvaluationScore"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAggregateDataContainer]
            Decoders.addDecoder(clazz: [ININAggregateDataContainer].self) { (source: AnyObject) -> [ININAggregateDataContainer] in
                return Decoders.decode(clazz: [ININAggregateDataContainer].self, source: source)
            }
            // Decoder for ININAggregateDataContainer
            Decoders.addDecoder(clazz: ININAggregateDataContainer.self) { (source: AnyObject) -> ININAggregateDataContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregateDataContainer()
                instance.group = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["group"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ININAggregateMetricData]
            Decoders.addDecoder(clazz: [ININAggregateMetricData].self) { (source: AnyObject) -> [ININAggregateMetricData] in
                return Decoders.decode(clazz: [ININAggregateMetricData].self, source: source)
            }
            // Decoder for ININAggregateMetricData
            Decoders.addDecoder(clazz: ININAggregateMetricData.self) { (source: AnyObject) -> ININAggregateMetricData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregateMetricData()
                instance.metric = ININAggregateMetricData.ININMetric(rawValue: (sourceDictionary["metric"] as? String) ?? "") 
                instance.qualifier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["qualifier"])
                instance.stats = Decoders.decodeOptional(clazz: ININStatisticalSummary.self, source: sourceDictionary["stats"])
                return instance
            }


            // Decoder for [ININAggregateQueryResponse]
            Decoders.addDecoder(clazz: [ININAggregateQueryResponse].self) { (source: AnyObject) -> [ININAggregateQueryResponse] in
                return Decoders.decode(clazz: [ININAggregateQueryResponse].self, source: source)
            }
            // Decoder for ININAggregateQueryResponse
            Decoders.addDecoder(clazz: ININAggregateQueryResponse.self) { (source: AnyObject) -> ININAggregateQueryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregateQueryResponse()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININAggregationQuery]
            Decoders.addDecoder(clazz: [ININAggregationQuery].self) { (source: AnyObject) -> [ININAggregationQuery] in
                return Decoders.decode(clazz: [ININAggregationQuery].self, source: source)
            }
            // Decoder for ININAggregationQuery
            Decoders.addDecoder(clazz: ININAggregationQuery.self) { (source: AnyObject) -> ININAggregationQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregationQuery()
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.granularity = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["granularity"])
                instance.groupBy = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groupBy"])
                instance.filter = Decoders.decodeOptional(clazz: ININAnalyticsQueryFilter.self, source: sourceDictionary["filter"])
                instance.metrics = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metrics"])
                instance.flattenMultivaluedDimensions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["flattenMultivaluedDimensions"])
                return instance
            }


            // Decoder for [ININAggregationRange]
            Decoders.addDecoder(clazz: [ININAggregationRange].self) { (source: AnyObject) -> [ININAggregationRange] in
                return Decoders.decode(clazz: [ININAggregationRange].self, source: source)
            }
            // Decoder for ININAggregationRange
            Decoders.addDecoder(clazz: ININAggregationRange.self) { (source: AnyObject) -> ININAggregationRange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregationRange()
                instance.gte = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["gte"])
                instance.lt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lt"])
                return instance
            }


            // Decoder for [ININAggregationResult]
            Decoders.addDecoder(clazz: [ININAggregationResult].self) { (source: AnyObject) -> [ININAggregationResult] in
                return Decoders.decode(clazz: [ININAggregationResult].self, source: source)
            }
            // Decoder for ININAggregationResult
            Decoders.addDecoder(clazz: ININAggregationResult.self) { (source: AnyObject) -> ININAggregationResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregationResult()
                instance.type = ININAggregationResult.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.metric = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["metric"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININAggregationResultEntry]
            Decoders.addDecoder(clazz: [ININAggregationResultEntry].self) { (source: AnyObject) -> [ININAggregationResultEntry] in
                return Decoders.decode(clazz: [ININAggregationResultEntry].self, source: source)
            }
            // Decoder for ININAggregationResultEntry
            Decoders.addDecoder(clazz: ININAggregationResultEntry.self) { (source: AnyObject) -> ININAggregationResultEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAggregationResultEntry()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.gte = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["gte"])
                instance.lt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lt"])
                return instance
            }


            // Decoder for [ININAnalyticsConversation]
            Decoders.addDecoder(clazz: [ININAnalyticsConversation].self) { (source: AnyObject) -> [ININAnalyticsConversation] in
                return Decoders.decode(clazz: [ININAnalyticsConversation].self, source: source)
            }
            // Decoder for ININAnalyticsConversation
            Decoders.addDecoder(clazz: ININAnalyticsConversation.self) { (source: AnyObject) -> ININAnalyticsConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsConversation()
                instance.conversationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["conversationId"])
                instance.conversationStart = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["conversationStart"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.evaluations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluations"])
                return instance
            }


            // Decoder for [ININAnalyticsConversationQueryResponse]
            Decoders.addDecoder(clazz: [ININAnalyticsConversationQueryResponse].self) { (source: AnyObject) -> [ININAnalyticsConversationQueryResponse] in
                return Decoders.decode(clazz: [ININAnalyticsConversationQueryResponse].self, source: source)
            }
            // Decoder for ININAnalyticsConversationQueryResponse
            Decoders.addDecoder(clazz: ININAnalyticsConversationQueryResponse.self) { (source: AnyObject) -> ININAnalyticsConversationQueryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsConversationQueryResponse()
                instance.conversations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversations"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININAnalyticsConversationSegment]
            Decoders.addDecoder(clazz: [ININAnalyticsConversationSegment].self) { (source: AnyObject) -> [ININAnalyticsConversationSegment] in
                return Decoders.decode(clazz: [ININAnalyticsConversationSegment].self, source: source)
            }
            // Decoder for ININAnalyticsConversationSegment
            Decoders.addDecoder(clazz: ININAnalyticsConversationSegment.self) { (source: AnyObject) -> ININAnalyticsConversationSegment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsConversationSegment()
                instance.segmentStart = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["segmentStart"])
                instance.segmentEnd = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["segmentEnd"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.wrapUpCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapUpCode"])
                instance.wrapUpNote = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapUpNote"])
                instance.wrapUpTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wrapUpTags"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.disconnectType = ININAnalyticsConversationSegment.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.segmentType = ININAnalyticsConversationSegment.ININSegmentType(rawValue: (sourceDictionary["segmentType"] as? String) ?? "") 
                instance.requestedRoutingUserIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["requestedRoutingUserIds"])
                instance.requestedRoutingSkillIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["requestedRoutingSkillIds"])
                instance.requestedLanguageId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestedLanguageId"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.sourceConversationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceConversationId"])
                instance.destinationConversationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationConversationId"])
                instance.sourceSessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceSessionId"])
                instance.destinationSessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationSessionId"])
                instance.sipResponseCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sipResponseCodes"])
                instance.q850ResponseCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["q850ResponseCodes"])
                instance.conference = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["conference"])
                instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupId"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                return instance
            }


            // Decoder for [ININAnalyticsEvaluation]
            Decoders.addDecoder(clazz: [ININAnalyticsEvaluation].self) { (source: AnyObject) -> [ININAnalyticsEvaluation] in
                return Decoders.decode(clazz: [ININAnalyticsEvaluation].self, source: source)
            }
            // Decoder for ININAnalyticsEvaluation
            Decoders.addDecoder(clazz: ININAnalyticsEvaluation.self) { (source: AnyObject) -> ININAnalyticsEvaluation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsEvaluation()
                instance.evaluationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["evaluationId"])
                instance.evaluatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["evaluatorId"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.eventTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventTime"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.formId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formId"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextId"])
                instance.formName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formName"])
                instance.getoTotalScore = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["getoTotalScore"])
                instance.getoTotalCriticalScore = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["getoTotalCriticalScore"])
                return instance
            }


            // Decoder for [ININAnalyticsParticipant]
            Decoders.addDecoder(clazz: [ININAnalyticsParticipant].self) { (source: AnyObject) -> [ININAnalyticsParticipant] in
                return Decoders.decode(clazz: [ININAnalyticsParticipant].self, source: source)
            }
            // Decoder for ININAnalyticsParticipant
            Decoders.addDecoder(clazz: ININAnalyticsParticipant.self) { (source: AnyObject) -> ININAnalyticsParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsParticipant()
                instance.participantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["participantId"])
                instance.participantName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["participantName"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.purpose = ININAnalyticsParticipant.ININPurpose(rawValue: (sourceDictionary["purpose"] as? String) ?? "") 
                instance.sessions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sessions"])
                return instance
            }


            // Decoder for [ININAnalyticsProperty]
            Decoders.addDecoder(clazz: [ININAnalyticsProperty].self) { (source: AnyObject) -> [ININAnalyticsProperty] in
                return Decoders.decode(clazz: [ININAnalyticsProperty].self, source: source)
            }
            // Decoder for ININAnalyticsProperty
            Decoders.addDecoder(clazz: ININAnalyticsProperty.self) { (source: AnyObject) -> ININAnalyticsProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsProperty()
                instance.propertyType = ININAnalyticsProperty.ININPropertyType(rawValue: (sourceDictionary["propertyType"] as? String) ?? "") 
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ININAnalyticsQueryAggregation]
            Decoders.addDecoder(clazz: [ININAnalyticsQueryAggregation].self) { (source: AnyObject) -> [ININAnalyticsQueryAggregation] in
                return Decoders.decode(clazz: [ININAnalyticsQueryAggregation].self, source: source)
            }
            // Decoder for ININAnalyticsQueryAggregation
            Decoders.addDecoder(clazz: ININAnalyticsQueryAggregation.self) { (source: AnyObject) -> ININAnalyticsQueryAggregation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsQueryAggregation()
                instance.type = ININAnalyticsQueryAggregation.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.metric = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["metric"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.ranges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ranges"])
                return instance
            }


            // Decoder for [ININAnalyticsQueryClause]
            Decoders.addDecoder(clazz: [ININAnalyticsQueryClause].self) { (source: AnyObject) -> [ININAnalyticsQueryClause] in
                return Decoders.decode(clazz: [ININAnalyticsQueryClause].self, source: source)
            }
            // Decoder for ININAnalyticsQueryClause
            Decoders.addDecoder(clazz: ININAnalyticsQueryClause.self) { (source: AnyObject) -> ININAnalyticsQueryClause in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsQueryClause()
                instance.type = ININAnalyticsQueryClause.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.predicates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["predicates"])
                return instance
            }


            // Decoder for [ININAnalyticsQueryFilter]
            Decoders.addDecoder(clazz: [ININAnalyticsQueryFilter].self) { (source: AnyObject) -> [ININAnalyticsQueryFilter] in
                return Decoders.decode(clazz: [ININAnalyticsQueryFilter].self, source: source)
            }
            // Decoder for ININAnalyticsQueryFilter
            Decoders.addDecoder(clazz: ININAnalyticsQueryFilter.self) { (source: AnyObject) -> ININAnalyticsQueryFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsQueryFilter()
                instance.type = ININAnalyticsQueryFilter.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.clauses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["clauses"])
                instance.predicates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["predicates"])
                return instance
            }


            // Decoder for [ININAnalyticsQueryPredicate]
            Decoders.addDecoder(clazz: [ININAnalyticsQueryPredicate].self) { (source: AnyObject) -> [ININAnalyticsQueryPredicate] in
                return Decoders.decode(clazz: [ININAnalyticsQueryPredicate].self, source: source)
            }
            // Decoder for ININAnalyticsQueryPredicate
            Decoders.addDecoder(clazz: ININAnalyticsQueryPredicate.self) { (source: AnyObject) -> ININAnalyticsQueryPredicate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsQueryPredicate()
                instance.type = ININAnalyticsQueryPredicate.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.dimension = ININAnalyticsQueryPredicate.ININDimension(rawValue: (sourceDictionary["dimension"] as? String) ?? "") 
                instance.propertyType = ININAnalyticsQueryPredicate.ININPropertyType(rawValue: (sourceDictionary["propertyType"] as? String) ?? "") 
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.metric = ININAnalyticsQueryPredicate.ININMetric(rawValue: (sourceDictionary["metric"] as? String) ?? "") 
                instance._operator = ININAnalyticsQueryPredicate.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.range = Decoders.decodeOptional(clazz: ININNumericRange.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [ININAnalyticsSession]
            Decoders.addDecoder(clazz: [ININAnalyticsSession].self) { (source: AnyObject) -> [ININAnalyticsSession] in
                return Decoders.decode(clazz: [ININAnalyticsSession].self, source: source)
            }
            // Decoder for ININAnalyticsSession
            Decoders.addDecoder(clazz: ININAnalyticsSession.self) { (source: AnyObject) -> ININAnalyticsSession in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnalyticsSession()
                instance.mediaType = ININAnalyticsSession.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                instance.sessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sessionId"])
                instance.addressOther = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressOther"])
                instance.addressSelf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressSelf"])
                instance.ani = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ani"])
                instance.direction = ININAnalyticsSession.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.dnis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dnis"])
                instance.outboundCampaignId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outboundCampaignId"])
                instance.outboundContactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outboundContactId"])
                instance.outboundContactListId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outboundContactListId"])
                instance.dispositionAnalyzer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dispositionAnalyzer"])
                instance.dispositionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dispositionName"])
                instance.edgeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeId"])
                instance.remoteNameDisplayable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remoteNameDisplayable"])
                instance.roomId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roomId"])
                instance.monitoredSessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["monitoredSessionId"])
                instance.monitoredParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["monitoredParticipantId"])
                instance.callbackUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callbackUserName"])
                instance.callbackNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbackNumbers"])
                instance.callbackScheduledTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["callbackScheduledTime"])
                instance.scriptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scriptId"])
                instance.skipEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skipEnabled"])
                instance.timeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeoutSeconds"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                return instance
            }


            // Decoder for [ININAnnotation]
            Decoders.addDecoder(clazz: [ININAnnotation].self) { (source: AnyObject) -> [ININAnnotation] in
                return Decoders.decode(clazz: [ININAnnotation].self, source: source)
            }
            // Decoder for ININAnnotation
            Decoders.addDecoder(clazz: ININAnnotation.self) { (source: AnyObject) -> ININAnnotation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAnnotation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.location = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location"])
                instance.durationMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["durationMs"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININApp]
            Decoders.addDecoder(clazz: [ININApp].self) { (source: AnyObject) -> [ININApp] in
                return Decoders.decode(clazz: [ININApp].self, source: source)
            }
            // Decoder for ININApp
            Decoders.addDecoder(clazz: ININApp.self) { (source: AnyObject) -> ININApp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININApp()
                instance.appId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appId"])
                instance.appVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appVersion"])
                return instance
            }


            // Decoder for [ININArchitectAuditMessage]
            Decoders.addDecoder(clazz: [ININArchitectAuditMessage].self) { (source: AnyObject) -> [ININArchitectAuditMessage] in
                return Decoders.decode(clazz: [ININArchitectAuditMessage].self, source: source)
            }
            // Decoder for ININArchitectAuditMessage
            Decoders.addDecoder(clazz: ININArchitectAuditMessage.self) { (source: AnyObject) -> ININArchitectAuditMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININArchitectAuditMessage()
                instance.action = ININArchitectAuditMessage.ININAction(rawValue: (sourceDictionary["action"] as? String) ?? "") 
                instance.user = Decoders.decodeOptional(clazz: ININAuditUser.self, source: sourceDictionary["user"])
                instance.timestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timestamp"])
                instance.changes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["changes"])
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntity.self, source: sourceDictionary["entity"])
                return instance
            }


            // Decoder for [ININArchitectAuditMessageListing]
            Decoders.addDecoder(clazz: [ININArchitectAuditMessageListing].self) { (source: AnyObject) -> [ININArchitectAuditMessageListing] in
                return Decoders.decode(clazz: [ININArchitectAuditMessageListing].self, source: source)
            }
            // Decoder for ININArchitectAuditMessageListing
            Decoders.addDecoder(clazz: ININArchitectAuditMessageListing.self) { (source: AnyObject) -> ININArchitectAuditMessageListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININArchitectAuditMessageListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININArchiveRetention]
            Decoders.addDecoder(clazz: [ININArchiveRetention].self) { (source: AnyObject) -> [ININArchiveRetention] in
                return Decoders.decode(clazz: [ININArchiveRetention].self, source: source)
            }
            // Decoder for ININArchiveRetention
            Decoders.addDecoder(clazz: ININArchiveRetention.self) { (source: AnyObject) -> ININArchiveRetention in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININArchiveRetention()
                instance.days = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["days"])
                instance.storageMedium = ININArchiveRetention.ININStorageMedium(rawValue: (sourceDictionary["storageMedium"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININAsset]
            Decoders.addDecoder(clazz: [ININAsset].self) { (source: AnyObject) -> [ININAsset] in
                return Decoders.decode(clazz: [ININAsset].self, source: source)
            }
            // Decoder for ININAsset
            Decoders.addDecoder(clazz: ININAsset.self) { (source: AnyObject) -> ININAsset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAsset()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.downloadUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadUrl"])
                instance.fileSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["fileSizeBytes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAssetEntityListing]
            Decoders.addDecoder(clazz: [ININAssetEntityListing].self) { (source: AnyObject) -> [ININAssetEntityListing] in
                return Decoders.decode(clazz: [ININAssetEntityListing].self, source: source)
            }
            // Decoder for ININAssetEntityListing
            Decoders.addDecoder(clazz: ININAssetEntityListing.self) { (source: AnyObject) -> ININAssetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAssetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININAssociatedDocument]
            Decoders.addDecoder(clazz: [ININAssociatedDocument].self) { (source: AnyObject) -> [ININAssociatedDocument] in
                return Decoders.decode(clazz: [ININAssociatedDocument].self, source: source)
            }
            // Decoder for ININAssociatedDocument
            Decoders.addDecoder(clazz: ININAssociatedDocument.self) { (source: AnyObject) -> ININAssociatedDocument in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAssociatedDocument()
                instance.document = Decoders.decodeOptional(clazz: ININDocument.self, source: sourceDictionary["document"])
                instance.documentAssociationType = ININAssociatedDocument.ININDocumentAssociationType(rawValue: (sourceDictionary["documentAssociationType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININAttachment]
            Decoders.addDecoder(clazz: [ININAttachment].self) { (source: AnyObject) -> [ININAttachment] in
                return Decoders.decode(clazz: [ININAttachment].self, source: source)
            }
            // Decoder for ININAttachment
            Decoders.addDecoder(clazz: ININAttachment.self) { (source: AnyObject) -> ININAttachment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAttachment()
                instance.attachmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attachmentId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.contentUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentUri"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.contentLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contentLength"])
                return instance
            }


            // Decoder for [ININAttribute]
            Decoders.addDecoder(clazz: [ININAttribute].self) { (source: AnyObject) -> [ININAttribute] in
                return Decoders.decode(clazz: [ININAttribute].self, source: source)
            }
            // Decoder for ININAttribute
            Decoders.addDecoder(clazz: ININAttribute.self) { (source: AnyObject) -> ININAttribute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAttribute()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["createdBy"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["modifiedBy"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAttributeEntityListing]
            Decoders.addDecoder(clazz: [ININAttributeEntityListing].self) { (source: AnyObject) -> [ININAttributeEntityListing] in
                return Decoders.decode(clazz: [ININAttributeEntityListing].self, source: source)
            }
            // Decoder for ININAttributeEntityListing
            Decoders.addDecoder(clazz: ININAttributeEntityListing.self) { (source: AnyObject) -> ININAttributeEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAttributeEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININAttributeFilterItem]
            Decoders.addDecoder(clazz: [ININAttributeFilterItem].self) { (source: AnyObject) -> [ININAttributeFilterItem] in
                return Decoders.decode(clazz: [ININAttributeFilterItem].self, source: source)
            }
            // Decoder for ININAttributeFilterItem
            Decoders.addDecoder(clazz: ININAttributeFilterItem.self) { (source: AnyObject) -> ININAttributeFilterItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAttributeFilterItem()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._operator = ININAttributeFilterItem.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININAttributeQueryRequest]
            Decoders.addDecoder(clazz: [ININAttributeQueryRequest].self) { (source: AnyObject) -> [ININAttributeQueryRequest] in
                return Decoders.decode(clazz: [ININAttributeQueryRequest].self, source: source)
            }
            // Decoder for ININAttributeQueryRequest
            Decoders.addDecoder(clazz: ININAttributeQueryRequest.self) { (source: AnyObject) -> ININAttributeQueryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAttributeQueryRequest()
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                return instance
            }


            // Decoder for [ININAuditChange]
            Decoders.addDecoder(clazz: [ININAuditChange].self) { (source: AnyObject) -> [ININAuditChange] in
                return Decoders.decode(clazz: [ININAuditChange].self, source: source)
            }
            // Decoder for ININAuditChange
            Decoders.addDecoder(clazz: ININAuditChange.self) { (source: AnyObject) -> ININAuditChange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditChange()
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntityReference.self, source: sourceDictionary["entity"])
                instance.oldValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["oldValues"])
                instance.newValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["newValues"])
                return instance
            }


            // Decoder for [ININAuditEntity]
            Decoders.addDecoder(clazz: [ININAuditEntity].self) { (source: AnyObject) -> [ININAuditEntity] in
                return Decoders.decode(clazz: [ININAuditEntity].self, source: source)
            }
            // Decoder for ININAuditEntity
            Decoders.addDecoder(clazz: ININAuditEntity.self) { (source: AnyObject) -> ININAuditEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditEntity()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAuditEntityReference]
            Decoders.addDecoder(clazz: [ININAuditEntityReference].self) { (source: AnyObject) -> [ININAuditEntityReference] in
                return Decoders.decode(clazz: [ININAuditEntityReference].self, source: source)
            }
            // Decoder for ININAuditEntityReference
            Decoders.addDecoder(clazz: ININAuditEntityReference.self) { (source: AnyObject) -> ININAuditEntityReference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditEntityReference()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.type = ININAuditEntityReference.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                return instance
            }


            // Decoder for [ININAuditFacet]
            Decoders.addDecoder(clazz: [ININAuditFacet].self) { (source: AnyObject) -> [ININAuditFacet] in
                return Decoders.decode(clazz: [ININAuditFacet].self, source: source)
            }
            // Decoder for ININAuditFacet
            Decoders.addDecoder(clazz: ININAuditFacet.self) { (source: AnyObject) -> ININAuditFacet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditFacet()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ININAuditFilter]
            Decoders.addDecoder(clazz: [ININAuditFilter].self) { (source: AnyObject) -> [ININAuditFilter] in
                return Decoders.decode(clazz: [ININAuditFilter].self, source: source)
            }
            // Decoder for ININAuditFilter
            Decoders.addDecoder(clazz: ININAuditFilter.self) { (source: AnyObject) -> ININAuditFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditFilter()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance._operator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operator"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININAuditMessage]
            Decoders.addDecoder(clazz: [ININAuditMessage].self) { (source: AnyObject) -> [ININAuditMessage] in
                return Decoders.decode(clazz: [ININAuditMessage].self, source: source)
            }
            // Decoder for ININAuditMessage
            Decoders.addDecoder(clazz: ININAuditMessage.self) { (source: AnyObject) -> ININAuditMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditMessage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.user = Decoders.decodeOptional(clazz: ININAuditUser.self, source: sourceDictionary["user"])
                instance.correlationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationId"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"])
                instance.transactionInitiator = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transactionInitiator"])
                instance.application = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["application"])
                instance.serviceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serviceName"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.receivedTimestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receivedTimestamp"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.actionContext = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["actionContext"])
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.changes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["changes"])
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntity.self, source: sourceDictionary["entity"])
                instance.serviceContext = Decoders.decodeOptional(clazz: ININServiceContext.self, source: sourceDictionary["serviceContext"])
                return instance
            }


            // Decoder for [ININAuditSearchResult]
            Decoders.addDecoder(clazz: [ININAuditSearchResult].self) { (source: AnyObject) -> [ININAuditSearchResult] in
                return Decoders.decode(clazz: [ININAuditSearchResult].self, source: source)
            }
            // Decoder for ININAuditSearchResult
            Decoders.addDecoder(clazz: ININAuditSearchResult.self) { (source: AnyObject) -> ININAuditSearchResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditSearchResult()
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                instance.facetInfo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetInfo"])
                instance.auditMessages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["auditMessages"])
                return instance
            }


            // Decoder for [ININAuditUser]
            Decoders.addDecoder(clazz: [ININAuditUser].self) { (source: AnyObject) -> [ININAuditUser] in
                return Decoders.decode(clazz: [ININAuditUser].self, source: source)
            }
            // Decoder for ININAuditUser
            Decoders.addDecoder(clazz: ININAuditUser.self) { (source: AnyObject) -> ININAuditUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuditUser()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.display = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"])
                return instance
            }


            // Decoder for [ININAuthzGrant]
            Decoders.addDecoder(clazz: [ININAuthzGrant].self) { (source: AnyObject) -> [ININAuthzGrant] in
                return Decoders.decode(clazz: [ININAuthzGrant].self, source: source)
            }
            // Decoder for ININAuthzGrant
            Decoders.addDecoder(clazz: ININAuthzGrant.self) { (source: AnyObject) -> ININAuthzGrant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzGrant()
                instance.permissionContext = Decoders.decodeOptional(clazz: ININAuthzPermissionContext.self, source: sourceDictionary["permissionContext"])
                instance.role = Decoders.decodeOptional(clazz: ININAuthzGrantRole.self, source: sourceDictionary["role"])
                instance.grantMadeAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["grantMadeAt"])
                return instance
            }


            // Decoder for [ININAuthzGrantPolicy]
            Decoders.addDecoder(clazz: [ININAuthzGrantPolicy].self) { (source: AnyObject) -> [ININAuthzGrantPolicy] in
                return Decoders.decode(clazz: [ININAuthzGrantPolicy].self, source: source)
            }
            // Decoder for ININAuthzGrantPolicy
            Decoders.addDecoder(clazz: ININAuthzGrantPolicy.self) { (source: AnyObject) -> ININAuthzGrantPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzGrantPolicy()
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.condition = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["condition"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.entityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityName"])
                return instance
            }


            // Decoder for [ININAuthzGrantRole]
            Decoders.addDecoder(clazz: [ININAuthzGrantRole].self) { (source: AnyObject) -> [ININAuthzGrantRole] in
                return Decoders.decode(clazz: [ININAuthzGrantRole].self, source: source)
            }
            // Decoder for ININAuthzGrantRole
            Decoders.addDecoder(clazz: ININAuthzGrantRole.self) { (source: AnyObject) -> ININAuthzGrantRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzGrantRole()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.policies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["policies"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAuthzObject]
            Decoders.addDecoder(clazz: [ININAuthzObject].self) { (source: AnyObject) -> [ININAuthzObject] in
                return Decoders.decode(clazz: [ININAuthzObject].self, source: source)
            }
            // Decoder for ININAuthzObject
            Decoders.addDecoder(clazz: ININAuthzObject.self) { (source: AnyObject) -> ININAuthzObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.lastModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastModified"])
                instance.permissionContexts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissionContexts"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAuthzPerm]
            Decoders.addDecoder(clazz: [ININAuthzPerm].self) { (source: AnyObject) -> [ININAuthzPerm] in
                return Decoders.decode(clazz: [ININAuthzPerm].self, source: source)
            }
            // Decoder for ININAuthzPerm
            Decoders.addDecoder(clazz: ININAuthzPerm.self) { (source: AnyObject) -> ININAuthzPerm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzPerm()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.permitted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["permitted"])
                return instance
            }


            // Decoder for [ININAuthzPermissionContext]
            Decoders.addDecoder(clazz: [ININAuthzPermissionContext].self) { (source: AnyObject) -> [ININAuthzPermissionContext] in
                return Decoders.decode(clazz: [ININAuthzPermissionContext].self, source: source)
            }
            // Decoder for ININAuthzPermissionContext
            Decoders.addDecoder(clazz: ININAuthzPermissionContext.self) { (source: AnyObject) -> ININAuthzPermissionContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzPermissionContext()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ININAuthzSubject]
            Decoders.addDecoder(clazz: [ININAuthzSubject].self) { (source: AnyObject) -> [ININAuthzSubject] in
                return Decoders.decode(clazz: [ININAuthzSubject].self, source: source)
            }
            // Decoder for ININAuthzSubject
            Decoders.addDecoder(clazz: ININAuthzSubject.self) { (source: AnyObject) -> ININAuthzSubject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAuthzSubject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.grants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["grants"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAvailableAdditionalService]
            Decoders.addDecoder(clazz: [ININAvailableAdditionalService].self) { (source: AnyObject) -> [ININAvailableAdditionalService] in
                return Decoders.decode(clazz: [ININAvailableAdditionalService].self, source: source)
            }
            // Decoder for ININAvailableAdditionalService
            Decoders.addDecoder(clazz: ININAvailableAdditionalService.self) { (source: AnyObject) -> ININAvailableAdditionalService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAvailableAdditionalService()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.partNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["partNumber"])
                instance.requiredForProducts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["requiredForProducts"])
                instance.availableForProducts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["availableForProducts"])
                instance.defaultForProducts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["defaultForProducts"])
                instance.exclusiveFromProducts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["exclusiveFromProducts"])
                instance.rate = Decoders.decodeOptional(clazz: ININRate.self, source: sourceDictionary["rate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININAvailableAdditionalServiceListing]
            Decoders.addDecoder(clazz: [ININAvailableAdditionalServiceListing].self) { (source: AnyObject) -> [ININAvailableAdditionalServiceListing] in
                return Decoders.decode(clazz: [ININAvailableAdditionalServiceListing].self, source: source)
            }
            // Decoder for ININAvailableAdditionalServiceListing
            Decoders.addDecoder(clazz: ININAvailableAdditionalServiceListing.self) { (source: AnyObject) -> ININAvailableAdditionalServiceListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAvailableAdditionalServiceListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININAvailableLanguageList]
            Decoders.addDecoder(clazz: [ININAvailableLanguageList].self) { (source: AnyObject) -> [ININAvailableLanguageList] in
                return Decoders.decode(clazz: [ININAvailableLanguageList].self, source: source)
            }
            // Decoder for ININAvailableLanguageList
            Decoders.addDecoder(clazz: ININAvailableLanguageList.self) { (source: AnyObject) -> ININAvailableLanguageList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAvailableLanguageList()
                instance.languages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["languages"])
                return instance
            }


            // Decoder for [ININAvailableTopic]
            Decoders.addDecoder(clazz: [ININAvailableTopic].self) { (source: AnyObject) -> [ININAvailableTopic] in
                return Decoders.decode(clazz: [ININAvailableTopic].self, source: source)
            }
            // Decoder for ININAvailableTopic
            Decoders.addDecoder(clazz: ININAvailableTopic.self) { (source: AnyObject) -> ININAvailableTopic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAvailableTopic()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.schema = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["schema"])
                return instance
            }


            // Decoder for [ININAvailableTopicEntityListing]
            Decoders.addDecoder(clazz: [ININAvailableTopicEntityListing].self) { (source: AnyObject) -> [ININAvailableTopicEntityListing] in
                return Decoders.decode(clazz: [ININAvailableTopicEntityListing].self, source: source)
            }
            // Decoder for ININAvailableTopicEntityListing
            Decoders.addDecoder(clazz: ININAvailableTopicEntityListing.self) { (source: AnyObject) -> ININAvailableTopicEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININAvailableTopicEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININBackendFlowAvailableActions]
            Decoders.addDecoder(clazz: [ININBackendFlowAvailableActions].self) { (source: AnyObject) -> [ININBackendFlowAvailableActions] in
                return Decoders.decode(clazz: [ININBackendFlowAvailableActions].self, source: source)
            }
            // Decoder for ININBackendFlowAvailableActions
            Decoders.addDecoder(clazz: ININBackendFlowAvailableActions.self) { (source: AnyObject) -> ININBackendFlowAvailableActions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBackendFlowAvailableActions()
                instance.canTerminate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["canTerminate"])
                return instance
            }


            // Decoder for [ININBasicTransform]
            Decoders.addDecoder(clazz: [ININBasicTransform].self) { (source: AnyObject) -> [ININBasicTransform] in
                return Decoders.decode(clazz: [ININBasicTransform].self, source: source)
            }
            // Decoder for ININBasicTransform
            Decoders.addDecoder(clazz: ININBasicTransform.self) { (source: AnyObject) -> ININBasicTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBasicTransform()
                instance.replaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["replaces"])
                instance.entityPath = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entityPath"])
                return instance
            }


            // Decoder for [ININBatchCommand]
            Decoders.addDecoder(clazz: [ININBatchCommand].self) { (source: AnyObject) -> [ININBatchCommand] in
                return Decoders.decode(clazz: [ININBatchCommand].self, source: source)
            }
            // Decoder for ININBatchCommand
            Decoders.addDecoder(clazz: ININBatchCommand.self) { (source: AnyObject) -> ININBatchCommand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBatchCommand()
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.commandId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commandId"])
                return instance
            }


            // Decoder for [ININBatchItem]
            Decoders.addDecoder(clazz: [ININBatchItem].self) { (source: AnyObject) -> [ININBatchItem] in
                return Decoders.decode(clazz: [ININBatchItem].self, source: source)
            }
            // Decoder for ININBatchItem
            Decoders.addDecoder(clazz: ININBatchItem.self) { (source: AnyObject) -> ININBatchItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBatchItem()
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.body = Decoders.decodeOptional(clazz: ININBatchItemBody.self, source: sourceDictionary["body"])
                return instance
            }


            // Decoder for [ININBatchItemBody]
            Decoders.addDecoder(clazz: [ININBatchItemBody].self) { (source: AnyObject) -> [ININBatchItemBody] in
                return Decoders.decode(clazz: [ININBatchItemBody].self, source: source)
            }
            // Decoder for ININBatchItemBody
            Decoders.addDecoder(clazz: ININBatchItemBody.self) { (source: AnyObject) -> ININBatchItemBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBatchItemBody()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININBatchReply]
            Decoders.addDecoder(clazz: [ININBatchReply].self) { (source: AnyObject) -> [ININBatchReply] in
                return Decoders.decode(clazz: [ININBatchReply].self, source: source)
            }
            // Decoder for ININBatchReply
            Decoders.addDecoder(clazz: ININBatchReply.self) { (source: AnyObject) -> ININBatchReply in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBatchReply()
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [ININBatchReplyItem]
            Decoders.addDecoder(clazz: [ININBatchReplyItem].self) { (source: AnyObject) -> [ININBatchReplyItem] in
                return Decoders.decode(clazz: [ININBatchReplyItem].self, source: source)
            }
            // Decoder for ININBatchReplyItem
            Decoders.addDecoder(clazz: ININBatchReplyItem.self) { (source: AnyObject) -> ININBatchReplyItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBatchReplyItem()
                instance.code = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["code"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.body = Decoders.decodeOptional(clazz: ININBatchItemBody.self, source: sourceDictionary["body"])
                return instance
            }


            // Decoder for [ININBillingAddress]
            Decoders.addDecoder(clazz: [ININBillingAddress].self) { (source: AnyObject) -> [ININBillingAddress] in
                return Decoders.decode(clazz: [ININBillingAddress].self, source: source)
            }
            // Decoder for ININBillingAddress
            Decoders.addDecoder(clazz: ININBillingAddress.self) { (source: AnyObject) -> ININBillingAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingAddress()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryName"])
                instance.stateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateName"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININBillingContact]
            Decoders.addDecoder(clazz: [ININBillingContact].self) { (source: AnyObject) -> [ININBillingContact] in
                return Decoders.decode(clazz: [ININBillingContact].self, source: source)
            }
            // Decoder for ININBillingContact
            Decoders.addDecoder(clazz: ININBillingContact.self) { (source: AnyObject) -> ININBillingContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingContact()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.ivrCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ivrCode"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININBillingContactListing]
            Decoders.addDecoder(clazz: [ININBillingContactListing].self) { (source: AnyObject) -> [ININBillingContactListing] in
                return Decoders.decode(clazz: [ININBillingContactListing].self, source: source)
            }
            // Decoder for ININBillingContactListing
            Decoders.addDecoder(clazz: ININBillingContactListing.self) { (source: AnyObject) -> ININBillingContactListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingContactListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININBillingPendingTask]
            Decoders.addDecoder(clazz: [ININBillingPendingTask].self) { (source: AnyObject) -> [ININBillingPendingTask] in
                return Decoders.decode(clazz: [ININBillingPendingTask].self, source: source)
            }
            // Decoder for ININBillingPendingTask
            Decoders.addDecoder(clazz: ININBillingPendingTask.self) { (source: AnyObject) -> ININBillingPendingTask in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingPendingTask()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.task = Decoders.decodeOptional(clazz: ININBillingTaskResult.self, source: sourceDictionary["task"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININBillingPeriod]
            Decoders.addDecoder(clazz: [ININBillingPeriod].self) { (source: AnyObject) -> [ININBillingPeriod] in
                return Decoders.decode(clazz: [ININBillingPeriod].self, source: source)
            }
            // Decoder for ININBillingPeriod
            Decoders.addDecoder(clazz: ININBillingPeriod.self) { (source: AnyObject) -> ININBillingPeriod in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingPeriod()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININBillingTaskResult]
            Decoders.addDecoder(clazz: [ININBillingTaskResult].self) { (source: AnyObject) -> [ININBillingTaskResult] in
                return Decoders.decode(clazz: [ININBillingTaskResult].self, source: source)
            }
            // Decoder for ININBillingTaskResult
            Decoders.addDecoder(clazz: ININBillingTaskResult.self) { (source: AnyObject) -> ININBillingTaskResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBillingTaskResult()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.taskType = ININBillingTaskResult.ININTaskType(rawValue: (sourceDictionary["taskType"] as? String) ?? "") 
                instance.status = ININBillingTaskResult.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.resultId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultId"])
                instance.resultUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultUri"])
                instance.resultDownloadUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultDownloadUrl"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININBullseye]
            Decoders.addDecoder(clazz: [ININBullseye].self) { (source: AnyObject) -> [ININBullseye] in
                return Decoders.decode(clazz: [ININBullseye].self, source: source)
            }
            // Decoder for ININBullseye
            Decoders.addDecoder(clazz: ININBullseye.self) { (source: AnyObject) -> ININBullseye in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININBullseye()
                instance.rings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rings"])
                return instance
            }


            // Decoder for [ININCalibration]
            Decoders.addDecoder(clazz: [ININCalibration].self) { (source: AnyObject) -> [ININCalibration] in
                return Decoders.decode(clazz: [ININCalibration].self, source: source)
            }
            // Decoder for ININCalibration
            Decoders.addDecoder(clazz: ININCalibration.self) { (source: AnyObject) -> ININCalibration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCalibration()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.calibrator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["calibrator"])
                instance.agent = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["agent"])
                instance.conversation = Decoders.decodeOptional(clazz: ININConversation.self, source: sourceDictionary["conversation"])
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextId"])
                instance.averageScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["averageScore"])
                instance.highScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["highScore"])
                instance.lowScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lowScore"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.evaluations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluations"])
                instance.evaluators = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluators"])
                instance.scoringIndex = Decoders.decodeOptional(clazz: ININEvaluation.self, source: sourceDictionary["scoringIndex"])
                instance.expertEvaluator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["expertEvaluator"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCalibrationAssignment]
            Decoders.addDecoder(clazz: [ININCalibrationAssignment].self) { (source: AnyObject) -> [ININCalibrationAssignment] in
                return Decoders.decode(clazz: [ININCalibrationAssignment].self, source: source)
            }
            // Decoder for ININCalibrationAssignment
            Decoders.addDecoder(clazz: ININCalibrationAssignment.self) { (source: AnyObject) -> ININCalibrationAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCalibrationAssignment()
                instance.calibrator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["calibrator"])
                instance.evaluators = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluators"])
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.expertEvaluator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["expertEvaluator"])
                return instance
            }


            // Decoder for [ININCalibrationEntityListing]
            Decoders.addDecoder(clazz: [ININCalibrationEntityListing].self) { (source: AnyObject) -> [ININCalibrationEntityListing] in
                return Decoders.decode(clazz: [ININCalibrationEntityListing].self, source: source)
            }
            // Decoder for ININCalibrationEntityListing
            Decoders.addDecoder(clazz: ININCalibrationEntityListing.self) { (source: AnyObject) -> ININCalibrationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCalibrationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCall]
            Decoders.addDecoder(clazz: [ININCall].self) { (source: AnyObject) -> [ININCall] in
                return Decoders.decode(clazz: [ININCall].self, source: source)
            }
            // Decoder for ININCall
            Decoders.addDecoder(clazz: ININCall.self) { (source: AnyObject) -> ININCall in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCall()
                instance.state = ININCall.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.direction = ININCall.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.recording = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["recording"])
                instance.recordingState = ININCall.ININRecordingState(rawValue: (sourceDictionary["recordingState"] as? String) ?? "") 
                instance.muted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["muted"])
                instance.confined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["confined"])
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.recordingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recordingId"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.disconnectType = ININCall.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.documentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentId"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                instance.disconnectReasons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["disconnectReasons"])
                return instance
            }


            // Decoder for [ININCallCommand]
            Decoders.addDecoder(clazz: [ININCallCommand].self) { (source: AnyObject) -> [ININCallCommand] in
                return Decoders.decode(clazz: [ININCallCommand].self, source: source)
            }
            // Decoder for ININCallCommand
            Decoders.addDecoder(clazz: ININCallCommand.self) { (source: AnyObject) -> ININCallCommand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallCommand()
                instance.callNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callNumber"])
                return instance
            }


            // Decoder for [ININCallConversation]
            Decoders.addDecoder(clazz: [ININCallConversation].self) { (source: AnyObject) -> [ININCallConversation] in
                return Decoders.decode(clazz: [ININCallConversation].self, source: source)
            }
            // Decoder for ININCallConversation
            Decoders.addDecoder(clazz: ININCallConversation.self) { (source: AnyObject) -> ININCallConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.recordingState = ININCallConversation.ININRecordingState(rawValue: (sourceDictionary["recordingState"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCallConversationEntityListing]
            Decoders.addDecoder(clazz: [ININCallConversationEntityListing].self) { (source: AnyObject) -> [ININCallConversationEntityListing] in
                return Decoders.decode(clazz: [ININCallConversationEntityListing].self, source: source)
            }
            // Decoder for ININCallConversationEntityListing
            Decoders.addDecoder(clazz: ININCallConversationEntityListing.self) { (source: AnyObject) -> ININCallConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCallForwarding]
            Decoders.addDecoder(clazz: [ININCallForwarding].self) { (source: AnyObject) -> [ININCallForwarding] in
                return Decoders.decode(clazz: [ININCallForwarding].self, source: source)
            }
            // Decoder for ININCallForwarding
            Decoders.addDecoder(clazz: ININCallForwarding.self) { (source: AnyObject) -> ININCallForwarding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallForwarding()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCallMediaParticipant]
            Decoders.addDecoder(clazz: [ININCallMediaParticipant].self) { (source: AnyObject) -> [ININCallMediaParticipant] in
                return Decoders.decode(clazz: [ININCallMediaParticipant].self, source: source)
            }
            // Decoder for ININCallMediaParticipant
            Decoders.addDecoder(clazz: ININCallMediaParticipant.self) { (source: AnyObject) -> ININCallMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININCallMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININCallMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININCallMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.muted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["muted"])
                instance.confined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["confined"])
                instance.recording = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["recording"])
                instance.recordingState = ININCallMediaParticipant.ININRecordingState(rawValue: (sourceDictionary["recordingState"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["group"])
                instance.ani = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ani"])
                instance.dnis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dnis"])
                instance.documentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentId"])
                instance.monitoredParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["monitoredParticipantId"])
                instance.consultParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["consultParticipantId"])
                return instance
            }


            // Decoder for [ININCallMediaPolicy]
            Decoders.addDecoder(clazz: [ININCallMediaPolicy].self) { (source: AnyObject) -> [ININCallMediaPolicy] in
                return Decoders.decode(clazz: [ININCallMediaPolicy].self, source: source)
            }
            // Decoder for ININCallMediaPolicy
            Decoders.addDecoder(clazz: ININCallMediaPolicy.self) { (source: AnyObject) -> ININCallMediaPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallMediaPolicy()
                instance.actions = Decoders.decodeOptional(clazz: ININPolicyActions.self, source: sourceDictionary["actions"])
                instance.conditions = Decoders.decodeOptional(clazz: ININCallMediaPolicyConditions.self, source: sourceDictionary["conditions"])
                return instance
            }


            // Decoder for [ININCallMediaPolicyConditions]
            Decoders.addDecoder(clazz: [ININCallMediaPolicyConditions].self) { (source: AnyObject) -> [ININCallMediaPolicyConditions] in
                return Decoders.decode(clazz: [ININCallMediaPolicyConditions].self, source: source)
            }
            // Decoder for ININCallMediaPolicyConditions
            Decoders.addDecoder(clazz: ININCallMediaPolicyConditions.self) { (source: AnyObject) -> ININCallMediaPolicyConditions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallMediaPolicyConditions()
                instance.forUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forUsers"])
                instance.dateRanges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateRanges"])
                instance.forQueues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forQueues"])
                instance.wrapupCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wrapupCodes"])
                instance.timeAllowed = Decoders.decodeOptional(clazz: ININTimeAllowed.self, source: sourceDictionary["timeAllowed"])
                instance.directions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["directions"])
                instance.duration = Decoders.decodeOptional(clazz: ININDurationCondition.self, source: sourceDictionary["duration"])
                return instance
            }


            // Decoder for [ININCallRecord]
            Decoders.addDecoder(clazz: [ININCallRecord].self) { (source: AnyObject) -> [ININCallRecord] in
                return Decoders.decode(clazz: [ININCallRecord].self, source: source)
            }
            // Decoder for ININCallRecord
            Decoders.addDecoder(clazz: ININCallRecord.self) { (source: AnyObject) -> ININCallRecord in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallRecord()
                instance.lastAttempt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastAttempt"])
                instance.lastResult = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastResult"])
                return instance
            }


            // Decoder for [ININCallableContactsDiagnostic]
            Decoders.addDecoder(clazz: [ININCallableContactsDiagnostic].self) { (source: AnyObject) -> [ININCallableContactsDiagnostic] in
                return Decoders.decode(clazz: [ININCallableContactsDiagnostic].self, source: source)
            }
            // Decoder for ININCallableContactsDiagnostic
            Decoders.addDecoder(clazz: ININCallableContactsDiagnostic.self) { (source: AnyObject) -> ININCallableContactsDiagnostic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallableContactsDiagnostic()
                instance.dncLists = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dncLists"])
                instance.callableTimeSet = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["callableTimeSet"])
                instance.ruleSets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ruleSets"])
                return instance
            }


            // Decoder for [ININCallableTime]
            Decoders.addDecoder(clazz: [ININCallableTime].self) { (source: AnyObject) -> [ININCallableTime] in
                return Decoders.decode(clazz: [ININCallableTime].self, source: source)
            }
            // Decoder for ININCallableTime
            Decoders.addDecoder(clazz: ININCallableTime.self) { (source: AnyObject) -> ININCallableTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallableTime()
                instance.timeSlots = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["timeSlots"])
                instance.timeZoneId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZoneId"])
                return instance
            }


            // Decoder for [ININCallableTimeSet]
            Decoders.addDecoder(clazz: [ININCallableTimeSet].self) { (source: AnyObject) -> [ININCallableTimeSet] in
                return Decoders.decode(clazz: [ININCallableTimeSet].self, source: source)
            }
            // Decoder for ININCallableTimeSet
            Decoders.addDecoder(clazz: ININCallableTimeSet.self) { (source: AnyObject) -> ININCallableTimeSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallableTimeSet()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.callableTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callableTimes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCallableTimeSetEntityListing]
            Decoders.addDecoder(clazz: [ININCallableTimeSetEntityListing].self) { (source: AnyObject) -> [ININCallableTimeSetEntityListing] in
                return Decoders.decode(clazz: [ININCallableTimeSetEntityListing].self, source: source)
            }
            // Decoder for ININCallableTimeSetEntityListing
            Decoders.addDecoder(clazz: ININCallableTimeSetEntityListing.self) { (source: AnyObject) -> ININCallableTimeSetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallableTimeSetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCallback]
            Decoders.addDecoder(clazz: [ININCallback].self) { (source: AnyObject) -> [ININCallback] in
                return Decoders.decode(clazz: [ININCallback].self, source: source)
            }
            // Decoder for ININCallback
            Decoders.addDecoder(clazz: ININCallback.self) { (source: AnyObject) -> ININCallback in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallback()
                instance.state = ININCallback.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                instance.direction = ININCallback.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.disconnectType = ININCallback.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.dialerPreview = Decoders.decodeOptional(clazz: ININDialerPreview.self, source: sourceDictionary["dialerPreview"])
                instance.callbackNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbackNumbers"])
                instance.callbackUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callbackUserName"])
                instance.scriptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scriptId"])
                instance.skipEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skipEnabled"])
                instance.timeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeoutSeconds"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                instance.callbackScheduledTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["callbackScheduledTime"])
                return instance
            }


            // Decoder for [ININCallbackConversation]
            Decoders.addDecoder(clazz: [ININCallbackConversation].self) { (source: AnyObject) -> [ININCallbackConversation] in
                return Decoders.decode(clazz: [ININCallbackConversation].self, source: source)
            }
            // Decoder for ININCallbackConversation
            Decoders.addDecoder(clazz: ININCallbackConversation.self) { (source: AnyObject) -> ININCallbackConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallbackConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCallbackConversationEntityListing]
            Decoders.addDecoder(clazz: [ININCallbackConversationEntityListing].self) { (source: AnyObject) -> [ININCallbackConversationEntityListing] in
                return Decoders.decode(clazz: [ININCallbackConversationEntityListing].self, source: source)
            }
            // Decoder for ININCallbackConversationEntityListing
            Decoders.addDecoder(clazz: ININCallbackConversationEntityListing.self) { (source: AnyObject) -> ININCallbackConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallbackConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCallbackIdentifier]
            Decoders.addDecoder(clazz: [ININCallbackIdentifier].self) { (source: AnyObject) -> [ININCallbackIdentifier] in
                return Decoders.decode(clazz: [ININCallbackIdentifier].self, source: source)
            }
            // Decoder for ININCallbackIdentifier
            Decoders.addDecoder(clazz: ININCallbackIdentifier.self) { (source: AnyObject) -> ININCallbackIdentifier in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallbackIdentifier()
                instance.type = ININCallbackIdentifier.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ININCallbackMediaParticipant]
            Decoders.addDecoder(clazz: [ININCallbackMediaParticipant].self) { (source: AnyObject) -> [ININCallbackMediaParticipant] in
                return Decoders.decode(clazz: [ININCallbackMediaParticipant].self, source: source)
            }
            // Decoder for ININCallbackMediaParticipant
            Decoders.addDecoder(clazz: ININCallbackMediaParticipant.self) { (source: AnyObject) -> ININCallbackMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCallbackMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININCallbackMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININCallbackMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININCallbackMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.outboundPreview = Decoders.decodeOptional(clazz: ININDialerPreview.self, source: sourceDictionary["outboundPreview"])
                instance.callbackNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbackNumbers"])
                instance.callbackUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callbackUserName"])
                instance.skipEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skipEnabled"])
                instance.timeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeoutSeconds"])
                instance.callbackScheduledTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["callbackScheduledTime"])
                return instance
            }


            // Decoder for [ININCampaign]
            Decoders.addDecoder(clazz: [ININCampaign].self) { (source: AnyObject) -> [ININCampaign] in
                return Decoders.decode(clazz: [ININCampaign].self, source: source)
            }
            // Decoder for ININCampaign
            Decoders.addDecoder(clazz: ININCampaign.self) { (source: AnyObject) -> ININCampaign in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaign()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.contactList = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["contactList"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.dialingMode = ININCampaign.ININDialingMode(rawValue: (sourceDictionary["dialingMode"] as? String) ?? "") 
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edgeGroup"])
                instance.campaignStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["campaignStatus"])
                instance.phoneColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneColumns"])
                instance.abandonRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["abandonRate"])
                instance.dncLists = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dncLists"])
                instance.callableTimeSet = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["callableTimeSet"])
                instance.callAnalysisResponseSet = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["callAnalysisResponseSet"])
                instance.errors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["errors"])
                instance.callerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerName"])
                instance.callerAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerAddress"])
                instance.outboundLineCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outboundLineCount"])
                instance.ruleSets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ruleSets"])
                instance.skipPreviewDisabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["skipPreviewDisabled"])
                instance.previewTimeOutSeconds = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["previewTimeOutSeconds"])
                instance.contactSort = Decoders.decodeOptional(clazz: ININContactSort.self, source: sourceDictionary["contactSort"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCampaignDiagnostics]
            Decoders.addDecoder(clazz: [ININCampaignDiagnostics].self) { (source: AnyObject) -> [ININCampaignDiagnostics] in
                return Decoders.decode(clazz: [ININCampaignDiagnostics].self, source: source)
            }
            // Decoder for ININCampaignDiagnostics
            Decoders.addDecoder(clazz: ININCampaignDiagnostics.self) { (source: AnyObject) -> ININCampaignDiagnostics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignDiagnostics()
                instance.callableContacts = Decoders.decodeOptional(clazz: ININCallableContactsDiagnostic.self, source: sourceDictionary["callableContacts"])
                instance.queueUtilizationDiagnostic = Decoders.decodeOptional(clazz: ININQueueUtilizationDiagnostic.self, source: sourceDictionary["queueUtilizationDiagnostic"])
                instance.outstandingInteractionsCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outstandingInteractionsCount"])
                return instance
            }


            // Decoder for [ININCampaignEntityListing]
            Decoders.addDecoder(clazz: [ININCampaignEntityListing].self) { (source: AnyObject) -> [ININCampaignEntityListing] in
                return Decoders.decode(clazz: [ININCampaignEntityListing].self, source: source)
            }
            // Decoder for ININCampaignEntityListing
            Decoders.addDecoder(clazz: ININCampaignEntityListing.self) { (source: AnyObject) -> ININCampaignEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCampaignProgress]
            Decoders.addDecoder(clazz: [ININCampaignProgress].self) { (source: AnyObject) -> [ININCampaignProgress] in
                return Decoders.decode(clazz: [ININCampaignProgress].self, source: source)
            }
            // Decoder for ININCampaignProgress
            Decoders.addDecoder(clazz: ININCampaignProgress.self) { (source: AnyObject) -> ININCampaignProgress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignProgress()
                instance.campaign = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["campaign"])
                instance.contactList = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["contactList"])
                instance.numberOfContactsCalled = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["numberOfContactsCalled"])
                instance.totalNumberOfContacts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalNumberOfContacts"])
                instance.percentage = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["percentage"])
                return instance
            }


            // Decoder for [ININCampaignSchedule]
            Decoders.addDecoder(clazz: [ININCampaignSchedule].self) { (source: AnyObject) -> [ININCampaignSchedule] in
                return Decoders.decode(clazz: [ININCampaignSchedule].self, source: source)
            }
            // Decoder for ININCampaignSchedule
            Decoders.addDecoder(clazz: ININCampaignSchedule.self) { (source: AnyObject) -> ININCampaignSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignSchedule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.intervals = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["intervals"])
                instance.timeZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZone"])
                instance.campaign = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["campaign"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCampaignSequence]
            Decoders.addDecoder(clazz: [ININCampaignSequence].self) { (source: AnyObject) -> [ININCampaignSequence] in
                return Decoders.decode(clazz: [ININCampaignSequence].self, source: source)
            }
            // Decoder for ININCampaignSequence
            Decoders.addDecoder(clazz: ININCampaignSequence.self) { (source: AnyObject) -> ININCampaignSequence in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignSequence()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.campaigns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["campaigns"])
                instance.currentCampaign = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["currentCampaign"])
                instance.status = ININCampaignSequence.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.stopMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopMessage"])
                instance._repeat = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["repeat"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCampaignSequenceEntityListing]
            Decoders.addDecoder(clazz: [ININCampaignSequenceEntityListing].self) { (source: AnyObject) -> [ININCampaignSequenceEntityListing] in
                return Decoders.decode(clazz: [ININCampaignSequenceEntityListing].self, source: source)
            }
            // Decoder for ININCampaignSequenceEntityListing
            Decoders.addDecoder(clazz: ININCampaignSequenceEntityListing.self) { (source: AnyObject) -> ININCampaignSequenceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignSequenceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCampaignStats]
            Decoders.addDecoder(clazz: [ININCampaignStats].self) { (source: AnyObject) -> [ININCampaignStats] in
                return Decoders.decode(clazz: [ININCampaignStats].self, source: source)
            }
            // Decoder for ININCampaignStats
            Decoders.addDecoder(clazz: ININCampaignStats.self) { (source: AnyObject) -> ININCampaignStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignStats()
                instance.contactRate = Decoders.decodeOptional(clazz: ININConnectRate.self, source: sourceDictionary["contactRate"])
                instance.idleAgents = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["idleAgents"])
                instance.adjustedCallsPerAgent = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["adjustedCallsPerAgent"])
                instance.outstandingCalls = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outstandingCalls"])
                return instance
            }


            // Decoder for [ININCampaignTimeSlot]
            Decoders.addDecoder(clazz: [ININCampaignTimeSlot].self) { (source: AnyObject) -> [ININCampaignTimeSlot] in
                return Decoders.decode(clazz: [ININCampaignTimeSlot].self, source: source)
            }
            // Decoder for ININCampaignTimeSlot
            Decoders.addDecoder(clazz: ININCampaignTimeSlot.self) { (source: AnyObject) -> ININCampaignTimeSlot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCampaignTimeSlot()
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.stopTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopTime"])
                instance.day = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["day"])
                return instance
            }


            // Decoder for [ININCarrier]
            Decoders.addDecoder(clazz: [ININCarrier].self) { (source: AnyObject) -> [ININCarrier] in
                return Decoders.decode(clazz: [ININCarrier].self, source: source)
            }
            // Decoder for ININCarrier
            Decoders.addDecoder(clazz: ININCarrier.self) { (source: AnyObject) -> ININCarrier in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCarrier()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.accountManager = Decoders.decodeOptional(clazz: ININAccountManager.self, source: sourceDictionary["accountManager"])
                instance.support = Decoders.decodeOptional(clazz: ININSupport.self, source: sourceDictionary["support"])
                instance.nocSupport = Decoders.decodeOptional(clazz: ININNocSupport.self, source: sourceDictionary["nocSupport"])
                instance.services = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["services"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.address = Decoders.decodeOptional(clazz: ININCarrierAddress.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [ININCarrierAddress]
            Decoders.addDecoder(clazz: [ININCarrierAddress].self) { (source: AnyObject) -> [ININCarrierAddress] in
                return Decoders.decode(clazz: [ININCarrierAddress].self, source: source)
            }
            // Decoder for ININCarrierAddress
            Decoders.addDecoder(clazz: ININCarrierAddress.self) { (source: AnyObject) -> ININCarrierAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCarrierAddress()
                instance.streetAddress1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["streetAddress1"])
                instance.streetAddress2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["streetAddress2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                return instance
            }


            // Decoder for [ININCarrierEntityListing]
            Decoders.addDecoder(clazz: [ININCarrierEntityListing].self) { (source: AnyObject) -> [ININCarrierEntityListing] in
                return Decoders.decode(clazz: [ININCarrierEntityListing].self, source: source)
            }
            // Decoder for ININCarrierEntityListing
            Decoders.addDecoder(clazz: ININCarrierEntityListing.self) { (source: AnyObject) -> ININCarrierEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCarrierEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCertificate]
            Decoders.addDecoder(clazz: [ININCertificate].self) { (source: AnyObject) -> [ININCertificate] in
                return Decoders.decode(clazz: [ININCertificate].self, source: source)
            }
            // Decoder for ININCertificate
            Decoders.addDecoder(clazz: ININCertificate.self) { (source: AnyObject) -> ININCertificate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCertificate()
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                return instance
            }


            // Decoder for [ININCertificateAuthorityEntityListing]
            Decoders.addDecoder(clazz: [ININCertificateAuthorityEntityListing].self) { (source: AnyObject) -> [ININCertificateAuthorityEntityListing] in
                return Decoders.decode(clazz: [ININCertificateAuthorityEntityListing].self, source: source)
            }
            // Decoder for ININCertificateAuthorityEntityListing
            Decoders.addDecoder(clazz: ININCertificateAuthorityEntityListing.self) { (source: AnyObject) -> ININCertificateAuthorityEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCertificateAuthorityEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCertificateDetails]
            Decoders.addDecoder(clazz: [ININCertificateDetails].self) { (source: AnyObject) -> [ININCertificateDetails] in
                return Decoders.decode(clazz: [ININCertificateDetails].self, source: source)
            }
            // Decoder for ININCertificateDetails
            Decoders.addDecoder(clazz: ININCertificateDetails.self) { (source: AnyObject) -> ININCertificateDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCertificateDetails()
                instance.issuer = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuer"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expirationDate"])
                instance.issueDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["issueDate"])
                instance.expired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["expired"])
                instance.signatureValid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["signatureValid"])
                instance.valid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["valid"])
                return instance
            }


            // Decoder for [ININChange]
            Decoders.addDecoder(clazz: [ININChange].self) { (source: AnyObject) -> [ININChange] in
                return Decoders.decode(clazz: [ININChange].self, source: source)
            }
            // Decoder for ININChange
            Decoders.addDecoder(clazz: ININChange.self) { (source: AnyObject) -> ININChange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChange()
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntity.self, source: sourceDictionary["entity"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.oldValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["oldValues"])
                instance.newValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["newValues"])
                return instance
            }


            // Decoder for [ININChannel]
            Decoders.addDecoder(clazz: [ININChannel].self) { (source: AnyObject) -> [ININChannel] in
                return Decoders.decode(clazz: [ININChannel].self, source: source)
            }
            // Decoder for ININChannel
            Decoders.addDecoder(clazz: ININChannel.self) { (source: AnyObject) -> ININChannel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChannel()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.connectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectUri"])
                return instance
            }


            // Decoder for [ININChannelEntityListing]
            Decoders.addDecoder(clazz: [ININChannelEntityListing].self) { (source: AnyObject) -> [ININChannelEntityListing] in
                return Decoders.decode(clazz: [ININChannelEntityListing].self, source: source)
            }
            // Decoder for ININChannelEntityListing
            Decoders.addDecoder(clazz: ININChannelEntityListing.self) { (source: AnyObject) -> ININChannelEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChannelEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININChannelTopic]
            Decoders.addDecoder(clazz: [ININChannelTopic].self) { (source: AnyObject) -> [ININChannelTopic] in
                return Decoders.decode(clazz: [ININChannelTopic].self, source: source)
            }
            // Decoder for ININChannelTopic
            Decoders.addDecoder(clazz: ININChannelTopic.self) { (source: AnyObject) -> ININChannelTopic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChannelTopic()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININChannelTopicEntityListing]
            Decoders.addDecoder(clazz: [ININChannelTopicEntityListing].self) { (source: AnyObject) -> [ININChannelTopicEntityListing] in
                return Decoders.decode(clazz: [ININChannelTopicEntityListing].self, source: source)
            }
            // Decoder for ININChannelTopicEntityListing
            Decoders.addDecoder(clazz: ININChannelTopicEntityListing.self) { (source: AnyObject) -> ININChannelTopicEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChannelTopicEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININCharge]
            Decoders.addDecoder(clazz: [ININCharge].self) { (source: AnyObject) -> [ININCharge] in
                return Decoders.decode(clazz: [ININCharge].self, source: source)
            }
            // Decoder for ININCharge
            Decoders.addDecoder(clazz: ININCharge.self) { (source: AnyObject) -> ININCharge in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCharge()
                instance.licenseCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["licenseCount"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.unitOfMeasure = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitOfMeasure"])
                instance.billingPeriod = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingPeriod"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                instance.includedUnits = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["includedUnits"])
                return instance
            }


            // Decoder for [ININChat]
            Decoders.addDecoder(clazz: [ININChat].self) { (source: AnyObject) -> [ININChat] in
                return Decoders.decode(clazz: [ININChat].self, source: source)
            }
            // Decoder for ININChat
            Decoders.addDecoder(clazz: ININChat.self) { (source: AnyObject) -> ININChat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChat()
                instance.jabberId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jabberId"])
                return instance
            }


            // Decoder for [ININChatConversation]
            Decoders.addDecoder(clazz: [ININChatConversation].self) { (source: AnyObject) -> [ININChatConversation] in
                return Decoders.decode(clazz: [ININChatConversation].self, source: source)
            }
            // Decoder for ININChatConversation
            Decoders.addDecoder(clazz: ININChatConversation.self) { (source: AnyObject) -> ININChatConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININChatConversationEntityListing]
            Decoders.addDecoder(clazz: [ININChatConversationEntityListing].self) { (source: AnyObject) -> [ININChatConversationEntityListing] in
                return Decoders.decode(clazz: [ININChatConversationEntityListing].self, source: source)
            }
            // Decoder for ININChatConversationEntityListing
            Decoders.addDecoder(clazz: ININChatConversationEntityListing.self) { (source: AnyObject) -> ININChatConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININChatMediaParticipant]
            Decoders.addDecoder(clazz: [ININChatMediaParticipant].self) { (source: AnyObject) -> [ININChatMediaParticipant] in
                return Decoders.decode(clazz: [ININChatMediaParticipant].self, source: source)
            }
            // Decoder for ININChatMediaParticipant
            Decoders.addDecoder(clazz: ININChatMediaParticipant.self) { (source: AnyObject) -> ININChatMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININChatMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININChatMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININChatMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.roomId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roomId"])
                return instance
            }


            // Decoder for [ININChatMediaPolicy]
            Decoders.addDecoder(clazz: [ININChatMediaPolicy].self) { (source: AnyObject) -> [ININChatMediaPolicy] in
                return Decoders.decode(clazz: [ININChatMediaPolicy].self, source: source)
            }
            // Decoder for ININChatMediaPolicy
            Decoders.addDecoder(clazz: ININChatMediaPolicy.self) { (source: AnyObject) -> ININChatMediaPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatMediaPolicy()
                instance.actions = Decoders.decodeOptional(clazz: ININPolicyActions.self, source: sourceDictionary["actions"])
                instance.conditions = Decoders.decodeOptional(clazz: ININChatMediaPolicyConditions.self, source: sourceDictionary["conditions"])
                return instance
            }


            // Decoder for [ININChatMediaPolicyConditions]
            Decoders.addDecoder(clazz: [ININChatMediaPolicyConditions].self) { (source: AnyObject) -> [ININChatMediaPolicyConditions] in
                return Decoders.decode(clazz: [ININChatMediaPolicyConditions].self, source: source)
            }
            // Decoder for ININChatMediaPolicyConditions
            Decoders.addDecoder(clazz: ININChatMediaPolicyConditions.self) { (source: AnyObject) -> ININChatMediaPolicyConditions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatMediaPolicyConditions()
                instance.forUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forUsers"])
                instance.dateRanges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateRanges"])
                instance.forQueues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forQueues"])
                instance.wrapupCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wrapupCodes"])
                instance.timeAllowed = Decoders.decodeOptional(clazz: ININTimeAllowed.self, source: sourceDictionary["timeAllowed"])
                instance.duration = Decoders.decodeOptional(clazz: ININDurationCondition.self, source: sourceDictionary["duration"])
                return instance
            }


            // Decoder for [ININChatMessage]
            Decoders.addDecoder(clazz: [ININChatMessage].self) { (source: AnyObject) -> [ININChatMessage] in
                return Decoders.decode(clazz: [ININChatMessage].self, source: source)
            }
            // Decoder for ININChatMessage
            Decoders.addDecoder(clazz: ININChatMessage.self) { (source: AnyObject) -> ININChatMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatMessage()
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.to = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"])
                instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"])
                instance.utc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["utc"])
                instance.chat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chat"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.user = Decoders.decodeOptional(clazz: ININChatMessageUser.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [ININChatMessageUser]
            Decoders.addDecoder(clazz: [ININChatMessageUser].self) { (source: AnyObject) -> [ININChatMessageUser] in
                return Decoders.decode(clazz: [ININChatMessageUser].self, source: source)
            }
            // Decoder for ININChatMessageUser
            Decoders.addDecoder(clazz: ININChatMessageUser.self) { (source: AnyObject) -> ININChatMessageUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININChatMessageUser()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                return instance
            }


            // Decoder for [ININClientSpreadsheetTransform]
            Decoders.addDecoder(clazz: [ININClientSpreadsheetTransform].self) { (source: AnyObject) -> [ININClientSpreadsheetTransform] in
                return Decoders.decode(clazz: [ININClientSpreadsheetTransform].self, source: source)
            }
            // Decoder for ININClientSpreadsheetTransform
            Decoders.addDecoder(clazz: ININClientSpreadsheetTransform.self) { (source: AnyObject) -> ININClientSpreadsheetTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININClientSpreadsheetTransform()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.endpointId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endpointId"])
                instance.filenameReplaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filenameReplaces"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sheetNameReplaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sheetNameReplaces"])
                instance.sheets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sheets"])
                return instance
            }


            // Decoder for [ININClientTextTableTransform]
            Decoders.addDecoder(clazz: [ININClientTextTableTransform].self) { (source: AnyObject) -> [ININClientTextTableTransform] in
                return Decoders.decode(clazz: [ININClientTextTableTransform].self, source: source)
            }
            // Decoder for ININClientTextTableTransform
            Decoders.addDecoder(clazz: ININClientTextTableTransform.self) { (source: AnyObject) -> ININClientTextTableTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININClientTextTableTransform()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.endpointId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endpointId"])
                instance.filenameReplaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filenameReplaces"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.comments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comments"])
                instance.delimiter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["delimiter"])
                instance.table = Decoders.decodeOptional(clazz: ININTableTransform.self, source: sourceDictionary["table"])
                return instance
            }


            // Decoder for [ININCodesRequest]
            Decoders.addDecoder(clazz: [ININCodesRequest].self) { (source: AnyObject) -> [ININCodesRequest] in
                return Decoders.decode(clazz: [ININCodesRequest].self, source: source)
            }
            // Decoder for ININCodesRequest
            Decoders.addDecoder(clazz: ININCodesRequest.self) { (source: AnyObject) -> ININCodesRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCodesRequest()
                instance.organizationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organizationId"])
                instance.addCommunicationCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addCommunicationCode"])
                return instance
            }


            // Decoder for [ININColumnCollapse]
            Decoders.addDecoder(clazz: [ININColumnCollapse].self) { (source: AnyObject) -> [ININColumnCollapse] in
                return Decoders.decode(clazz: [ININColumnCollapse].self, source: source)
            }
            // Decoder for ININColumnCollapse
            Decoders.addDecoder(clazz: ININColumnCollapse.self) { (source: AnyObject) -> ININColumnCollapse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININColumnCollapse()
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                return instance
            }


            // Decoder for [ININCommandStatus]
            Decoders.addDecoder(clazz: [ININCommandStatus].self) { (source: AnyObject) -> [ININCommandStatus] in
                return Decoders.decode(clazz: [ININCommandStatus].self, source: source)
            }
            // Decoder for ININCommandStatus
            Decoders.addDecoder(clazz: ININCommandStatus.self) { (source: AnyObject) -> ININCommandStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCommandStatus()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.expiration = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expiration"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.statusCode = ININCommandStatus.ININStatusCode(rawValue: (sourceDictionary["statusCode"] as? String) ?? "") 
                instance.commandType = ININCommandStatus.ININCommandType(rawValue: (sourceDictionary["commandType"] as? String) ?? "") 
                instance.document = Decoders.decodeOptional(clazz: ININDocument.self, source: sourceDictionary["document"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCommandStatusEntityListing]
            Decoders.addDecoder(clazz: [ININCommandStatusEntityListing].self) { (source: AnyObject) -> [ININCommandStatusEntityListing] in
                return Decoders.decode(clazz: [ININCommandStatusEntityListing].self, source: source)
            }
            // Decoder for ININCommandStatusEntityListing
            Decoders.addDecoder(clazz: ININCommandStatusEntityListing.self) { (source: AnyObject) -> ININCommandStatusEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCommandStatusEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININComposerTemplate]
            Decoders.addDecoder(clazz: [ININComposerTemplate].self) { (source: AnyObject) -> [ININComposerTemplate] in
                return Decoders.decode(clazz: [ININComposerTemplate].self, source: source)
            }
            // Decoder for ININComposerTemplate
            Decoders.addDecoder(clazz: ININComposerTemplate.self) { (source: AnyObject) -> ININComposerTemplate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININComposerTemplate()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.level = ININComposerTemplate.ININLevel(rawValue: (sourceDictionary["level"] as? String) ?? "") 
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCondition]
            Decoders.addDecoder(clazz: [ININCondition].self) { (source: AnyObject) -> [ININCondition] in
                return Decoders.decode(clazz: [ININCondition].self, source: source)
            }
            // Decoder for ININCondition
            Decoders.addDecoder(clazz: ININCondition.self) { (source: AnyObject) -> ININCondition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCondition()
                instance.type = ININCondition.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.inverted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inverted"])
                instance.attributeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attributeName"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.valueType = ININCondition.ININValueType(rawValue: (sourceDictionary["valueType"] as? String) ?? "") 
                instance._operator = ININCondition.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.codes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codes"])
                return instance
            }


            // Decoder for [ININConnectRate]
            Decoders.addDecoder(clazz: [ININConnectRate].self) { (source: AnyObject) -> [ININConnectRate] in
                return Decoders.decode(clazz: [ININConnectRate].self, source: source)
            }
            // Decoder for ININConnectRate
            Decoders.addDecoder(clazz: ININConnectRate.self) { (source: AnyObject) -> ININConnectRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConnectRate()
                instance.attempts = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["attempts"])
                instance.connects = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["connects"])
                instance.connectRatio = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["connectRatio"])
                return instance
            }


            // Decoder for [ININConsultTransfer]
            Decoders.addDecoder(clazz: [ININConsultTransfer].self) { (source: AnyObject) -> [ININConsultTransfer] in
                return Decoders.decode(clazz: [ININConsultTransfer].self, source: source)
            }
            // Decoder for ININConsultTransfer
            Decoders.addDecoder(clazz: ININConsultTransfer.self) { (source: AnyObject) -> ININConsultTransfer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConsultTransfer()
                instance.speakTo = ININConsultTransfer.ININSpeakTo(rawValue: (sourceDictionary["speakTo"] as? String) ?? "") 
                instance.destination = Decoders.decodeOptional(clazz: ININDestination.self, source: sourceDictionary["destination"])
                return instance
            }


            // Decoder for [ININConsultTransferResponse]
            Decoders.addDecoder(clazz: [ININConsultTransferResponse].self) { (source: AnyObject) -> [ININConsultTransferResponse] in
                return Decoders.decode(clazz: [ININConsultTransferResponse].self, source: source)
            }
            // Decoder for ININConsultTransferResponse
            Decoders.addDecoder(clazz: ININConsultTransferResponse.self) { (source: AnyObject) -> ININConsultTransferResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConsultTransferResponse()
                instance.destinationParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationParticipantId"])
                return instance
            }


            // Decoder for [ININConsultTransferUpdate]
            Decoders.addDecoder(clazz: [ININConsultTransferUpdate].self) { (source: AnyObject) -> [ININConsultTransferUpdate] in
                return Decoders.decode(clazz: [ININConsultTransferUpdate].self, source: source)
            }
            // Decoder for ININConsultTransferUpdate
            Decoders.addDecoder(clazz: ININConsultTransferUpdate.self) { (source: AnyObject) -> ININConsultTransferUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConsultTransferUpdate()
                instance.speakTo = ININConsultTransferUpdate.ININSpeakTo(rawValue: (sourceDictionary["speakTo"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININConsumedResourcesEntityListing]
            Decoders.addDecoder(clazz: [ININConsumedResourcesEntityListing].self) { (source: AnyObject) -> [ININConsumedResourcesEntityListing] in
                return Decoders.decode(clazz: [ININConsumedResourcesEntityListing].self, source: source)
            }
            // Decoder for ININConsumedResourcesEntityListing
            Decoders.addDecoder(clazz: ININConsumedResourcesEntityListing.self) { (source: AnyObject) -> ININConsumedResourcesEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConsumedResourcesEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININConsumingResourcesEntityListing]
            Decoders.addDecoder(clazz: [ININConsumingResourcesEntityListing].self) { (source: AnyObject) -> [ININConsumingResourcesEntityListing] in
                return Decoders.decode(clazz: [ININConsumingResourcesEntityListing].self, source: source)
            }
            // Decoder for ININConsumingResourcesEntityListing
            Decoders.addDecoder(clazz: ININConsumingResourcesEntityListing.self) { (source: AnyObject) -> ININConsumingResourcesEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConsumingResourcesEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININContact]
            Decoders.addDecoder(clazz: [ININContact].self) { (source: AnyObject) -> [ININContact] in
                return Decoders.decode(clazz: [ININContact].self, source: source)
            }
            // Decoder for ININContact
            Decoders.addDecoder(clazz: ININContact.self) { (source: AnyObject) -> ININContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContact()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.display = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"])
                instance.mediaType = ININContact.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                instance.type = ININContact.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININContactAddress]
            Decoders.addDecoder(clazz: [ININContactAddress].self) { (source: AnyObject) -> [ININContactAddress] in
                return Decoders.decode(clazz: [ININContactAddress].self, source: source)
            }
            // Decoder for ININContactAddress
            Decoders.addDecoder(clazz: ININContactAddress.self) { (source: AnyObject) -> ININContactAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactAddress()
                instance.address1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address1"])
                instance.address2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address2"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postalCode"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                return instance
            }


            // Decoder for [ININContactCallbackRequest]
            Decoders.addDecoder(clazz: [ININContactCallbackRequest].self) { (source: AnyObject) -> [ININContactCallbackRequest] in
                return Decoders.decode(clazz: [ININContactCallbackRequest].self, source: source)
            }
            // Decoder for ININContactCallbackRequest
            Decoders.addDecoder(clazz: ININContactCallbackRequest.self) { (source: AnyObject) -> ININContactCallbackRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactCallbackRequest()
                instance.campaignId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["campaignId"])
                instance.contactListId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactListId"])
                instance.contactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactId"])
                instance.phoneColumn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneColumn"])
                instance.schedule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schedule"])
                return instance
            }


            // Decoder for [ININContactList]
            Decoders.addDecoder(clazz: [ININContactList].self) { (source: AnyObject) -> [ININContactList] in
                return Decoders.decode(clazz: [ININContactList].self, source: source)
            }
            // Decoder for ININContactList
            Decoders.addDecoder(clazz: ININContactList.self) { (source: AnyObject) -> ININContactList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactList()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.columnNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columnNames"])
                instance.phoneColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneColumns"])
                instance.importStatus = Decoders.decodeOptional(clazz: ININImportStatus.self, source: sourceDictionary["importStatus"])
                instance.previewModeColumnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previewModeColumnName"])
                instance.previewModeAcceptedValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["previewModeAcceptedValues"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININContactListEntityListing]
            Decoders.addDecoder(clazz: [ININContactListEntityListing].self) { (source: AnyObject) -> [ININContactListEntityListing] in
                return Decoders.decode(clazz: [ININContactListEntityListing].self, source: source)
            }
            // Decoder for ININContactListEntityListing
            Decoders.addDecoder(clazz: ININContactListEntityListing.self) { (source: AnyObject) -> ININContactListEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactListEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININContactListing]
            Decoders.addDecoder(clazz: [ININContactListing].self) { (source: AnyObject) -> [ININContactListing] in
                return Decoders.decode(clazz: [ININContactListing].self, source: source)
            }
            // Decoder for ININContactListing
            Decoders.addDecoder(clazz: ININContactListing.self) { (source: AnyObject) -> ININContactListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININContactPhoneNumberColumn]
            Decoders.addDecoder(clazz: [ININContactPhoneNumberColumn].self) { (source: AnyObject) -> [ININContactPhoneNumberColumn] in
                return Decoders.decode(clazz: [ININContactPhoneNumberColumn].self, source: source)
            }
            // Decoder for ININContactPhoneNumberColumn
            Decoders.addDecoder(clazz: ININContactPhoneNumberColumn.self) { (source: AnyObject) -> ININContactPhoneNumberColumn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactPhoneNumberColumn()
                instance.columnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["columnName"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.callableTimeColumn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callableTimeColumn"])
                return instance
            }


            // Decoder for [ININContactSales]
            Decoders.addDecoder(clazz: [ININContactSales].self) { (source: AnyObject) -> [ININContactSales] in
                return Decoders.decode(clazz: [ININContactSales].self, source: source)
            }
            // Decoder for ININContactSales
            Decoders.addDecoder(clazz: ININContactSales.self) { (source: AnyObject) -> ININContactSales in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactSales()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.contactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactPhone"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                instance.productName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productName"])
                instance.quoteId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quoteId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININContactSalesResponse]
            Decoders.addDecoder(clazz: [ININContactSalesResponse].self) { (source: AnyObject) -> [ININContactSalesResponse] in
                return Decoders.decode(clazz: [ININContactSalesResponse].self, source: source)
            }
            // Decoder for ININContactSalesResponse
            Decoders.addDecoder(clazz: ININContactSalesResponse.self) { (source: AnyObject) -> ININContactSalesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactSalesResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.emailBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailBody"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININContactSort]
            Decoders.addDecoder(clazz: [ININContactSort].self) { (source: AnyObject) -> [ININContactSort] in
                return Decoders.decode(clazz: [ININContactSort].self, source: source)
            }
            // Decoder for ININContactSort
            Decoders.addDecoder(clazz: ININContactSort.self) { (source: AnyObject) -> ININContactSort in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContactSort()
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance.direction = ININContactSort.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.numeric = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["numeric"])
                return instance
            }


            // Decoder for [ININContentAttributeFilterItem]
            Decoders.addDecoder(clazz: [ININContentAttributeFilterItem].self) { (source: AnyObject) -> [ININContentAttributeFilterItem] in
                return Decoders.decode(clazz: [ININContentAttributeFilterItem].self, source: source)
            }
            // Decoder for ININContentAttributeFilterItem
            Decoders.addDecoder(clazz: ININContentAttributeFilterItem.self) { (source: AnyObject) -> ININContentAttributeFilterItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContentAttributeFilterItem()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._operator = ININContentAttributeFilterItem.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININContentFacetFilterItem]
            Decoders.addDecoder(clazz: [ININContentFacetFilterItem].self) { (source: AnyObject) -> [ININContentFacetFilterItem] in
                return Decoders.decode(clazz: [ININContentFacetFilterItem].self, source: source)
            }
            // Decoder for ININContentFacetFilterItem
            Decoders.addDecoder(clazz: ININContentFacetFilterItem.self) { (source: AnyObject) -> ININContentFacetFilterItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContentFacetFilterItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININContentFacetFilterItem.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance._operator = ININContentFacetFilterItem.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININContentFilterItem]
            Decoders.addDecoder(clazz: [ININContentFilterItem].self) { (source: AnyObject) -> [ININContentFilterItem] in
                return Decoders.decode(clazz: [ININContentFilterItem].self, source: source)
            }
            // Decoder for ININContentFilterItem
            Decoders.addDecoder(clazz: ININContentFilterItem.self) { (source: AnyObject) -> ININContentFilterItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContentFilterItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININContentFilterItem.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance._operator = ININContentFilterItem.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININContentQueryRequest]
            Decoders.addDecoder(clazz: [ININContentQueryRequest].self) { (source: AnyObject) -> [ININContentQueryRequest] in
                return Decoders.decode(clazz: [ININContentQueryRequest].self, source: source)
            }
            // Decoder for ININContentQueryRequest
            Decoders.addDecoder(clazz: ININContentQueryRequest.self) { (source: AnyObject) -> ININContentQueryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContentQueryRequest()
                instance.queryPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queryPhrase"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.facetNameRequests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetNameRequests"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                instance.attributeFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attributeFilters"])
                instance.includeShares = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["includeShares"])
                return instance
            }


            // Decoder for [ININContentSortItem]
            Decoders.addDecoder(clazz: [ININContentSortItem].self) { (source: AnyObject) -> [ININContentSortItem] in
                return Decoders.decode(clazz: [ININContentSortItem].self, source: source)
            }
            // Decoder for ININContentSortItem
            Decoders.addDecoder(clazz: ININContentSortItem.self) { (source: AnyObject) -> ININContentSortItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContentSortItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ascending = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ascending"])
                return instance
            }


            // Decoder for [ININContract]
            Decoders.addDecoder(clazz: [ININContract].self) { (source: AnyObject) -> [ININContract] in
                return Decoders.decode(clazz: [ININContract].self, source: source)
            }
            // Decoder for ININContract
            Decoders.addDecoder(clazz: ININContract.self) { (source: AnyObject) -> ININContract in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContract()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.quote = Decoders.decodeOptional(clazz: ININQuote.self, source: sourceDictionary["quote"])
                instance.signerUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["signerUrl"])
                instance.job = Decoders.decodeOptional(clazz: ININContractJob.self, source: sourceDictionary["job"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININContractJob]
            Decoders.addDecoder(clazz: [ININContractJob].self) { (source: AnyObject) -> [ININContractJob] in
                return Decoders.decode(clazz: [ININContractJob].self, source: source)
            }
            // Decoder for ININContractJob
            Decoders.addDecoder(clazz: ININContractJob.self) { (source: AnyObject) -> ININContractJob in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININContractJob()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.contract = Decoders.decodeOptional(clazz: ININContract.self, source: sourceDictionary["contract"])
                instance.status = ININContractJob.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININControl]
            Decoders.addDecoder(clazz: [ININControl].self) { (source: AnyObject) -> [ININControl] in
                return Decoders.decode(clazz: [ININControl].self, source: source)
            }
            // Decoder for ININControl
            Decoders.addDecoder(clazz: ININControl.self) { (source: AnyObject) -> ININControl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININControl()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"])
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"])
                instance.readOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["readOnly"])
                instance.variableBindingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableBindingId"])
                instance.type = ININControl.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININControlOptions]
            Decoders.addDecoder(clazz: [ININControlOptions].self) { (source: AnyObject) -> [ININControlOptions] in
                return Decoders.decode(clazz: [ININControlOptions].self, source: source)
            }
            // Decoder for ININControlOptions
            Decoders.addDecoder(clazz: ININControlOptions.self) { (source: AnyObject) -> ININControlOptions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININControlOptions()
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                return instance
            }


            // Decoder for [ININConversation]
            Decoders.addDecoder(clazz: [ININConversation].self) { (source: AnyObject) -> [ININConversation] in
                return Decoders.decode(clazz: [ININConversation].self, source: source)
            }
            // Decoder for ININConversation
            Decoders.addDecoder(clazz: ININConversation.self) { (source: AnyObject) -> ININConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.conversationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversationIds"])
                instance.maxParticipants = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxParticipants"])
                instance.recordingState = ININConversation.ININRecordingState(rawValue: (sourceDictionary["recordingState"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININConversationAssociation]
            Decoders.addDecoder(clazz: [ININConversationAssociation].self) { (source: AnyObject) -> [ININConversationAssociation] in
                return Decoders.decode(clazz: [ININConversationAssociation].self, source: source)
            }
            // Decoder for ININConversationAssociation
            Decoders.addDecoder(clazz: ININConversationAssociation.self) { (source: AnyObject) -> ININConversationAssociation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConversationAssociation()
                instance.conversationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["conversationId"])
                instance.communicationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["communicationId"])
                instance.mediaType = ININConversationAssociation.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININConversationChat]
            Decoders.addDecoder(clazz: [ININConversationChat].self) { (source: AnyObject) -> [ININConversationChat] in
                return Decoders.decode(clazz: [ININConversationChat].self, source: source)
            }
            // Decoder for ININConversationChat
            Decoders.addDecoder(clazz: ININConversationChat.self) { (source: AnyObject) -> ININConversationChat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConversationChat()
                instance.state = ININConversationChat.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.roomId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roomId"])
                instance.recordingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recordingId"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.direction = ININConversationChat.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININConversationChat.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                return instance
            }


            // Decoder for [ININConversationEntityListing]
            Decoders.addDecoder(clazz: [ININConversationEntityListing].self) { (source: AnyObject) -> [ININConversationEntityListing] in
                return Decoders.decode(clazz: [ININConversationEntityListing].self, source: source)
            }
            // Decoder for ININConversationEntityListing
            Decoders.addDecoder(clazz: ININConversationEntityListing.self) { (source: AnyObject) -> ININConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININConversationQuery]
            Decoders.addDecoder(clazz: [ININConversationQuery].self) { (source: AnyObject) -> [ININConversationQuery] in
                return Decoders.decode(clazz: [ININConversationQuery].self, source: source)
            }
            // Decoder for ININConversationQuery
            Decoders.addDecoder(clazz: ININConversationQuery.self) { (source: AnyObject) -> ININConversationQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININConversationQuery()
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.conversationFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversationFilters"])
                instance.evaluationFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluationFilters"])
                instance.segmentFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segmentFilters"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                instance.paging = Decoders.decodeOptional(clazz: ININPagingSpec.self, source: sourceDictionary["paging"])
                instance.order = ININConversationQuery.ININOrder(rawValue: (sourceDictionary["order"] as? String) ?? "") 
                instance.orderBy = ININConversationQuery.ININOrderBy(rawValue: (sourceDictionary["orderBy"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININCoverSheet]
            Decoders.addDecoder(clazz: [ININCoverSheet].self) { (source: AnyObject) -> [ININCoverSheet] in
                return Decoders.decode(clazz: [ININCoverSheet].self, source: source)
            }
            // Decoder for ININCoverSheet
            Decoders.addDecoder(clazz: ININCoverSheet.self) { (source: AnyObject) -> ININCoverSheet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCoverSheet()
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                return instance
            }


            // Decoder for [ININCreateCallRequest]
            Decoders.addDecoder(clazz: [ININCreateCallRequest].self) { (source: AnyObject) -> [ININCreateCallRequest] in
                return Decoders.decode(clazz: [ININCreateCallRequest].self, source: source)
            }
            // Decoder for ININCreateCallRequest
            Decoders.addDecoder(clazz: ININCreateCallRequest.self) { (source: AnyObject) -> ININCreateCallRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateCallRequest()
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.callFromQueueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callFromQueueId"])
                instance.callQueueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callQueueId"])
                instance.callUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callUserId"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.languageId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["languageId"])
                instance.routingSkillsIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routingSkillsIds"])
                instance.conversationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversationIds"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                return instance
            }


            // Decoder for [ININCreateCallResponse]
            Decoders.addDecoder(clazz: [ININCreateCallResponse].self) { (source: AnyObject) -> [ININCreateCallResponse] in
                return Decoders.decode(clazz: [ININCreateCallResponse].self, source: source)
            }
            // Decoder for ININCreateCallResponse
            Decoders.addDecoder(clazz: ININCreateCallResponse.self) { (source: AnyObject) -> ININCreateCallResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateCallResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCreateCallbackCommand]
            Decoders.addDecoder(clazz: [ININCreateCallbackCommand].self) { (source: AnyObject) -> [ININCreateCallbackCommand] in
                return Decoders.decode(clazz: [ININCreateCallbackCommand].self, source: source)
            }
            // Decoder for ININCreateCallbackCommand
            Decoders.addDecoder(clazz: ININCreateCallbackCommand.self) { (source: AnyObject) -> ININCreateCallbackCommand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateCallbackCommand()
                instance.scriptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scriptId"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.routingData = Decoders.decodeOptional(clazz: ININRoutingData.self, source: sourceDictionary["routingData"])
                instance.callbackUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callbackUserName"])
                instance.callbackNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbackNumbers"])
                instance.callbackScheduledTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["callbackScheduledTime"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.isAutomated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isAutomated"])
                instance.automatedCallbackConfigId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["automatedCallbackConfigId"])
                instance.additionalInfo = Decoders.decodeOptional(clazz: ININAdditionalInfo.self, source: sourceDictionary["additionalInfo"])
                return instance
            }


            // Decoder for [ININCreateCallbackResponse]
            Decoders.addDecoder(clazz: [ININCreateCallbackResponse].self) { (source: AnyObject) -> [ININCreateCallbackResponse] in
                return Decoders.decode(clazz: [ININCreateCallbackResponse].self, source: source)
            }
            // Decoder for ININCreateCallbackResponse
            Decoders.addDecoder(clazz: ININCreateCallbackResponse.self) { (source: AnyObject) -> ININCreateCallbackResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateCallbackResponse()
                instance.conversation = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["conversation"])
                instance.callbackIdentifiers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbackIdentifiers"])
                return instance
            }


            // Decoder for [ININCreateIntegrationRequest]
            Decoders.addDecoder(clazz: [ININCreateIntegrationRequest].self) { (source: AnyObject) -> [ININCreateIntegrationRequest] in
                return Decoders.decode(clazz: [ININCreateIntegrationRequest].self, source: source)
            }
            // Decoder for ININCreateIntegrationRequest
            Decoders.addDecoder(clazz: ININCreateIntegrationRequest.self) { (source: AnyObject) -> ININCreateIntegrationRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateIntegrationRequest()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.integrationType = Decoders.decodeOptional(clazz: ININIntegrationType.self, source: sourceDictionary["integrationType"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCreateShareRequest]
            Decoders.addDecoder(clazz: [ININCreateShareRequest].self) { (source: AnyObject) -> [ININCreateShareRequest] in
                return Decoders.decode(clazz: [ININCreateShareRequest].self, source: source)
            }
            // Decoder for ININCreateShareRequest
            Decoders.addDecoder(clazz: ININCreateShareRequest.self) { (source: AnyObject) -> ININCreateShareRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateShareRequest()
                instance.sharedEntityType = ININCreateShareRequest.ININSharedEntityType(rawValue: (sourceDictionary["sharedEntityType"] as? String) ?? "") 
                instance.sharedEntity = Decoders.decodeOptional(clazz: ININSharedEntity.self, source: sourceDictionary["sharedEntity"])
                instance.memberType = ININCreateShareRequest.ININMemberType(rawValue: (sourceDictionary["memberType"] as? String) ?? "") 
                instance.member = Decoders.decodeOptional(clazz: ININSharedEntity.self, source: sourceDictionary["member"])
                instance.members = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["members"])
                return instance
            }


            // Decoder for [ININCreateShareRequestMember]
            Decoders.addDecoder(clazz: [ININCreateShareRequestMember].self) { (source: AnyObject) -> [ININCreateShareRequestMember] in
                return Decoders.decode(clazz: [ININCreateShareRequestMember].self, source: source)
            }
            // Decoder for ININCreateShareRequestMember
            Decoders.addDecoder(clazz: ININCreateShareRequestMember.self) { (source: AnyObject) -> ININCreateShareRequestMember in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateShareRequestMember()
                instance.memberType = ININCreateShareRequestMember.ININMemberType(rawValue: (sourceDictionary["memberType"] as? String) ?? "") 
                instance.member = Decoders.decodeOptional(clazz: ININMemberEntity.self, source: sourceDictionary["member"])
                return instance
            }


            // Decoder for [ININCreateShareResponse]
            Decoders.addDecoder(clazz: [ININCreateShareResponse].self) { (source: AnyObject) -> [ININCreateShareResponse] in
                return Decoders.decode(clazz: [ININCreateShareResponse].self, source: source)
            }
            // Decoder for ININCreateShareResponse
            Decoders.addDecoder(clazz: ININCreateShareResponse.self) { (source: AnyObject) -> ININCreateShareResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateShareResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sharedEntityType = ININCreateShareResponse.ININSharedEntityType(rawValue: (sourceDictionary["sharedEntityType"] as? String) ?? "") 
                instance.sharedEntity = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["sharedEntity"])
                instance.memberType = ININCreateShareResponse.ININMemberType(rawValue: (sourceDictionary["memberType"] as? String) ?? "") 
                instance.member = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["member"])
                instance.sharedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["sharedBy"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.succeeded = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["succeeded"])
                instance.failed = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["failed"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCreateTemplateFromScriptRequestData]
            Decoders.addDecoder(clazz: [ININCreateTemplateFromScriptRequestData].self) { (source: AnyObject) -> [ININCreateTemplateFromScriptRequestData] in
                return Decoders.decode(clazz: [ININCreateTemplateFromScriptRequestData].self, source: source)
            }
            // Decoder for ININCreateTemplateFromScriptRequestData
            Decoders.addDecoder(clazz: ININCreateTemplateFromScriptRequestData.self) { (source: AnyObject) -> ININCreateTemplateFromScriptRequestData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateTemplateFromScriptRequestData()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.scriptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scriptId"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                return instance
            }


            // Decoder for [ININCreateUser]
            Decoders.addDecoder(clazz: [ININCreateUser].self) { (source: AnyObject) -> [ININCreateUser] in
                return Decoders.decode(clazz: [ININCreateUser].self, source: source)
            }
            // Decoder for ININCreateUser
            Decoders.addDecoder(clazz: ININCreateUser.self) { (source: AnyObject) -> ININCreateUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCreateUser()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                return instance
            }


            // Decoder for [ININCsvSchema]
            Decoders.addDecoder(clazz: [ININCsvSchema].self) { (source: AnyObject) -> [ININCsvSchema] in
                return Decoders.decode(clazz: [ININCsvSchema].self, source: source)
            }
            // Decoder for ININCsvSchema
            Decoders.addDecoder(clazz: ININCsvSchema.self) { (source: AnyObject) -> ININCsvSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCsvSchema()
                instance.carrierId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CarrierId"])
                instance.headerRow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HeaderRow"])
                instance.dataRow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["DataRow"])
                instance.headerMappings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["HeaderMappings"])
                instance.rateType = ININCsvSchema.ININRateType(rawValue: (sourceDictionary["RateType"] as? String) ?? "") 
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.dateFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DateFormat"])
                return instance
            }


            // Decoder for [ININCurrency]
            Decoders.addDecoder(clazz: [ININCurrency].self) { (source: AnyObject) -> [ININCurrency] in
                return Decoders.decode(clazz: [ININCurrency].self, source: source)
            }
            // Decoder for ININCurrency
            Decoders.addDecoder(clazz: ININCurrency.self) { (source: AnyObject) -> ININCurrency in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCurrency()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.decimalPlaces = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["decimalPlaces"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCustomerAccount]
            Decoders.addDecoder(clazz: [ININCustomerAccount].self) { (source: AnyObject) -> [ININCustomerAccount] in
                return Decoders.decode(clazz: [ININCustomerAccount].self, source: source)
            }
            // Decoder for ININCustomerAccount
            Decoders.addDecoder(clazz: ININCustomerAccount.self) { (source: AnyObject) -> ININCustomerAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCustomerAccount()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.isFrozen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isFrozen"])
                instance.orgLegalName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgLegalName"])
                instance.orgPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orgPhone"])
                instance.isTaxExempt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isTaxExempt"])
                instance.billingAddress = Decoders.decodeOptional(clazz: ININBillingAddress.self, source: sourceDictionary["billingAddress"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININCustomerInteractionCenter]
            Decoders.addDecoder(clazz: [ININCustomerInteractionCenter].self) { (source: AnyObject) -> [ININCustomerInteractionCenter] in
                return Decoders.decode(clazz: [ININCustomerInteractionCenter].self, source: source)
            }
            // Decoder for ININCustomerInteractionCenter
            Decoders.addDecoder(clazz: ININCustomerInteractionCenter.self) { (source: AnyObject) -> ININCustomerInteractionCenter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININCustomerInteractionCenter()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.issuerURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerURI"])
                instance.ssoTargetURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssoTargetURI"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDID]
            Decoders.addDecoder(clazz: [ININDID].self) { (source: AnyObject) -> [ININDID] in
                return Decoders.decode(clazz: [ININDID].self, source: source)
            }
            // Decoder for ININDID
            Decoders.addDecoder(clazz: ININDID.self) { (source: AnyObject) -> ININDID in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDID()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININDID.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.didPool = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["didPool"])
                instance.owner = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["owner"])
                instance.ownerType = ININDID.ININOwnerType(rawValue: (sourceDictionary["ownerType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDIDEntityListing]
            Decoders.addDecoder(clazz: [ININDIDEntityListing].self) { (source: AnyObject) -> [ININDIDEntityListing] in
                return Decoders.decode(clazz: [ININDIDEntityListing].self, source: source)
            }
            // Decoder for ININDIDEntityListing
            Decoders.addDecoder(clazz: ININDIDEntityListing.self) { (source: AnyObject) -> ININDIDEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDIDEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDIDPool]
            Decoders.addDecoder(clazz: [ININDIDPool].self) { (source: AnyObject) -> [ININDIDPool] in
                return Decoders.decode(clazz: [ININDIDPool].self, source: source)
            }
            // Decoder for ININDIDPool
            Decoders.addDecoder(clazz: ININDIDPool.self) { (source: AnyObject) -> ININDIDPool in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDIDPool()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININDIDPool.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.startPhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startPhoneNumber"])
                instance.endPhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endPhoneNumber"])
                instance.comments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comments"])
                instance.provider = ININDIDPool.ININProvider(rawValue: (sourceDictionary["provider"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDIDPoolEntityListing]
            Decoders.addDecoder(clazz: [ININDIDPoolEntityListing].self) { (source: AnyObject) -> [ININDIDPoolEntityListing] in
                return Decoders.decode(clazz: [ININDIDPoolEntityListing].self, source: source)
            }
            // Decoder for ININDIDPoolEntityListing
            Decoders.addDecoder(clazz: ININDIDPoolEntityListing.self) { (source: AnyObject) -> ININDIDPoolEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDIDPoolEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDataItem]
            Decoders.addDecoder(clazz: [ININDataItem].self) { (source: AnyObject) -> [ININDataItem] in
                return Decoders.decode(clazz: [ININDataItem].self, source: source)
            }
            // Decoder for ININDataItem
            Decoders.addDecoder(clazz: ININDataItem.self) { (source: AnyObject) -> ININDataItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDataItem()
                instance.dataItemId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataItemId"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ININDataValueInfo]
            Decoders.addDecoder(clazz: [ININDataValueInfo].self) { (source: AnyObject) -> [ININDataValueInfo] in
                return Decoders.decode(clazz: [ININDataValueInfo].self, source: source)
            }
            // Decoder for ININDataValueInfo
            Decoders.addDecoder(clazz: ININDataValueInfo.self) { (source: AnyObject) -> ININDataValueInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDataValueInfo()
                instance.dataItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dataItems"])
                return instance
            }


            // Decoder for [ININDefaultGreetingList]
            Decoders.addDecoder(clazz: [ININDefaultGreetingList].self) { (source: AnyObject) -> [ININDefaultGreetingList] in
                return Decoders.decode(clazz: [ININDefaultGreetingList].self, source: source)
            }
            // Decoder for ININDefaultGreetingList
            Decoders.addDecoder(clazz: ININDefaultGreetingList.self) { (source: AnyObject) -> ININDefaultGreetingList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDefaultGreetingList()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.owner = Decoders.decodeOptional(clazz: ININGreetingOwner.self, source: sourceDictionary["owner"])
                instance.ownerType = ININDefaultGreetingList.ININOwnerType(rawValue: (sourceDictionary["ownerType"] as? String) ?? "") 
                instance.greetings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["greetings"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDeleteRetention]
            Decoders.addDecoder(clazz: [ININDeleteRetention].self) { (source: AnyObject) -> [ININDeleteRetention] in
                return Decoders.decode(clazz: [ININDeleteRetention].self, source: source)
            }
            // Decoder for ININDeleteRetention
            Decoders.addDecoder(clazz: ININDeleteRetention.self) { (source: AnyObject) -> ININDeleteRetention in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDeleteRetention()
                instance.days = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["days"])
                return instance
            }


            // Decoder for [ININDeltaDocument]
            Decoders.addDecoder(clazz: [ININDeltaDocument].self) { (source: AnyObject) -> [ININDeltaDocument] in
                return Decoders.decode(clazz: [ININDeltaDocument].self, source: source)
            }
            // Decoder for ININDeltaDocument
            Decoders.addDecoder(clazz: ININDeltaDocument.self) { (source: AnyObject) -> ININDeltaDocument in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDeltaDocument()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.contentLengthBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["contentLengthBytes"])
                instance.operation = ININDeltaDocument.ININOperation(rawValue: (sourceDictionary["operation"] as? String) ?? "") 
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                return instance
            }


            // Decoder for [ININDeltaRequest]
            Decoders.addDecoder(clazz: [ININDeltaRequest].self) { (source: AnyObject) -> [ININDeltaRequest] in
                return Decoders.decode(clazz: [ININDeltaRequest].self, source: source)
            }
            // Decoder for ININDeltaRequest
            Decoders.addDecoder(clazz: ININDeltaRequest.self) { (source: AnyObject) -> ININDeltaRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDeltaRequest()
                instance.contextToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextToken"])
                return instance
            }


            // Decoder for [ININDeltaResponse]
            Decoders.addDecoder(clazz: [ININDeltaResponse].self) { (source: AnyObject) -> [ININDeltaResponse] in
                return Decoders.decode(clazz: [ININDeltaResponse].self, source: source)
            }
            // Decoder for ININDeltaResponse
            Decoders.addDecoder(clazz: ININDeltaResponse.self) { (source: AnyObject) -> ININDeltaResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDeltaResponse()
                instance.contextToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextToken"])
                instance.documents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["documents"])
                instance.hasMore = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasMore"])
                return instance
            }


            // Decoder for [ININDependency]
            Decoders.addDecoder(clazz: [ININDependency].self) { (source: AnyObject) -> [ININDependency] in
                return Decoders.decode(clazz: [ININDependency].self, source: source)
            }
            // Decoder for ININDependency
            Decoders.addDecoder(clazz: ININDependency.self) { (source: AnyObject) -> ININDependency in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependency()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.type = ININDependency.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.deleted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deleted"])
                instance.updated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["updated"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDependencyObject]
            Decoders.addDecoder(clazz: [ININDependencyObject].self) { (source: AnyObject) -> [ININDependencyObject] in
                return Decoders.decode(clazz: [ININDependencyObject].self, source: source)
            }
            // Decoder for ININDependencyObject
            Decoders.addDecoder(clazz: ININDependencyObject.self) { (source: AnyObject) -> ININDependencyObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependencyObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.type = ININDependencyObject.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.deleted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deleted"])
                instance.updated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["updated"])
                instance.consumedResources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["consumedResources"])
                instance.consumingResources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["consumingResources"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDependencyObjectEntityListing]
            Decoders.addDecoder(clazz: [ININDependencyObjectEntityListing].self) { (source: AnyObject) -> [ININDependencyObjectEntityListing] in
                return Decoders.decode(clazz: [ININDependencyObjectEntityListing].self, source: source)
            }
            // Decoder for ININDependencyObjectEntityListing
            Decoders.addDecoder(clazz: ININDependencyObjectEntityListing.self) { (source: AnyObject) -> ININDependencyObjectEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependencyObjectEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDependencyStatus]
            Decoders.addDecoder(clazz: [ININDependencyStatus].self) { (source: AnyObject) -> [ININDependencyStatus] in
                return Decoders.decode(clazz: [ININDependencyStatus].self, source: source)
            }
            // Decoder for ININDependencyStatus
            Decoders.addDecoder(clazz: ININDependencyStatus.self) { (source: AnyObject) -> ININDependencyStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependencyStatus()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.buildId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buildId"])
                instance.dateStarted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateStarted"])
                instance.dateCompleted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCompleted"])
                instance.status = ININDependencyStatus.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.failedObjects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["failedObjects"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDependencyType]
            Decoders.addDecoder(clazz: [ININDependencyType].self) { (source: AnyObject) -> [ININDependencyType] in
                return Decoders.decode(clazz: [ININDependencyType].self, source: source)
            }
            // Decoder for ININDependencyType
            Decoders.addDecoder(clazz: ININDependencyType.self) { (source: AnyObject) -> ININDependencyType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependencyType()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.versioned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["versioned"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDependencyTypeEntityListing]
            Decoders.addDecoder(clazz: [ININDependencyTypeEntityListing].self) { (source: AnyObject) -> [ININDependencyTypeEntityListing] in
                return Decoders.decode(clazz: [ININDependencyTypeEntityListing].self, source: source)
            }
            // Decoder for ININDependencyTypeEntityListing
            Decoders.addDecoder(clazz: ININDependencyTypeEntityListing.self) { (source: AnyObject) -> ININDependencyTypeEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDependencyTypeEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDestination]
            Decoders.addDecoder(clazz: [ININDestination].self) { (source: AnyObject) -> [ININDestination] in
                return Decoders.decode(clazz: [ININDestination].self, source: source)
            }
            // Decoder for ININDestination
            Decoders.addDecoder(clazz: ININDestination.self) { (source: AnyObject) -> ININDestination in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDestination()
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                return instance
            }


            // Decoder for [ININDetail]
            Decoders.addDecoder(clazz: [ININDetail].self) { (source: AnyObject) -> [ININDetail] in
                return Decoders.decode(clazz: [ININDetail].self, source: source)
            }
            // Decoder for ININDetail
            Decoders.addDecoder(clazz: ININDetail.self) { (source: AnyObject) -> ININDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDetail()
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance.entityId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityId"])
                instance.entityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityName"])
                return instance
            }


            // Decoder for [ININDiagnosticEmail]
            Decoders.addDecoder(clazz: [ININDiagnosticEmail].self) { (source: AnyObject) -> [ININDiagnosticEmail] in
                return Decoders.decode(clazz: [ININDiagnosticEmail].self, source: source)
            }
            // Decoder for ININDiagnosticEmail
            Decoders.addDecoder(clazz: ININDiagnosticEmail.self) { (source: AnyObject) -> ININDiagnosticEmail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDiagnosticEmail()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.topic = ININDiagnosticEmail.ININTopic(rawValue: (sourceDictionary["topic"] as? String) ?? "") 
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.priority = ININDiagnosticEmail.ININPriority(rawValue: (sourceDictionary["priority"] as? String) ?? "") 
                instance.type = ININDiagnosticEmail.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.data = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ININDialerAction]
            Decoders.addDecoder(clazz: [ININDialerAction].self) { (source: AnyObject) -> [ININDialerAction] in
                return Decoders.decode(clazz: [ININDialerAction].self, source: source)
            }
            // Decoder for ININDialerAction
            Decoders.addDecoder(clazz: ININDialerAction.self) { (source: AnyObject) -> ININDialerAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDialerAction()
                instance.type = ININDialerAction.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.actionTypeName = ININDialerAction.ININActionTypeName(rawValue: (sourceDictionary["actionTypeName"] as? String) ?? "") 
                instance.updateOption = ININDialerAction.ININUpdateOption(rawValue: (sourceDictionary["updateOption"] as? String) ?? "") 
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ININDialerAuditRequest]
            Decoders.addDecoder(clazz: [ININDialerAuditRequest].self) { (source: AnyObject) -> [ININDialerAuditRequest] in
                return Decoders.decode(clazz: [ININDialerAuditRequest].self, source: source)
            }
            // Decoder for ININDialerAuditRequest
            Decoders.addDecoder(clazz: ININDialerAuditRequest.self) { (source: AnyObject) -> ININDialerAuditRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDialerAuditRequest()
                instance.queryPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queryPhrase"])
                instance.queryFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["queryFields"])
                instance.facets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facets"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                return instance
            }


            // Decoder for [ININDialerContact]
            Decoders.addDecoder(clazz: [ININDialerContact].self) { (source: AnyObject) -> [ININDialerContact] in
                return Decoders.decode(clazz: [ININDialerContact].self, source: source)
            }
            // Decoder for ININDialerContact
            Decoders.addDecoder(clazz: ININDialerContact.self) { (source: AnyObject) -> ININDialerContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDialerContact()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.contactListId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactListId"])
                instance.data = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["data"])
                instance.callRecords = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["callRecords"])
                instance.callable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["callable"])
                instance.phoneNumberStatus = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["phoneNumberStatus"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDialerPreview]
            Decoders.addDecoder(clazz: [ININDialerPreview].self) { (source: AnyObject) -> [ININDialerPreview] in
                return Decoders.decode(clazz: [ININDialerPreview].self, source: source)
            }
            // Decoder for ININDialerPreview
            Decoders.addDecoder(clazz: ININDialerPreview.self) { (source: AnyObject) -> ININDialerPreview in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDialerPreview()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.contactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactId"])
                instance.contactListId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contactListId"])
                instance.campaignId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["campaignId"])
                instance.phoneNumberColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneNumberColumns"])
                return instance
            }


            // Decoder for [ININDialerRule]
            Decoders.addDecoder(clazz: [ININDialerRule].self) { (source: AnyObject) -> [ININDialerRule] in
                return Decoders.decode(clazz: [ININDialerRule].self, source: source)
            }
            // Decoder for ININDialerRule
            Decoders.addDecoder(clazz: ININDialerRule.self) { (source: AnyObject) -> ININDialerRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDialerRule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.order = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["order"])
                instance.category = ININDialerRule.ININCategory(rawValue: (sourceDictionary["category"] as? String) ?? "") 
                instance.conditions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conditions"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [ININDigitLength]
            Decoders.addDecoder(clazz: [ININDigitLength].self) { (source: AnyObject) -> [ININDigitLength] in
                return Decoders.decode(clazz: [ININDigitLength].self, source: source)
            }
            // Decoder for ININDigitLength
            Decoders.addDecoder(clazz: ININDigitLength.self) { (source: AnyObject) -> ININDigitLength in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDigitLength()
                instance.start = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end"])
                return instance
            }


            // Decoder for [ININDisconnectReason]
            Decoders.addDecoder(clazz: [ININDisconnectReason].self) { (source: AnyObject) -> [ININDisconnectReason] in
                return Decoders.decode(clazz: [ININDisconnectReason].self, source: source)
            }
            // Decoder for ININDisconnectReason
            Decoders.addDecoder(clazz: ININDisconnectReason.self) { (source: AnyObject) -> ININDisconnectReason in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDisconnectReason()
                instance.type = ININDisconnectReason.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.phrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phrase"])
                return instance
            }


            // Decoder for [ININDiscount]
            Decoders.addDecoder(clazz: [ININDiscount].self) { (source: AnyObject) -> [ININDiscount] in
                return Decoders.decode(clazz: [ININDiscount].self, source: source)
            }
            // Decoder for ININDiscount
            Decoders.addDecoder(clazz: ININDiscount.self) { (source: AnyObject) -> ININDiscount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDiscount()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.annualPrePay = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["annualPrePay"])
                instance.discount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discount"])
                instance.maximum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["maximum"])
                instance.minimum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["minimum"])
                instance.productCategory = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productCategory"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDncList]
            Decoders.addDecoder(clazz: [ININDncList].self) { (source: AnyObject) -> [ININDncList] in
                return Decoders.decode(clazz: [ININDncList].self, source: source)
            }
            // Decoder for ININDncList
            Decoders.addDecoder(clazz: ININDncList.self) { (source: AnyObject) -> ININDncList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDncList()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.phoneNumberColumns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneNumberColumns"])
                instance.importStatus = Decoders.decodeOptional(clazz: ININImportStatus.self, source: sourceDictionary["importStatus"])
                instance.size = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["size"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDncListEntityListing]
            Decoders.addDecoder(clazz: [ININDncListEntityListing].self) { (source: AnyObject) -> [ININDncListEntityListing] in
                return Decoders.decode(clazz: [ININDncListEntityListing].self, source: source)
            }
            // Decoder for ININDncListEntityListing
            Decoders.addDecoder(clazz: ININDncListEntityListing.self) { (source: AnyObject) -> ININDncListEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDncListEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDns]
            Decoders.addDecoder(clazz: [ININDns].self) { (source: AnyObject) -> [ININDns] in
                return Decoders.decode(clazz: [ININDns].self, source: source)
            }
            // Decoder for ININDns
            Decoders.addDecoder(clazz: ININDns.self) { (source: AnyObject) -> ININDns in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDns()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"])
                instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"])
                return instance
            }


            // Decoder for [ININDocument]
            Decoders.addDecoder(clazz: [ININDocument].self) { (source: AnyObject) -> [ININDocument] in
                return Decoders.decode(clazz: [ININDocument].self, source: source)
            }
            // Decoder for ININDocument
            Decoders.addDecoder(clazz: ININDocument.self) { (source: AnyObject) -> ININDocument in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocument()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.changeNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["changeNumber"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.dateUploaded = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateUploaded"])
                instance.contentUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentUri"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["createdBy"])
                instance.uploadedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["uploadedBy"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.contentLength = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["contentLength"])
                instance.systemType = ININDocument.ININSystemType(rawValue: (sourceDictionary["systemType"] as? String) ?? "") 
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pageCount"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.callerAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerAddress"])
                instance.receiverAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receiverAddress"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.tagValues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagValues"])
                instance.attributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attributes"])
                instance.thumbnails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["thumbnails"])
                instance.uploadStatus = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["uploadStatus"])
                instance.uploadDestinationUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadDestinationUri"])
                instance.uploadMethod = ININDocument.ININUploadMethod(rawValue: (sourceDictionary["uploadMethod"] as? String) ?? "") 
                instance.lockInfo = Decoders.decodeOptional(clazz: ININLockInfo.self, source: sourceDictionary["lockInfo"])
                instance.acl = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["acl"])
                instance.sharingStatus = ININDocument.ININSharingStatus(rawValue: (sourceDictionary["sharingStatus"] as? String) ?? "") 
                instance.sharingUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sharingUri"])
                instance.downloadSharingUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadSharingUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDocumentAttribute]
            Decoders.addDecoder(clazz: [ININDocumentAttribute].self) { (source: AnyObject) -> [ININDocumentAttribute] in
                return Decoders.decode(clazz: [ININDocumentAttribute].self, source: source)
            }
            // Decoder for ININDocumentAttribute
            Decoders.addDecoder(clazz: ININDocumentAttribute.self) { (source: AnyObject) -> ININDocumentAttribute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentAttribute()
                instance.attribute = Decoders.decodeOptional(clazz: ININAttribute.self, source: sourceDictionary["attribute"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININDocumentAudit]
            Decoders.addDecoder(clazz: [ININDocumentAudit].self) { (source: AnyObject) -> [ININDocumentAudit] in
                return Decoders.decode(clazz: [ININDocumentAudit].self, source: source)
            }
            // Decoder for ININDocumentAudit
            Decoders.addDecoder(clazz: ININDocumentAudit.self) { (source: AnyObject) -> ININDocumentAudit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentAudit()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.transactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transactionId"])
                instance.transactionInitiator = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["transactionInitiator"])
                instance.application = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["application"])
                instance.serviceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serviceName"])
                instance.level = ININDocumentAudit.ININLevel(rawValue: (sourceDictionary["level"] as? String) ?? "") 
                instance.timestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timestamp"])
                instance.status = ININDocumentAudit.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.actionContext = ININDocumentAudit.ININActionContext(rawValue: (sourceDictionary["actionContext"] as? String) ?? "") 
                instance.action = ININDocumentAudit.ININAction(rawValue: (sourceDictionary["action"] as? String) ?? "") 
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntityReference.self, source: sourceDictionary["entity"])
                instance.changes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["changes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDocumentAuditEntityListing]
            Decoders.addDecoder(clazz: [ININDocumentAuditEntityListing].self) { (source: AnyObject) -> [ININDocumentAuditEntityListing] in
                return Decoders.decode(clazz: [ININDocumentAuditEntityListing].self, source: source)
            }
            // Decoder for ININDocumentAuditEntityListing
            Decoders.addDecoder(clazz: ININDocumentAuditEntityListing.self) { (source: AnyObject) -> ININDocumentAuditEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentAuditEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDocumentEntityListing]
            Decoders.addDecoder(clazz: [ININDocumentEntityListing].self) { (source: AnyObject) -> [ININDocumentEntityListing] in
                return Decoders.decode(clazz: [ININDocumentEntityListing].self, source: source)
            }
            // Decoder for ININDocumentEntityListing
            Decoders.addDecoder(clazz: ININDocumentEntityListing.self) { (source: AnyObject) -> ININDocumentEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDocumentThumbnail]
            Decoders.addDecoder(clazz: [ININDocumentThumbnail].self) { (source: AnyObject) -> [ININDocumentThumbnail] in
                return Decoders.decode(clazz: [ININDocumentThumbnail].self, source: source)
            }
            // Decoder for ININDocumentThumbnail
            Decoders.addDecoder(clazz: ININDocumentThumbnail.self) { (source: AnyObject) -> ININDocumentThumbnail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentThumbnail()
                instance.resolution = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resolution"])
                instance.imageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUri"])
                return instance
            }


            // Decoder for [ININDocumentUpdate]
            Decoders.addDecoder(clazz: [ININDocumentUpdate].self) { (source: AnyObject) -> [ININDocumentUpdate] in
                return Decoders.decode(clazz: [ININDocumentUpdate].self, source: source)
            }
            // Decoder for ININDocumentUpdate
            Decoders.addDecoder(clazz: ININDocumentUpdate.self) { (source: AnyObject) -> ININDocumentUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentUpdate()
                instance.changeNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["changeNumber"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.addTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addTags"])
                instance.removeTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["removeTags"])
                instance.addTagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addTagIds"])
                instance.removeTagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["removeTagIds"])
                instance.updateAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["updateAttributes"])
                instance.removeAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["removeAttributes"])
                return instance
            }


            // Decoder for [ININDocumentUpload]
            Decoders.addDecoder(clazz: [ININDocumentUpload].self) { (source: AnyObject) -> [ININDocumentUpload] in
                return Decoders.decode(clazz: [ININDocumentUpload].self, source: source)
            }
            // Decoder for ININDocumentUpload
            Decoders.addDecoder(clazz: ININDocumentUpload.self) { (source: AnyObject) -> ININDocumentUpload in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocumentUpload()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.tagIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tagIds"])
                return instance
            }


            // Decoder for [ININDocusignTemplateMapping]
            Decoders.addDecoder(clazz: [ININDocusignTemplateMapping].self) { (source: AnyObject) -> [ININDocusignTemplateMapping] in
                return Decoders.decode(clazz: [ININDocusignTemplateMapping].self, source: source)
            }
            // Decoder for ININDocusignTemplateMapping
            Decoders.addDecoder(clazz: ININDocusignTemplateMapping.self) { (source: AnyObject) -> ININDocusignTemplateMapping in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDocusignTemplateMapping()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.docusignTemplateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["docusignTemplateId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainBillingPeriodEntityListing]
            Decoders.addDecoder(clazz: [ININDomainBillingPeriodEntityListing].self) { (source: AnyObject) -> [ININDomainBillingPeriodEntityListing] in
                return Decoders.decode(clazz: [ININDomainBillingPeriodEntityListing].self, source: source)
            }
            // Decoder for ININDomainBillingPeriodEntityListing
            Decoders.addDecoder(clazz: ININDomainBillingPeriodEntityListing.self) { (source: AnyObject) -> ININDomainBillingPeriodEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainBillingPeriodEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainCapabilities]
            Decoders.addDecoder(clazz: [ININDomainCapabilities].self) { (source: AnyObject) -> [ININDomainCapabilities] in
                return Decoders.decode(clazz: [ININDomainCapabilities].self, source: source)
            }
            // Decoder for ININDomainCapabilities
            Decoders.addDecoder(clazz: ININDomainCapabilities.self) { (source: AnyObject) -> ININDomainCapabilities in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainCapabilities()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.dhcp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dhcp"])
                instance.metric = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["metric"])
                return instance
            }


            // Decoder for [ININDomainCertificateAuthority]
            Decoders.addDecoder(clazz: [ININDomainCertificateAuthority].self) { (source: AnyObject) -> [ININDomainCertificateAuthority] in
                return Decoders.decode(clazz: [ININDomainCertificateAuthority].self, source: source)
            }
            // Decoder for ININDomainCertificateAuthority
            Decoders.addDecoder(clazz: ININDomainCertificateAuthority.self) { (source: AnyObject) -> ININDomainCertificateAuthority in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainCertificateAuthority()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININDomainCertificateAuthority.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.type = ININDomainCertificateAuthority.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.services = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["services"])
                instance.certificateDetails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["certificateDetails"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainEdgeSoftwareUpdateDto]
            Decoders.addDecoder(clazz: [ININDomainEdgeSoftwareUpdateDto].self) { (source: AnyObject) -> [ININDomainEdgeSoftwareUpdateDto] in
                return Decoders.decode(clazz: [ININDomainEdgeSoftwareUpdateDto].self, source: source)
            }
            // Decoder for ININDomainEdgeSoftwareUpdateDto
            Decoders.addDecoder(clazz: ININDomainEdgeSoftwareUpdateDto.self) { (source: AnyObject) -> ININDomainEdgeSoftwareUpdateDto in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEdgeSoftwareUpdateDto()
                instance.version = Decoders.decodeOptional(clazz: ININDomainEdgeSoftwareVersionDto.self, source: sourceDictionary["version"])
                instance.maxDownloadRate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxDownloadRate"])
                instance.downloadStartTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["downloadStartTime"])
                instance.executeStartTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["executeStartTime"])
                instance.executeStopTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["executeStopTime"])
                instance.executeOnIdle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["executeOnIdle"])
                instance.status = ININDomainEdgeSoftwareUpdateDto.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.edgeUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeUri"])
                instance.current = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["current"])
                return instance
            }


            // Decoder for [ININDomainEdgeSoftwareVersionDto]
            Decoders.addDecoder(clazz: [ININDomainEdgeSoftwareVersionDto].self) { (source: AnyObject) -> [ININDomainEdgeSoftwareVersionDto] in
                return Decoders.decode(clazz: [ININDomainEdgeSoftwareVersionDto].self, source: source)
            }
            // Decoder for ININDomainEdgeSoftwareVersionDto
            Decoders.addDecoder(clazz: ININDomainEdgeSoftwareVersionDto.self) { (source: AnyObject) -> ININDomainEdgeSoftwareVersionDto in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEdgeSoftwareVersionDto()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.edgeVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeVersion"])
                instance.publishDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["publishDate"])
                instance.edgeUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeUri"])
                instance.current = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["current"])
                instance.latestRelease = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["latestRelease"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainEntity]
            Decoders.addDecoder(clazz: [ININDomainEntity].self) { (source: AnyObject) -> [ININDomainEntity] in
                return Decoders.decode(clazz: [ININDomainEntity].self, source: source)
            }
            // Decoder for ININDomainEntity
            Decoders.addDecoder(clazz: ININDomainEntity.self) { (source: AnyObject) -> ININDomainEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEntity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainEntityListing]
            Decoders.addDecoder(clazz: [ININDomainEntityListing].self) { (source: AnyObject) -> [ININDomainEntityListing] in
                return Decoders.decode(clazz: [ININDomainEntityListing].self, source: source)
            }
            // Decoder for ININDomainEntityListing
            Decoders.addDecoder(clazz: ININDomainEntityListing.self) { (source: AnyObject) -> ININDomainEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainEntityListingEvaluationForm]
            Decoders.addDecoder(clazz: [ININDomainEntityListingEvaluationForm].self) { (source: AnyObject) -> [ININDomainEntityListingEvaluationForm] in
                return Decoders.decode(clazz: [ININDomainEntityListingEvaluationForm].self, source: source)
            }
            // Decoder for ININDomainEntityListingEvaluationForm
            Decoders.addDecoder(clazz: ININDomainEntityListingEvaluationForm.self) { (source: AnyObject) -> ININDomainEntityListingEvaluationForm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEntityListingEvaluationForm()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainEntityListingQueryResult]
            Decoders.addDecoder(clazz: [ININDomainEntityListingQueryResult].self) { (source: AnyObject) -> [ININDomainEntityListingQueryResult] in
                return Decoders.decode(clazz: [ININDomainEntityListingQueryResult].self, source: source)
            }
            // Decoder for ININDomainEntityListingQueryResult
            Decoders.addDecoder(clazz: ININDomainEntityListingQueryResult.self) { (source: AnyObject) -> ININDomainEntityListingQueryResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainEntityListingQueryResult()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainInvoiceEntityListing]
            Decoders.addDecoder(clazz: [ININDomainInvoiceEntityListing].self) { (source: AnyObject) -> [ININDomainInvoiceEntityListing] in
                return Decoders.decode(clazz: [ININDomainInvoiceEntityListing].self, source: source)
            }
            // Decoder for ININDomainInvoiceEntityListing
            Decoders.addDecoder(clazz: ININDomainInvoiceEntityListing.self) { (source: AnyObject) -> ININDomainInvoiceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainInvoiceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainLogicalInterface]
            Decoders.addDecoder(clazz: [ININDomainLogicalInterface].self) { (source: AnyObject) -> [ININDomainLogicalInterface] in
                return Decoders.decode(clazz: [ININDomainLogicalInterface].self, source: source)
            }
            // Decoder for ININDomainLogicalInterface
            Decoders.addDecoder(clazz: ININDomainLogicalInterface.self) { (source: AnyObject) -> ININDomainLogicalInterface in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainLogicalInterface()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININDomainLogicalInterface.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.edgeUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeUri"])
                instance.edgeAssignedId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeAssignedId"])
                instance.friendlyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["friendlyName"])
                instance.vlanTagId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vlanTagId"])
                instance.hardwareAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hardwareAddress"])
                instance.physicalAdapterId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["physicalAdapterId"])
                instance.ipAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipAddress"])
                instance.gateway = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gateway"])
                instance.primaryDns = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primaryDns"])
                instance.secondaryDns = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secondaryDns"])
                instance.ifStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ifStatus"])
                instance.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.ipv4Capabilities = Decoders.decodeOptional(clazz: ININDomainCapabilities.self, source: sourceDictionary["ipv4Capabilities"])
                instance.ipv6Capabilities = Decoders.decodeOptional(clazz: ININDomainCapabilities.self, source: sourceDictionary["ipv6Capabilities"])
                instance.currentState = ININDomainLogicalInterface.ININCurrentState(rawValue: (sourceDictionary["currentState"] as? String) ?? "") 
                instance.lastModifiedUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastModifiedUserId"])
                instance.lastModifiedCorrelationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastModifiedCorrelationId"])
                instance.commandResponses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commandResponses"])
                instance.inheritPhoneTrunkBases = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inheritPhoneTrunkBases"])
                instance.inheritPhoneTrunkBasesIPv4 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inheritPhoneTrunkBasesIPv4"])
                instance.inheritPhoneTrunkBasesIPv6 = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inheritPhoneTrunkBasesIPv6"])
                instance.useForInternalEdgeCommunication = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useForInternalEdgeCommunication"])
                instance.externalTrunkBaseAssignments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["externalTrunkBaseAssignments"])
                instance.phoneTrunkBaseAssignments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneTrunkBaseAssignments"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainNetworkAddress]
            Decoders.addDecoder(clazz: [ININDomainNetworkAddress].self) { (source: AnyObject) -> [ININDomainNetworkAddress] in
                return Decoders.decode(clazz: [ININDomainNetworkAddress].self, source: source)
            }
            // Decoder for ININDomainNetworkAddress
            Decoders.addDecoder(clazz: ININDomainNetworkAddress.self) { (source: AnyObject) -> ININDomainNetworkAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainNetworkAddress()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.persistent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["persistent"])
                instance.family = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["family"])
                return instance
            }


            // Decoder for [ININDomainNetworkCommandResponse]
            Decoders.addDecoder(clazz: [ININDomainNetworkCommandResponse].self) { (source: AnyObject) -> [ININDomainNetworkCommandResponse] in
                return Decoders.decode(clazz: [ININDomainNetworkCommandResponse].self, source: source)
            }
            // Decoder for ININDomainNetworkCommandResponse
            Decoders.addDecoder(clazz: ININDomainNetworkCommandResponse.self) { (source: AnyObject) -> ININDomainNetworkCommandResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainNetworkCommandResponse()
                instance.correlationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationId"])
                instance.commandName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commandName"])
                instance.acknowledged = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["acknowledged"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorDetails.self, source: sourceDictionary["errorInfo"])
                return instance
            }


            // Decoder for [ININDomainNetworkRoute]
            Decoders.addDecoder(clazz: [ININDomainNetworkRoute].self) { (source: AnyObject) -> [ININDomainNetworkRoute] in
                return Decoders.decode(clazz: [ININDomainNetworkRoute].self, source: source)
            }
            // Decoder for ININDomainNetworkRoute
            Decoders.addDecoder(clazz: ININDomainNetworkRoute.self) { (source: AnyObject) -> ININDomainNetworkRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainNetworkRoute()
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"])
                instance.nexthop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nexthop"])
                instance.persistent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["persistent"])
                instance.metric = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["metric"])
                instance.family = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["family"])
                return instance
            }


            // Decoder for [ININDomainOrgRoleDifference]
            Decoders.addDecoder(clazz: [ININDomainOrgRoleDifference].self) { (source: AnyObject) -> [ININDomainOrgRoleDifference] in
                return Decoders.decode(clazz: [ININDomainOrgRoleDifference].self, source: source)
            }
            // Decoder for ININDomainOrgRoleDifference
            Decoders.addDecoder(clazz: ININDomainOrgRoleDifference.self) { (source: AnyObject) -> ININDomainOrgRoleDifference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainOrgRoleDifference()
                instance.removedPermissionPolicies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["removedPermissionPolicies"])
                instance.addedPermissionPolicies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addedPermissionPolicies"])
                instance.samePermissionPolicies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["samePermissionPolicies"])
                instance.userOrgRole = Decoders.decodeOptional(clazz: ININDomainOrganizationRole.self, source: sourceDictionary["userOrgRole"])
                instance.roleFromDefault = Decoders.decodeOptional(clazz: ININDomainOrganizationRole.self, source: sourceDictionary["roleFromDefault"])
                return instance
            }


            // Decoder for [ININDomainOrganizationProduct]
            Decoders.addDecoder(clazz: [ININDomainOrganizationProduct].self) { (source: AnyObject) -> [ININDomainOrganizationProduct] in
                return Decoders.decode(clazz: [ININDomainOrganizationProduct].self, source: source)
            }
            // Decoder for ININDomainOrganizationProduct
            Decoders.addDecoder(clazz: ININDomainOrganizationProduct.self) { (source: AnyObject) -> ININDomainOrganizationProduct in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainOrganizationProduct()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ININDomainOrganizationRole]
            Decoders.addDecoder(clazz: [ININDomainOrganizationRole].self) { (source: AnyObject) -> [ININDomainOrganizationRole] in
                return Decoders.decode(clazz: [ININDomainOrganizationRole].self, source: source)
            }
            // Decoder for ININDomainOrganizationRole
            Decoders.addDecoder(clazz: ININDomainOrganizationRole.self) { (source: AnyObject) -> ININDomainOrganizationRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainOrganizationRole()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.defaultRoleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultRoleId"])
                instance.permissions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissions"])
                instance.permissionPolicies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissionPolicies"])
                instance.userCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userCount"])
                instance.roleNeedsUpdate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["roleNeedsUpdate"])
                instance._default = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["default"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainPermission]
            Decoders.addDecoder(clazz: [ININDomainPermission].self) { (source: AnyObject) -> [ININDomainPermission] in
                return Decoders.decode(clazz: [ININDomainPermission].self, source: source)
            }
            // Decoder for ININDomainPermission
            Decoders.addDecoder(clazz: ININDomainPermission.self) { (source: AnyObject) -> ININDomainPermission in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainPermission()
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.entityType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityType"])
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.allowsConditions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowsConditions"])
                return instance
            }


            // Decoder for [ININDomainPermissionCollection]
            Decoders.addDecoder(clazz: [ININDomainPermissionCollection].self) { (source: AnyObject) -> [ININDomainPermissionCollection] in
                return Decoders.decode(clazz: [ININDomainPermissionCollection].self, source: source)
            }
            // Decoder for ININDomainPermissionCollection
            Decoders.addDecoder(clazz: ININDomainPermissionCollection.self) { (source: AnyObject) -> ININDomainPermissionCollection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainPermissionCollection()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.permissionMap = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["permissionMap"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainPermissionPolicy]
            Decoders.addDecoder(clazz: [ININDomainPermissionPolicy].self) { (source: AnyObject) -> [ININDomainPermissionPolicy] in
                return Decoders.decode(clazz: [ININDomainPermissionPolicy].self, source: source)
            }
            // Decoder for ININDomainPermissionPolicy
            Decoders.addDecoder(clazz: ININDomainPermissionPolicy.self) { (source: AnyObject) -> ININDomainPermissionPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainPermissionPolicy()
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.entityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityName"])
                instance.policyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["policyName"])
                instance.policyDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["policyDescription"])
                instance.actionSet = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionSet"])
                instance.namedResources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["namedResources"])
                instance.allowConditions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowConditions"])
                instance.resourceConditionNode = Decoders.decodeOptional(clazz: ININDomainResourceConditionNode.self, source: sourceDictionary["resourceConditionNode"])
                return instance
            }


            // Decoder for [ININDomainPhysicalCapabilities]
            Decoders.addDecoder(clazz: [ININDomainPhysicalCapabilities].self) { (source: AnyObject) -> [ININDomainPhysicalCapabilities] in
                return Decoders.decode(clazz: [ININDomainPhysicalCapabilities].self, source: source)
            }
            // Decoder for ININDomainPhysicalCapabilities
            Decoders.addDecoder(clazz: ININDomainPhysicalCapabilities.self) { (source: AnyObject) -> ININDomainPhysicalCapabilities in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainPhysicalCapabilities()
                instance.vlan = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["vlan"])
                instance.team = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["team"])
                return instance
            }


            // Decoder for [ININDomainPhysicalInterface]
            Decoders.addDecoder(clazz: [ININDomainPhysicalInterface].self) { (source: AnyObject) -> [ININDomainPhysicalInterface] in
                return Decoders.decode(clazz: [ININDomainPhysicalInterface].self, source: source)
            }
            // Decoder for ININDomainPhysicalInterface
            Decoders.addDecoder(clazz: ININDomainPhysicalInterface.self) { (source: AnyObject) -> ININDomainPhysicalInterface in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainPhysicalInterface()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.edgeUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeUri"])
                instance.friendlyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["friendlyName"])
                instance.hardwareAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hardwareAddress"])
                instance.portLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["portLabel"])
                instance.physicalCapabilities = Decoders.decodeOptional(clazz: ININDomainPhysicalCapabilities.self, source: sourceDictionary["physicalCapabilities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainResourceConditionNode]
            Decoders.addDecoder(clazz: [ININDomainResourceConditionNode].self) { (source: AnyObject) -> [ININDomainResourceConditionNode] in
                return Decoders.decode(clazz: [ININDomainResourceConditionNode].self, source: source)
            }
            // Decoder for ININDomainResourceConditionNode
            Decoders.addDecoder(clazz: ININDomainResourceConditionNode.self) { (source: AnyObject) -> ININDomainResourceConditionNode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainResourceConditionNode()
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance._operator = ININDomainResourceConditionNode.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.operands = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["operands"])
                instance.conjunction = ININDomainResourceConditionNode.ININConjunction(rawValue: (sourceDictionary["conjunction"] as? String) ?? "") 
                instance.terms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["terms"])
                return instance
            }


            // Decoder for [ININDomainResourceConditionValue]
            Decoders.addDecoder(clazz: [ININDomainResourceConditionValue].self) { (source: AnyObject) -> [ININDomainResourceConditionValue] in
                return Decoders.decode(clazz: [ININDomainResourceConditionValue].self, source: source)
            }
            // Decoder for ININDomainResourceConditionValue
            Decoders.addDecoder(clazz: ININDomainResourceConditionValue.self) { (source: AnyObject) -> ININDomainResourceConditionValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainResourceConditionValue()
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.type = ININDomainResourceConditionValue.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININDomainRole]
            Decoders.addDecoder(clazz: [ININDomainRole].self) { (source: AnyObject) -> [ININDomainRole] in
                return Decoders.decode(clazz: [ININDomainRole].self, source: source)
            }
            // Decoder for ININDomainRole
            Decoders.addDecoder(clazz: ININDomainRole.self) { (source: AnyObject) -> ININDomainRole in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainRole()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININDomainSchemaReference]
            Decoders.addDecoder(clazz: [ININDomainSchemaReference].self) { (source: AnyObject) -> [ININDomainSchemaReference] in
                return Decoders.decode(clazz: [ININDomainSchemaReference].self, source: source)
            }
            // Decoder for ININDomainSchemaReference
            Decoders.addDecoder(clazz: ININDomainSchemaReference.self) { (source: AnyObject) -> ININDomainSchemaReference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainSchemaReference()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININDomainThirdPartyAccountEntityListing]
            Decoders.addDecoder(clazz: [ININDomainThirdPartyAccountEntityListing].self) { (source: AnyObject) -> [ININDomainThirdPartyAccountEntityListing] in
                return Decoders.decode(clazz: [ININDomainThirdPartyAccountEntityListing].self, source: source)
            }
            // Decoder for ININDomainThirdPartyAccountEntityListing
            Decoders.addDecoder(clazz: ININDomainThirdPartyAccountEntityListing.self) { (source: AnyObject) -> ININDomainThirdPartyAccountEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainThirdPartyAccountEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainThirdPartySubscriptionEntityListing]
            Decoders.addDecoder(clazz: [ININDomainThirdPartySubscriptionEntityListing].self) { (source: AnyObject) -> [ININDomainThirdPartySubscriptionEntityListing] in
                return Decoders.decode(clazz: [ININDomainThirdPartySubscriptionEntityListing].self, source: source)
            }
            // Decoder for ININDomainThirdPartySubscriptionEntityListing
            Decoders.addDecoder(clazz: ININDomainThirdPartySubscriptionEntityListing.self) { (source: AnyObject) -> ININDomainThirdPartySubscriptionEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainThirdPartySubscriptionEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainVoiceRateExtendedResponseItemEntityListing]
            Decoders.addDecoder(clazz: [ININDomainVoiceRateExtendedResponseItemEntityListing].self) { (source: AnyObject) -> [ININDomainVoiceRateExtendedResponseItemEntityListing] in
                return Decoders.decode(clazz: [ININDomainVoiceRateExtendedResponseItemEntityListing].self, source: source)
            }
            // Decoder for ININDomainVoiceRateExtendedResponseItemEntityListing
            Decoders.addDecoder(clazz: ININDomainVoiceRateExtendedResponseItemEntityListing.self) { (source: AnyObject) -> ININDomainVoiceRateExtendedResponseItemEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainVoiceRateExtendedResponseItemEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainVoiceRateInternationalResponseItemEntityListing]
            Decoders.addDecoder(clazz: [ININDomainVoiceRateInternationalResponseItemEntityListing].self) { (source: AnyObject) -> [ININDomainVoiceRateInternationalResponseItemEntityListing] in
                return Decoders.decode(clazz: [ININDomainVoiceRateInternationalResponseItemEntityListing].self, source: source)
            }
            // Decoder for ININDomainVoiceRateInternationalResponseItemEntityListing
            Decoders.addDecoder(clazz: ININDomainVoiceRateInternationalResponseItemEntityListing.self) { (source: AnyObject) -> ININDomainVoiceRateInternationalResponseItemEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainVoiceRateInternationalResponseItemEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDomainVoiceRateResponseItemEntityListing]
            Decoders.addDecoder(clazz: [ININDomainVoiceRateResponseItemEntityListing].self) { (source: AnyObject) -> [ININDomainVoiceRateResponseItemEntityListing] in
                return Decoders.decode(clazz: [ININDomainVoiceRateResponseItemEntityListing].self, source: source)
            }
            // Decoder for ININDomainVoiceRateResponseItemEntityListing
            Decoders.addDecoder(clazz: ININDomainVoiceRateResponseItemEntityListing.self) { (source: AnyObject) -> ININDomainVoiceRateResponseItemEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDomainVoiceRateResponseItemEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININDownloadResponse]
            Decoders.addDecoder(clazz: [ININDownloadResponse].self) { (source: AnyObject) -> [ININDownloadResponse] in
                return Decoders.decode(clazz: [ININDownloadResponse].self, source: source)
            }
            // Decoder for ININDownloadResponse
            Decoders.addDecoder(clazz: ININDownloadResponse.self) { (source: AnyObject) -> ININDownloadResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDownloadResponse()
                instance.contentLocationUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentLocationUri"])
                instance.imageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUri"])
                return instance
            }


            // Decoder for [ININDurationCondition]
            Decoders.addDecoder(clazz: [ININDurationCondition].self) { (source: AnyObject) -> [ININDurationCondition] in
                return Decoders.decode(clazz: [ININDurationCondition].self, source: source)
            }
            // Decoder for ININDurationCondition
            Decoders.addDecoder(clazz: ININDurationCondition.self) { (source: AnyObject) -> ININDurationCondition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININDurationCondition()
                instance.durationTarget = ININDurationCondition.ININDurationTarget(rawValue: (sourceDictionary["durationTarget"] as? String) ?? "") 
                instance.durationOperator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["durationOperator"])
                instance.durationRange = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["durationRange"])
                return instance
            }


            // Decoder for [ININEdge]
            Decoders.addDecoder(clazz: [ININEdge].self) { (source: AnyObject) -> [ININEdge] in
                return Decoders.decode(clazz: [ININEdge].self, source: source)
            }
            // Decoder for ININEdge
            Decoders.addDecoder(clazz: ININEdge.self) { (source: AnyObject) -> ININEdge in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdge()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININEdge.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.interfaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["interfaces"])
                instance.make = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["make"])
                instance.model = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["model"])
                instance.apiVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiVersion"])
                instance.softwareVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["softwareVersion"])
                instance.softwareVersionTimestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["softwareVersionTimestamp"])
                instance.softwareVersionPlatform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["softwareVersionPlatform"])
                instance.softwareVersionConfiguration = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["softwareVersionConfiguration"])
                instance.fullSoftwareVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullSoftwareVersion"])
                instance.pairingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pairingId"])
                instance.fingerprint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fingerprint"])
                instance.fingerprintHint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fingerprintHint"])
                instance.currentVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentVersion"])
                instance.stagedVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stagedVersion"])
                instance.patch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["patch"])
                instance.statusCode = ININEdge.ININStatusCode(rawValue: (sourceDictionary["statusCode"] as? String) ?? "") 
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININEdgeGroup.self, source: sourceDictionary["edgeGroup"])
                instance.site = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["site"])
                instance.softwareStatus = Decoders.decodeOptional(clazz: ININDomainEdgeSoftwareUpdateDto.self, source: sourceDictionary["softwareStatus"])
                instance.onlineStatus = ININEdge.ININOnlineStatus(rawValue: (sourceDictionary["onlineStatus"] as? String) ?? "") 
                instance.serialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialNumber"])
                instance.physicalEdge = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["physicalEdge"])
                instance.managed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["managed"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeAutoUpdateConfig]
            Decoders.addDecoder(clazz: [ININEdgeAutoUpdateConfig].self) { (source: AnyObject) -> [ININEdgeAutoUpdateConfig] in
                return Decoders.decode(clazz: [ININEdgeAutoUpdateConfig].self, source: source)
            }
            // Decoder for ININEdgeAutoUpdateConfig
            Decoders.addDecoder(clazz: ININEdgeAutoUpdateConfig.self) { (source: AnyObject) -> ININEdgeAutoUpdateConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeAutoUpdateConfig()
                instance.timeZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZone"])
                instance.rrule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rrule"])
                instance.start = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["end"])
                return instance
            }


            // Decoder for [ININEdgeEntityListing]
            Decoders.addDecoder(clazz: [ININEdgeEntityListing].self) { (source: AnyObject) -> [ININEdgeEntityListing] in
                return Decoders.decode(clazz: [ININEdgeEntityListing].self, source: source)
            }
            // Decoder for ININEdgeEntityListing
            Decoders.addDecoder(clazz: ININEdgeEntityListing.self) { (source: AnyObject) -> ININEdgeEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEdgeGroup]
            Decoders.addDecoder(clazz: [ININEdgeGroup].self) { (source: AnyObject) -> [ININEdgeGroup] in
                return Decoders.decode(clazz: [ININEdgeGroup].self, source: source)
            }
            // Decoder for ININEdgeGroup
            Decoders.addDecoder(clazz: ININEdgeGroup.self) { (source: AnyObject) -> ININEdgeGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeGroup()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININEdgeGroup.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.managed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["managed"])
                instance.edgeTrunkBaseAssignment = Decoders.decodeOptional(clazz: ININTrunkBaseAssignment.self, source: sourceDictionary["edgeTrunkBaseAssignment"])
                instance.phoneTrunkBaseAssignments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneTrunkBaseAssignments"])
                instance.phoneTrunkBases = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneTrunkBases"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeGroupEntityListing]
            Decoders.addDecoder(clazz: [ININEdgeGroupEntityListing].self) { (source: AnyObject) -> [ININEdgeGroupEntityListing] in
                return Decoders.decode(clazz: [ININEdgeGroupEntityListing].self, source: source)
            }
            // Decoder for ININEdgeGroupEntityListing
            Decoders.addDecoder(clazz: ININEdgeGroupEntityListing.self) { (source: AnyObject) -> ININEdgeGroupEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeGroupEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEdgeInterface]
            Decoders.addDecoder(clazz: [ININEdgeInterface].self) { (source: AnyObject) -> [ININEdgeInterface] in
                return Decoders.decode(clazz: [ININEdgeInterface].self, source: source)
            }
            // Decoder for ININEdgeInterface
            Decoders.addDecoder(clazz: ININEdgeInterface.self) { (source: AnyObject) -> ININEdgeInterface in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeInterface()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.ipAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipAddress"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.macAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["macAddress"])
                instance.ifName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ifName"])
                instance.endpoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["endpoints"])
                instance.lineTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lineTypes"])
                instance.addressFamilyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressFamilyId"])
                return instance
            }


            // Decoder for [ININEdgeLine]
            Decoders.addDecoder(clazz: [ININEdgeLine].self) { (source: AnyObject) -> [ININEdgeLine] in
                return Decoders.decode(clazz: [ININEdgeLine].self, source: source)
            }
            // Decoder for ININEdgeLine
            Decoders.addDecoder(clazz: ININEdgeLine.self) { (source: AnyObject) -> ININEdgeLine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLine()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.schema = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["schema"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.edge = Decoders.decodeOptional(clazz: ININEdge.self, source: sourceDictionary["edge"])
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININEdgeGroup.self, source: sourceDictionary["edgeGroup"])
                instance.lineType = ININEdgeLine.ININLineType(rawValue: (sourceDictionary["lineType"] as? String) ?? "") 
                instance.endpoint = Decoders.decodeOptional(clazz: ININEndpoint.self, source: sourceDictionary["endpoint"])
                instance.ipAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipAddress"])
                instance.logicalInterfaceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logicalInterfaceId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeLineEntityListing]
            Decoders.addDecoder(clazz: [ININEdgeLineEntityListing].self) { (source: AnyObject) -> [ININEdgeLineEntityListing] in
                return Decoders.decode(clazz: [ININEdgeLineEntityListing].self, source: source)
            }
            // Decoder for ININEdgeLineEntityListing
            Decoders.addDecoder(clazz: ININEdgeLineEntityListing.self) { (source: AnyObject) -> ININEdgeLineEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLineEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEdgeLogsJob]
            Decoders.addDecoder(clazz: [ININEdgeLogsJob].self) { (source: AnyObject) -> [ININEdgeLogsJob] in
                return Decoders.decode(clazz: [ININEdgeLogsJob].self, source: source)
            }
            // Decoder for ININEdgeLogsJob
            Decoders.addDecoder(clazz: ININEdgeLogsJob.self) { (source: AnyObject) -> ININEdgeLogsJob in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLogsJob()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.files = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["files"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeLogsJobFile]
            Decoders.addDecoder(clazz: [ININEdgeLogsJobFile].self) { (source: AnyObject) -> [ININEdgeLogsJobFile] in
                return Decoders.decode(clazz: [ININEdgeLogsJobFile].self, source: source)
            }
            // Decoder for ININEdgeLogsJobFile
            Decoders.addDecoder(clazz: ININEdgeLogsJobFile.self) { (source: AnyObject) -> ININEdgeLogsJobFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLogsJobFile()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.timeCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timeCreated"])
                instance.timeModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timeModified"])
                instance.sizeBytes = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sizeBytes"])
                instance.uploadStatus = ININEdgeLogsJobFile.ININUploadStatus(rawValue: (sourceDictionary["uploadStatus"] as? String) ?? "") 
                instance.edgePath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgePath"])
                instance.downloadId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeLogsJobRequest]
            Decoders.addDecoder(clazz: [ININEdgeLogsJobRequest].self) { (source: AnyObject) -> [ININEdgeLogsJobRequest] in
                return Decoders.decode(clazz: [ININEdgeLogsJobRequest].self, source: source)
            }
            // Decoder for ININEdgeLogsJobRequest
            Decoders.addDecoder(clazz: ININEdgeLogsJobRequest.self) { (source: AnyObject) -> ININEdgeLogsJobRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLogsJobRequest()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.recurse = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["recurse"])
                return instance
            }


            // Decoder for [ININEdgeLogsJobResponse]
            Decoders.addDecoder(clazz: [ININEdgeLogsJobResponse].self) { (source: AnyObject) -> [ININEdgeLogsJobResponse] in
                return Decoders.decode(clazz: [ININEdgeLogsJobResponse].self, source: source)
            }
            // Decoder for ININEdgeLogsJobResponse
            Decoders.addDecoder(clazz: ININEdgeLogsJobResponse.self) { (source: AnyObject) -> ININEdgeLogsJobResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLogsJobResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEdgeLogsJobUploadRequest]
            Decoders.addDecoder(clazz: [ININEdgeLogsJobUploadRequest].self) { (source: AnyObject) -> [ININEdgeLogsJobUploadRequest] in
                return Decoders.decode(clazz: [ININEdgeLogsJobUploadRequest].self, source: source)
            }
            // Decoder for ININEdgeLogsJobUploadRequest
            Decoders.addDecoder(clazz: ININEdgeLogsJobUploadRequest.self) { (source: AnyObject) -> ININEdgeLogsJobUploadRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeLogsJobUploadRequest()
                instance.fileIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fileIds"])
                return instance
            }


            // Decoder for [ININEdgeVersionInformation]
            Decoders.addDecoder(clazz: [ININEdgeVersionInformation].self) { (source: AnyObject) -> [ININEdgeVersionInformation] in
                return Decoders.decode(clazz: [ININEdgeVersionInformation].self, source: source)
            }
            // Decoder for ININEdgeVersionInformation
            Decoders.addDecoder(clazz: ININEdgeVersionInformation.self) { (source: AnyObject) -> ININEdgeVersionInformation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeVersionInformation()
                instance.softwareVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["softwareVersion"])
                return instance
            }


            // Decoder for [ININEdgeVersionReport]
            Decoders.addDecoder(clazz: [ININEdgeVersionReport].self) { (source: AnyObject) -> [ININEdgeVersionReport] in
                return Decoders.decode(clazz: [ININEdgeVersionReport].self, source: source)
            }
            // Decoder for ININEdgeVersionReport
            Decoders.addDecoder(clazz: ININEdgeVersionReport.self) { (source: AnyObject) -> ININEdgeVersionReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEdgeVersionReport()
                instance.oldestVersion = Decoders.decodeOptional(clazz: ININEdgeVersionInformation.self, source: sourceDictionary["oldestVersion"])
                instance.newestVersion = Decoders.decodeOptional(clazz: ININEdgeVersionInformation.self, source: sourceDictionary["newestVersion"])
                return instance
            }


            // Decoder for [ININEmail]
            Decoders.addDecoder(clazz: [ININEmail].self) { (source: AnyObject) -> [ININEmail] in
                return Decoders.decode(clazz: [ININEmail].self, source: source)
            }
            // Decoder for ININEmail
            Decoders.addDecoder(clazz: ININEmail.self) { (source: AnyObject) -> ININEmail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmail()
                instance.state = ININEmail.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.messagesSent = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["messagesSent"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                instance.direction = ININEmail.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.recordingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recordingId"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.disconnectType = ININEmail.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                return instance
            }


            // Decoder for [ININEmailAddress]
            Decoders.addDecoder(clazz: [ININEmailAddress].self) { (source: AnyObject) -> [ININEmailAddress] in
                return Decoders.decode(clazz: [ININEmailAddress].self, source: source)
            }
            // Decoder for ININEmailAddress
            Decoders.addDecoder(clazz: ININEmailAddress.self) { (source: AnyObject) -> ININEmailAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailAddress()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININEmailAttachment]
            Decoders.addDecoder(clazz: [ININEmailAttachment].self) { (source: AnyObject) -> [ININEmailAttachment] in
                return Decoders.decode(clazz: [ININEmailAttachment].self, source: source)
            }
            // Decoder for ININEmailAttachment
            Decoders.addDecoder(clazz: ININEmailAttachment.self) { (source: AnyObject) -> ININEmailAttachment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailAttachment()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.contentPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentPath"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.attachmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attachmentId"])
                instance.contentLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contentLength"])
                return instance
            }


            // Decoder for [ININEmailConversation]
            Decoders.addDecoder(clazz: [ININEmailConversation].self) { (source: AnyObject) -> [ININEmailConversation] in
                return Decoders.decode(clazz: [ININEmailConversation].self, source: source)
            }
            // Decoder for ININEmailConversation
            Decoders.addDecoder(clazz: ININEmailConversation.self) { (source: AnyObject) -> ININEmailConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEmailConversationEntityListing]
            Decoders.addDecoder(clazz: [ININEmailConversationEntityListing].self) { (source: AnyObject) -> [ININEmailConversationEntityListing] in
                return Decoders.decode(clazz: [ININEmailConversationEntityListing].self, source: source)
            }
            // Decoder for ININEmailConversationEntityListing
            Decoders.addDecoder(clazz: ININEmailConversationEntityListing.self) { (source: AnyObject) -> ININEmailConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEmailMediaParticipant]
            Decoders.addDecoder(clazz: [ININEmailMediaParticipant].self) { (source: AnyObject) -> [ININEmailMediaParticipant] in
                return Decoders.decode(clazz: [ININEmailMediaParticipant].self, source: source)
            }
            // Decoder for ININEmailMediaParticipant
            Decoders.addDecoder(clazz: ININEmailMediaParticipant.self) { (source: AnyObject) -> ININEmailMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININEmailMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININEmailMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININEmailMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.messagesSent = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["messagesSent"])
                return instance
            }


            // Decoder for [ININEmailMediaPolicy]
            Decoders.addDecoder(clazz: [ININEmailMediaPolicy].self) { (source: AnyObject) -> [ININEmailMediaPolicy] in
                return Decoders.decode(clazz: [ININEmailMediaPolicy].self, source: source)
            }
            // Decoder for ININEmailMediaPolicy
            Decoders.addDecoder(clazz: ININEmailMediaPolicy.self) { (source: AnyObject) -> ININEmailMediaPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailMediaPolicy()
                instance.actions = Decoders.decodeOptional(clazz: ININPolicyActions.self, source: sourceDictionary["actions"])
                instance.conditions = Decoders.decodeOptional(clazz: ININEmailMediaPolicyConditions.self, source: sourceDictionary["conditions"])
                return instance
            }


            // Decoder for [ININEmailMediaPolicyConditions]
            Decoders.addDecoder(clazz: [ININEmailMediaPolicyConditions].self) { (source: AnyObject) -> [ININEmailMediaPolicyConditions] in
                return Decoders.decode(clazz: [ININEmailMediaPolicyConditions].self, source: source)
            }
            // Decoder for ININEmailMediaPolicyConditions
            Decoders.addDecoder(clazz: ININEmailMediaPolicyConditions.self) { (source: AnyObject) -> ININEmailMediaPolicyConditions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailMediaPolicyConditions()
                instance.forUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forUsers"])
                instance.dateRanges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateRanges"])
                instance.forQueues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forQueues"])
                instance.wrapupCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wrapupCodes"])
                instance.timeAllowed = Decoders.decodeOptional(clazz: ININTimeAllowed.self, source: sourceDictionary["timeAllowed"])
                return instance
            }


            // Decoder for [ININEmailMessage]
            Decoders.addDecoder(clazz: [ININEmailMessage].self) { (source: AnyObject) -> [ININEmailMessage] in
                return Decoders.decode(clazz: [ININEmailMessage].self, source: source)
            }
            // Decoder for ININEmailMessage
            Decoders.addDecoder(clazz: ININEmailMessage.self) { (source: AnyObject) -> ININEmailMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailMessage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.to = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["to"])
                instance.cc = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cc"])
                instance.bcc = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bcc"])
                instance.from = Decoders.decodeOptional(clazz: ININEmailAddress.self, source: sourceDictionary["from"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.attachments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attachments"])
                instance.textBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["textBody"])
                instance.htmlBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["htmlBody"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEmailMessageListing]
            Decoders.addDecoder(clazz: [ININEmailMessageListing].self) { (source: AnyObject) -> [ININEmailMessageListing] in
                return Decoders.decode(clazz: [ININEmailMessageListing].self, source: source)
            }
            // Decoder for ININEmailMessageListing
            Decoders.addDecoder(clazz: ININEmailMessageListing.self) { (source: AnyObject) -> ININEmailMessageListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailMessageListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEmailSetup]
            Decoders.addDecoder(clazz: [ININEmailSetup].self) { (source: AnyObject) -> [ININEmailSetup] in
                return Decoders.decode(clazz: [ININEmailSetup].self, source: source)
            }
            // Decoder for ININEmailSetup
            Decoders.addDecoder(clazz: ININEmailSetup.self) { (source: AnyObject) -> ININEmailSetup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmailSetup()
                instance.rootDomain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rootDomain"])
                return instance
            }


            // Decoder for [ININEmbeddedSignatureView]
            Decoders.addDecoder(clazz: [ININEmbeddedSignatureView].self) { (source: AnyObject) -> [ININEmbeddedSignatureView] in
                return Decoders.decode(clazz: [ININEmbeddedSignatureView].self, source: source)
            }
            // Decoder for ININEmbeddedSignatureView
            Decoders.addDecoder(clazz: ININEmbeddedSignatureView.self) { (source: AnyObject) -> ININEmbeddedSignatureView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEmbeddedSignatureView()
                instance.view = Decoders.decodeOptional(clazz: ININView.self, source: sourceDictionary["view"])
                instance.envelopeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["envelopeId"])
                return instance
            }


            // Decoder for [ININEncryptionKey]
            Decoders.addDecoder(clazz: [ININEncryptionKey].self) { (source: AnyObject) -> [ININEncryptionKey] in
                return Decoders.decode(clazz: [ININEncryptionKey].self, source: source)
            }
            // Decoder for ININEncryptionKey
            Decoders.addDecoder(clazz: ININEncryptionKey.self) { (source: AnyObject) -> ININEncryptionKey in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEncryptionKey()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.keydataSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["keydataSummary"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEncryptionKeyEntityListing]
            Decoders.addDecoder(clazz: [ININEncryptionKeyEntityListing].self) { (source: AnyObject) -> [ININEncryptionKeyEntityListing] in
                return Decoders.decode(clazz: [ININEncryptionKeyEntityListing].self, source: source)
            }
            // Decoder for ININEncryptionKeyEntityListing
            Decoders.addDecoder(clazz: ININEncryptionKeyEntityListing.self) { (source: AnyObject) -> ININEncryptionKeyEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEncryptionKeyEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEndpoint]
            Decoders.addDecoder(clazz: [ININEndpoint].self) { (source: AnyObject) -> [ININEndpoint] in
                return Decoders.decode(clazz: [ININEndpoint].self, source: source)
            }
            // Decoder for ININEndpoint
            Decoders.addDecoder(clazz: ININEndpoint.self) { (source: AnyObject) -> ININEndpoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEndpoint()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININEndpoint.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.schema = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["schema"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.site = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["site"])
                instance.dids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dids"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEndpointEntityListing]
            Decoders.addDecoder(clazz: [ININEndpointEntityListing].self) { (source: AnyObject) -> [ININEndpointEntityListing] in
                return Decoders.decode(clazz: [ININEndpointEntityListing].self, source: source)
            }
            // Decoder for ININEndpointEntityListing
            Decoders.addDecoder(clazz: ININEndpointEntityListing.self) { (source: AnyObject) -> ININEndpointEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEndpointEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEntry]
            Decoders.addDecoder(clazz: [ININEntry].self) { (source: AnyObject) -> [ININEntry] in
                return Decoders.decode(clazz: [ININEntry].self, source: source)
            }
            // Decoder for ININEntry
            Decoders.addDecoder(clazz: ININEntry.self) { (source: AnyObject) -> ININEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEntry()
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [ININErrorBody]
            Decoders.addDecoder(clazz: [ININErrorBody].self) { (source: AnyObject) -> [ININErrorBody] in
                return Decoders.decode(clazz: [ININErrorBody].self, source: source)
            }
            // Decoder for ININErrorBody
            Decoders.addDecoder(clazz: ININErrorBody.self) { (source: AnyObject) -> ININErrorBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININErrorBody()
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.entityId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityId"])
                instance.entityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityName"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.messageWithParams = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageWithParams"])
                instance.messageParams = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["messageParams"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextId"])
                instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"])
                instance.errors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["errors"])
                return instance
            }


            // Decoder for [ININErrorDetails]
            Decoders.addDecoder(clazz: [ININErrorDetails].self) { (source: AnyObject) -> [ININErrorDetails] in
                return Decoders.decode(clazz: [ININErrorDetails].self, source: source)
            }
            // Decoder for ININErrorDetails
            Decoders.addDecoder(clazz: ININErrorDetails.self) { (source: AnyObject) -> ININErrorDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININErrorDetails()
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.messageWithParams = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageWithParams"])
                instance.messageParams = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["messageParams"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextId"])
                instance.nested = Decoders.decodeOptional(clazz: ININErrorDetails.self, source: sourceDictionary["nested"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [ININEstimatedWaitTimePredictions]
            Decoders.addDecoder(clazz: [ININEstimatedWaitTimePredictions].self) { (source: AnyObject) -> [ININEstimatedWaitTimePredictions] in
                return Decoders.decode(clazz: [ININEstimatedWaitTimePredictions].self, source: source)
            }
            // Decoder for ININEstimatedWaitTimePredictions
            Decoders.addDecoder(clazz: ININEstimatedWaitTimePredictions.self) { (source: AnyObject) -> ININEstimatedWaitTimePredictions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEstimatedWaitTimePredictions()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININEvaluation]
            Decoders.addDecoder(clazz: [ININEvaluation].self) { (source: AnyObject) -> [ININEvaluation] in
                return Decoders.decode(clazz: [ININEvaluation].self, source: source)
            }
            // Decoder for ININEvaluation
            Decoders.addDecoder(clazz: ININEvaluation.self) { (source: AnyObject) -> ININEvaluation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.conversation = Decoders.decodeOptional(clazz: ININConversation.self, source: sourceDictionary["conversation"])
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.evaluator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["evaluator"])
                instance.agent = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["agent"])
                instance.calibration = Decoders.decodeOptional(clazz: ININCalibration.self, source: sourceDictionary["calibration"])
                instance.status = ININEvaluation.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.answers = Decoders.decodeOptional(clazz: ININEvaluationScoringSet.self, source: sourceDictionary["answers"])
                instance.agentHasRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["agentHasRead"])
                instance.releaseDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["releaseDate"])
                instance.assignedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["assignedDate"])
                instance.changedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["changedDate"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.neverRelease = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["neverRelease"])
                instance.resourceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourceId"])
                instance.resourceType = ININEvaluation.ININResourceType(rawValue: (sourceDictionary["resourceType"] as? String) ?? "") 
                instance.redacted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["redacted"])
                instance.isScoringIndex = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isScoringIndex"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEvaluationAssignment]
            Decoders.addDecoder(clazz: [ININEvaluationAssignment].self) { (source: AnyObject) -> [ININEvaluationAssignment] in
                return Decoders.decode(clazz: [ININEvaluationAssignment].self, source: source)
            }
            // Decoder for ININEvaluationAssignment
            Decoders.addDecoder(clazz: ININEvaluationAssignment.self) { (source: AnyObject) -> ININEvaluationAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationAssignment()
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [ININEvaluationEntityListing]
            Decoders.addDecoder(clazz: [ININEvaluationEntityListing].self) { (source: AnyObject) -> [ININEvaluationEntityListing] in
                return Decoders.decode(clazz: [ININEvaluationEntityListing].self, source: source)
            }
            // Decoder for ININEvaluationEntityListing
            Decoders.addDecoder(clazz: ININEvaluationEntityListing.self) { (source: AnyObject) -> ININEvaluationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEvaluationForm]
            Decoders.addDecoder(clazz: [ININEvaluationForm].self) { (source: AnyObject) -> [ININEvaluationForm] in
                return Decoders.decode(clazz: [ININEvaluationForm].self, source: source)
            }
            // Decoder for ININEvaluationForm
            Decoders.addDecoder(clazz: ININEvaluationForm.self) { (source: AnyObject) -> ININEvaluationForm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationForm()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.contextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contextId"])
                instance.questionGroups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["questionGroups"])
                instance.publishedVersions = Decoders.decodeOptional(clazz: ININDomainEntityListingEvaluationForm.self, source: sourceDictionary["publishedVersions"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEvaluationFormAndScoringSet]
            Decoders.addDecoder(clazz: [ININEvaluationFormAndScoringSet].self) { (source: AnyObject) -> [ININEvaluationFormAndScoringSet] in
                return Decoders.decode(clazz: [ININEvaluationFormAndScoringSet].self, source: source)
            }
            // Decoder for ININEvaluationFormAndScoringSet
            Decoders.addDecoder(clazz: ININEvaluationFormAndScoringSet.self) { (source: AnyObject) -> ININEvaluationFormAndScoringSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationFormAndScoringSet()
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.answers = Decoders.decodeOptional(clazz: ININEvaluationScoringSet.self, source: sourceDictionary["answers"])
                return instance
            }


            // Decoder for [ININEvaluationFormEntityListing]
            Decoders.addDecoder(clazz: [ININEvaluationFormEntityListing].self) { (source: AnyObject) -> [ININEvaluationFormEntityListing] in
                return Decoders.decode(clazz: [ININEvaluationFormEntityListing].self, source: source)
            }
            // Decoder for ININEvaluationFormEntityListing
            Decoders.addDecoder(clazz: ININEvaluationFormEntityListing.self) { (source: AnyObject) -> ININEvaluationFormEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationFormEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININEvaluationScoringSet]
            Decoders.addDecoder(clazz: [ININEvaluationScoringSet].self) { (source: AnyObject) -> [ININEvaluationScoringSet] in
                return Decoders.decode(clazz: [ININEvaluationScoringSet].self, source: source)
            }
            // Decoder for ININEvaluationScoringSet
            Decoders.addDecoder(clazz: ININEvaluationScoringSet.self) { (source: AnyObject) -> ININEvaluationScoringSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluationScoringSet()
                instance.totalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalScore"])
                instance.totalCriticalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalCriticalScore"])
                instance.questionGroupScores = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["questionGroupScores"])
                instance.anyFailedKillQuestions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["anyFailedKillQuestions"])
                instance.comments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comments"])
                instance.agentComments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["agentComments"])
                return instance
            }


            // Decoder for [ININEvaluatorActivity]
            Decoders.addDecoder(clazz: [ININEvaluatorActivity].self) { (source: AnyObject) -> [ININEvaluatorActivity] in
                return Decoders.decode(clazz: [ININEvaluatorActivity].self, source: source)
            }
            // Decoder for ININEvaluatorActivity
            Decoders.addDecoder(clazz: ININEvaluatorActivity.self) { (source: AnyObject) -> ININEvaluatorActivity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluatorActivity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.evaluator = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["evaluator"])
                instance.numEvaluationsAssigned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numEvaluationsAssigned"])
                instance.numEvaluationsStarted = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numEvaluationsStarted"])
                instance.numEvaluationsCompleted = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numEvaluationsCompleted"])
                instance.numCalibrationsAssigned = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numCalibrationsAssigned"])
                instance.numCalibrationsStarted = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numCalibrationsStarted"])
                instance.numCalibrationsCompleted = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numCalibrationsCompleted"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININEvaluatorActivityEntityListing]
            Decoders.addDecoder(clazz: [ININEvaluatorActivityEntityListing].self) { (source: AnyObject) -> [ININEvaluatorActivityEntityListing] in
                return Decoders.decode(clazz: [ININEvaluatorActivityEntityListing].self, source: source)
            }
            // Decoder for ININEvaluatorActivityEntityListing
            Decoders.addDecoder(clazz: ININEvaluatorActivityEntityListing.self) { (source: AnyObject) -> ININEvaluatorActivityEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININEvaluatorActivityEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININExpansionCriterium]
            Decoders.addDecoder(clazz: [ININExpansionCriterium].self) { (source: AnyObject) -> [ININExpansionCriterium] in
                return Decoders.decode(clazz: [ININExpansionCriterium].self, source: source)
            }
            // Decoder for ININExpansionCriterium
            Decoders.addDecoder(clazz: ININExpansionCriterium.self) { (source: AnyObject) -> ININExpansionCriterium in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExpansionCriterium()
                instance.type = ININExpansionCriterium.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.threshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["threshold"])
                return instance
            }


            // Decoder for [ININExportUri]
            Decoders.addDecoder(clazz: [ININExportUri].self) { (source: AnyObject) -> [ININExportUri] in
                return Decoders.decode(clazz: [ININExportUri].self, source: source)
            }
            // Decoder for ININExportUri
            Decoders.addDecoder(clazz: ININExportUri.self) { (source: AnyObject) -> ININExportUri in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExportUri()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                instance.exportTimestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["exportTimestamp"])
                return instance
            }


            // Decoder for [ININExpressionResponse]
            Decoders.addDecoder(clazz: [ININExpressionResponse].self) { (source: AnyObject) -> [ININExpressionResponse] in
                return Decoders.decode(clazz: [ININExpressionResponse].self, source: source)
            }
            // Decoder for ININExpressionResponse
            Decoders.addDecoder(clazz: ININExpressionResponse.self) { (source: AnyObject) -> ININExpressionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExpressionResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.socialHub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialHub"])
                instance.conversation = Decoders.decodeOptional(clazz: ININConversation.self, source: sourceDictionary["conversation"])
                instance.twitterExpression = Decoders.decodeOptional(clazz: ININTwitterExpression.self, source: sourceDictionary["twitterExpression"])
                instance.rawResponseText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rawResponseText"])
                instance.socialAccount = Decoders.decodeOptional(clazz: ININSocialAccount.self, source: sourceDictionary["socialAccount"])
                instance.socialHubResponseId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialHubResponseId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININExtension]
            Decoders.addDecoder(clazz: [ININExtension].self) { (source: AnyObject) -> [ININExtension] in
                return Decoders.decode(clazz: [ININExtension].self, source: source)
            }
            // Decoder for ININExtension
            Decoders.addDecoder(clazz: ININExtension.self) { (source: AnyObject) -> ININExtension in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExtension()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININExtension.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.owner = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["owner"])
                instance.extensionPool = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["extensionPool"])
                instance.ownerType = ININExtension.ININOwnerType(rawValue: (sourceDictionary["ownerType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININExtensionEntityListing]
            Decoders.addDecoder(clazz: [ININExtensionEntityListing].self) { (source: AnyObject) -> [ININExtensionEntityListing] in
                return Decoders.decode(clazz: [ININExtensionEntityListing].self, source: source)
            }
            // Decoder for ININExtensionEntityListing
            Decoders.addDecoder(clazz: ININExtensionEntityListing.self) { (source: AnyObject) -> ININExtensionEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExtensionEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININExtensionPool]
            Decoders.addDecoder(clazz: [ININExtensionPool].self) { (source: AnyObject) -> [ININExtensionPool] in
                return Decoders.decode(clazz: [ININExtensionPool].self, source: source)
            }
            // Decoder for ININExtensionPool
            Decoders.addDecoder(clazz: ININExtensionPool.self) { (source: AnyObject) -> ININExtensionPool in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExtensionPool()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININExtensionPool.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.startNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startNumber"])
                instance.endNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endNumber"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININExtensionPoolEntityListing]
            Decoders.addDecoder(clazz: [ININExtensionPoolEntityListing].self) { (source: AnyObject) -> [ININExtensionPoolEntityListing] in
                return Decoders.decode(clazz: [ININExtensionPoolEntityListing].self, source: source)
            }
            // Decoder for ININExtensionPoolEntityListing
            Decoders.addDecoder(clazz: ININExtensionPoolEntityListing.self) { (source: AnyObject) -> ININExtensionPoolEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExtensionPoolEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININExternalContact]
            Decoders.addDecoder(clazz: [ININExternalContact].self) { (source: AnyObject) -> [ININExternalContact] in
                return Decoders.decode(clazz: [ININExternalContact].self, source: source)
            }
            // Decoder for ININExternalContact
            Decoders.addDecoder(clazz: ININExternalContact.self) { (source: AnyObject) -> ININExternalContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExternalContact()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middleName"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.salutation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["salutation"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.workPhone = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["workPhone"])
                instance.cellPhone = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["cellPhone"])
                instance.homePhone = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["homePhone"])
                instance.otherPhone = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["otherPhone"])
                instance.workEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["workEmail"])
                instance.personalEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personalEmail"])
                instance.otherEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["otherEmail"])
                instance.address = Decoders.decodeOptional(clazz: ININContactAddress.self, source: sourceDictionary["address"])
                instance.twitterId = Decoders.decodeOptional(clazz: ININTwitterId.self, source: sourceDictionary["twitterId"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.externalOrganization = Decoders.decodeOptional(clazz: ININExternalOrganization.self, source: sourceDictionary["externalOrganization"])
                instance.externalDataSources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["externalDataSources"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININExternalDataSource]
            Decoders.addDecoder(clazz: [ININExternalDataSource].self) { (source: AnyObject) -> [ININExternalDataSource] in
                return Decoders.decode(clazz: [ININExternalDataSource].self, source: source)
            }
            // Decoder for ININExternalDataSource
            Decoders.addDecoder(clazz: ININExternalDataSource.self) { (source: AnyObject) -> ININExternalDataSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExternalDataSource()
                instance.platform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["platform"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ININExternalOrganization]
            Decoders.addDecoder(clazz: [ININExternalOrganization].self) { (source: AnyObject) -> [ININExternalOrganization] in
                return Decoders.decode(clazz: [ININExternalOrganization].self, source: source)
            }
            // Decoder for ININExternalOrganization
            Decoders.addDecoder(clazz: ININExternalOrganization.self) { (source: AnyObject) -> ININExternalOrganization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExternalOrganization()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.companyType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyType"])
                instance.industry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["industry"])
                instance.primaryContactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primaryContactId"])
                instance.address = Decoders.decodeOptional(clazz: ININContactAddress.self, source: sourceDictionary["address"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["phoneNumber"])
                instance.faxNumber = Decoders.decodeOptional(clazz: ININPhoneNumber.self, source: sourceDictionary["faxNumber"])
                instance.employeeCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["employeeCount"])
                instance.revenue = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["revenue"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.websites = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["websites"])
                instance.tickers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tickers"])
                instance.twitterId = Decoders.decodeOptional(clazz: ININTwitterId.self, source: sourceDictionary["twitterId"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.externalDataSources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["externalDataSources"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININExternalOrganizationListing]
            Decoders.addDecoder(clazz: [ININExternalOrganizationListing].self) { (source: AnyObject) -> [ININExternalOrganizationListing] in
                return Decoders.decode(clazz: [ININExternalOrganizationListing].self, source: source)
            }
            // Decoder for ININExternalOrganizationListing
            Decoders.addDecoder(clazz: ININExternalOrganizationListing.self) { (source: AnyObject) -> ININExternalOrganizationListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININExternalOrganizationListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININFacetEntry]
            Decoders.addDecoder(clazz: [ININFacetEntry].self) { (source: AnyObject) -> [ININFacetEntry] in
                return Decoders.decode(clazz: [ININFacetEntry].self, source: source)
            }
            // Decoder for ININFacetEntry
            Decoders.addDecoder(clazz: ININFacetEntry.self) { (source: AnyObject) -> ININFacetEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetEntry()
                instance.attribute = Decoders.decodeOptional(clazz: ININTermAttribute.self, source: sourceDictionary["attribute"])
                instance.statistics = Decoders.decodeOptional(clazz: ININFacetStatistics.self, source: sourceDictionary["statistics"])
                instance.other = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["other"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.missing = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["missing"])
                instance.termCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["termCount"])
                instance.termType = ININFacetEntry.ININTermType(rawValue: (sourceDictionary["termType"] as? String) ?? "") 
                instance.terms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["terms"])
                return instance
            }


            // Decoder for [ININFacetInfo]
            Decoders.addDecoder(clazz: [ININFacetInfo].self) { (source: AnyObject) -> [ININFacetInfo] in
                return Decoders.decode(clazz: [ININFacetInfo].self, source: source)
            }
            // Decoder for ININFacetInfo
            Decoders.addDecoder(clazz: ININFacetInfo.self) { (source: AnyObject) -> ININFacetInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetInfo()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.entries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entries"])
                return instance
            }


            // Decoder for [ININFacetKeyAttribute]
            Decoders.addDecoder(clazz: [ININFacetKeyAttribute].self) { (source: AnyObject) -> [ININFacetKeyAttribute] in
                return Decoders.decode(clazz: [ININFacetKeyAttribute].self, source: source)
            }
            // Decoder for ININFacetKeyAttribute
            Decoders.addDecoder(clazz: ININFacetKeyAttribute.self) { (source: AnyObject) -> ININFacetKeyAttribute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetKeyAttribute()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [ININFacetRequest]
            Decoders.addDecoder(clazz: [ININFacetRequest].self) { (source: AnyObject) -> [ININFacetRequest] in
                return Decoders.decode(clazz: [ININFacetRequest].self, source: source)
            }
            // Decoder for ININFacetRequest
            Decoders.addDecoder(clazz: ININFacetRequest.self) { (source: AnyObject) -> ININFacetRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetRequest()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.facetRequestQueryType = ININFacetRequest.ININFacetRequestQueryType(rawValue: (sourceDictionary["facetRequestQueryType"] as? String) ?? "") 
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance.type = ININFacetRequest.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.rangeFrom = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rangeFrom"])
                instance.rangeTo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rangeTo"])
                instance.maxFacetCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxFacetCount"])
                return instance
            }


            // Decoder for [ININFacetResult]
            Decoders.addDecoder(clazz: [ININFacetResult].self) { (source: AnyObject) -> [ININFacetResult] in
                return Decoders.decode(clazz: [ININFacetResult].self, source: source)
            }
            // Decoder for ININFacetResult
            Decoders.addDecoder(clazz: ININFacetResult.self) { (source: AnyObject) -> ININFacetResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetResult()
                instance.requestName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestName"])
                instance.requestFieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestFieldName"])
                instance.fieldType = ININFacetResult.ININFieldType(rawValue: (sourceDictionary["fieldType"] as? String) ?? "") 
                instance.requestType = ININFacetResult.ININRequestType(rawValue: (sourceDictionary["requestType"] as? String) ?? "") 
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININFacetResultItem]
            Decoders.addDecoder(clazz: [ININFacetResultItem].self) { (source: AnyObject) -> [ININFacetResultItem] in
                return Decoders.decode(clazz: [ININFacetResultItem].self, source: source)
            }
            // Decoder for ININFacetResultItem
            Decoders.addDecoder(clazz: ININFacetResultItem.self) { (source: AnyObject) -> ININFacetResultItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetResultItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.document = Decoders.decodeOptional(clazz: ININDocument.self, source: sourceDictionary["document"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.flowConfigId = Decoders.decodeOptional(clazz: ININFlowConfigId.self, source: sourceDictionary["flowConfigId"])
                instance.workspace = Decoders.decodeOptional(clazz: ININWorkspace.self, source: sourceDictionary["workspace"])
                return instance
            }


            // Decoder for [ININFacetStatistics]
            Decoders.addDecoder(clazz: [ININFacetStatistics].self) { (source: AnyObject) -> [ININFacetStatistics] in
                return Decoders.decode(clazz: [ININFacetStatistics].self, source: source)
            }
            // Decoder for ININFacetStatistics
            Decoders.addDecoder(clazz: ININFacetStatistics.self) { (source: AnyObject) -> ININFacetStatistics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetStatistics()
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.min = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min"])
                instance.max = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max"])
                instance.mean = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mean"])
                instance.stdDeviation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["stdDeviation"])
                instance.dateMin = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateMin"])
                instance.dateMax = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateMax"])
                return instance
            }


            // Decoder for [ININFacetTerm]
            Decoders.addDecoder(clazz: [ININFacetTerm].self) { (source: AnyObject) -> [ININFacetTerm] in
                return Decoders.decode(clazz: [ININFacetTerm].self, source: source)
            }
            // Decoder for ININFacetTerm
            Decoders.addDecoder(clazz: ININFacetTerm.self) { (source: AnyObject) -> ININFacetTerm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFacetTerm()
                instance.term = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["term"])
                instance.key = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["key"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ININFailedObject]
            Decoders.addDecoder(clazz: [ININFailedObject].self) { (source: AnyObject) -> [ININFailedObject] in
                return Decoders.decode(clazz: [ININFailedObject].self, source: source)
            }
            // Decoder for ININFailedObject
            Decoders.addDecoder(clazz: ININFailedObject.self) { (source: AnyObject) -> ININFailedObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFailedObject()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                return instance
            }


            // Decoder for [ININFavoriteTemplateRequestData]
            Decoders.addDecoder(clazz: [ININFavoriteTemplateRequestData].self) { (source: AnyObject) -> [ININFavoriteTemplateRequestData] in
                return Decoders.decode(clazz: [ININFavoriteTemplateRequestData].self, source: source)
            }
            // Decoder for ININFavoriteTemplateRequestData
            Decoders.addDecoder(clazz: ININFavoriteTemplateRequestData.self) { (source: AnyObject) -> ININFavoriteTemplateRequestData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFavoriteTemplateRequestData()
                instance.templateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateId"])
                return instance
            }


            // Decoder for [ININFaxDocument]
            Decoders.addDecoder(clazz: [ININFaxDocument].self) { (source: AnyObject) -> [ININFaxDocument] in
                return Decoders.decode(clazz: [ININFaxDocument].self, source: source)
            }
            // Decoder for ININFaxDocument
            Decoders.addDecoder(clazz: ININFaxDocument.self) { (source: AnyObject) -> ININFaxDocument in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFaxDocument()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.contentUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentUri"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["createdBy"])
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.contentLength = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["contentLength"])
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pageCount"])
                instance.callerAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerAddress"])
                instance.receiverAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["receiverAddress"])
                instance.thumbnails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["thumbnails"])
                instance.sharingUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sharingUri"])
                instance.downloadSharingUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadSharingUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFaxDocumentEntityListing]
            Decoders.addDecoder(clazz: [ININFaxDocumentEntityListing].self) { (source: AnyObject) -> [ININFaxDocumentEntityListing] in
                return Decoders.decode(clazz: [ININFaxDocumentEntityListing].self, source: source)
            }
            // Decoder for ININFaxDocumentEntityListing
            Decoders.addDecoder(clazz: ININFaxDocumentEntityListing.self) { (source: AnyObject) -> ININFaxDocumentEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFaxDocumentEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININFaxSendRequest]
            Decoders.addDecoder(clazz: [ININFaxSendRequest].self) { (source: AnyObject) -> [ININFaxSendRequest] in
                return Decoders.decode(clazz: [ININFaxSendRequest].self, source: source)
            }
            // Decoder for ININFaxSendRequest
            Decoders.addDecoder(clazz: ININFaxSendRequest.self) { (source: AnyObject) -> ININFaxSendRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFaxSendRequest()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.documentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentId"])
                instance.contentType = ININFaxSendRequest.ININContentType(rawValue: (sourceDictionary["contentType"] as? String) ?? "") 
                instance.workspace = Decoders.decodeOptional(clazz: ININWorkspace.self, source: sourceDictionary["workspace"])
                instance.coverSheet = Decoders.decodeOptional(clazz: ININCoverSheet.self, source: sourceDictionary["coverSheet"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFaxSendResponse]
            Decoders.addDecoder(clazz: [ININFaxSendResponse].self) { (source: AnyObject) -> [ININFaxSendResponse] in
                return Decoders.decode(clazz: [ININFaxSendResponse].self, source: source)
            }
            // Decoder for ININFaxSendResponse
            Decoders.addDecoder(clazz: ININFaxSendResponse.self) { (source: AnyObject) -> ININFaxSendResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFaxSendResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.uploadDestinationUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadDestinationUri"])
                instance.uploadMethodType = ININFaxSendResponse.ININUploadMethodType(rawValue: (sourceDictionary["uploadMethodType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFaxSummary]
            Decoders.addDecoder(clazz: [ININFaxSummary].self) { (source: AnyObject) -> [ININFaxSummary] in
                return Decoders.decode(clazz: [ININFaxSummary].self, source: source)
            }
            // Decoder for ININFaxSummary
            Decoders.addDecoder(clazz: ININFaxSummary.self) { (source: AnyObject) -> ININFaxSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFaxSummary()
                instance.readCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["readCount"])
                instance.unreadCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unreadCount"])
                instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalCount"])
                return instance
            }


            // Decoder for [ININFilterItem]
            Decoders.addDecoder(clazz: [ININFilterItem].self) { (source: AnyObject) -> [ININFilterItem] in
                return Decoders.decode(clazz: [ININFilterItem].self, source: source)
            }
            // Decoder for ININFilterItem
            Decoders.addDecoder(clazz: ININFilterItem.self) { (source: AnyObject) -> ININFilterItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFilterItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININFilterItem.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance._operator = ININFilterItem.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                return instance
            }


            // Decoder for [ININFlow]
            Decoders.addDecoder(clazz: [ININFlow].self) { (source: AnyObject) -> [ININFlow] in
                return Decoders.decode(clazz: [ININFlow].self, source: source)
            }
            // Decoder for ININFlow
            Decoders.addDecoder(clazz: ININFlow.self) { (source: AnyObject) -> ININFlow in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlow()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.type = ININFlow.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.lockedUser = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["lockedUser"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.deleted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deleted"])
                instance.publishedVersion = Decoders.decodeOptional(clazz: ININFlowVersion.self, source: sourceDictionary["publishedVersion"])
                instance.checkedInVersion = Decoders.decodeOptional(clazz: ININFlowVersion.self, source: sourceDictionary["checkedInVersion"])
                instance.savedVersion = Decoders.decodeOptional(clazz: ININFlowVersion.self, source: sourceDictionary["savedVersion"])
                instance.system = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["system"])
                instance.publishStatus = ININFlow.ININPublishStatus(rawValue: (sourceDictionary["publishStatus"] as? String) ?? "") 
                instance.publishedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["publishedBy"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFlowBody]
            Decoders.addDecoder(clazz: [ININFlowBody].self) { (source: AnyObject) -> [ININFlowBody] in
                return Decoders.decode(clazz: [ININFlowBody].self, source: source)
            }
            // Decoder for ININFlowBody
            Decoders.addDecoder(clazz: ININFlowBody.self) { (source: AnyObject) -> ININFlowBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowBody()
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.body = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["body"])
                return instance
            }


            // Decoder for [ININFlowBodyFormat]
            Decoders.addDecoder(clazz: [ININFlowBodyFormat].self) { (source: AnyObject) -> [ININFlowBodyFormat] in
                return Decoders.decode(clazz: [ININFlowBodyFormat].self, source: source)
            }
            // Decoder for ININFlowBodyFormat
            Decoders.addDecoder(clazz: ININFlowBodyFormat.self) { (source: AnyObject) -> ININFlowBodyFormat in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowBodyFormat()
                instance.schemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schemaUri"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ININFlowConfigId]
            Decoders.addDecoder(clazz: [ININFlowConfigId].self) { (source: AnyObject) -> [ININFlowConfigId] in
                return Decoders.decode(clazz: [ININFlowConfigId].self, source: source)
            }
            // Decoder for ININFlowConfigId
            Decoders.addDecoder(clazz: ININFlowConfigId.self) { (source: AnyObject) -> ININFlowConfigId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowConfigId()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [ININFlowConfigMetaData]
            Decoders.addDecoder(clazz: [ININFlowConfigMetaData].self) { (source: AnyObject) -> [ININFlowConfigMetaData] in
                return Decoders.decode(clazz: [ININFlowConfigMetaData].self, source: source)
            }
            // Decoder for ININFlowConfigMetaData
            Decoders.addDecoder(clazz: ININFlowConfigMetaData.self) { (source: AnyObject) -> ININFlowConfigMetaData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowConfigMetaData()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.configState = ININFlowConfigMetaData.ININConfigState(rawValue: (sourceDictionary["configState"] as? String) ?? "") 
                instance.flowType = ININFlowConfigMetaData.ININFlowType(rawValue: (sourceDictionary["flowType"] as? String) ?? "") 
                instance.lockedByUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["lockedByUser"])
                instance.newestPublishedVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newestPublishedVersion"])
                instance.newestVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newestVersion"])
                instance.associatedWorkspaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["associatedWorkspaces"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.hasDraft = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasDraft"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFlowConfigMetaDataEntityListing]
            Decoders.addDecoder(clazz: [ININFlowConfigMetaDataEntityListing].self) { (source: AnyObject) -> [ININFlowConfigMetaDataEntityListing] in
                return Decoders.decode(clazz: [ININFlowConfigMetaDataEntityListing].self, source: source)
            }
            // Decoder for ININFlowConfigMetaDataEntityListing
            Decoders.addDecoder(clazz: ININFlowConfigMetaDataEntityListing.self) { (source: AnyObject) -> ININFlowConfigMetaDataEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowConfigMetaDataEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININFlowDetails]
            Decoders.addDecoder(clazz: [ININFlowDetails].self) { (source: AnyObject) -> [ININFlowDetails] in
                return Decoders.decode(clazz: [ININFlowDetails].self, source: source)
            }
            // Decoder for ININFlowDetails
            Decoders.addDecoder(clazz: ININFlowDetails.self) { (source: AnyObject) -> ININFlowDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowDetails()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.flowConfigId = Decoders.decodeOptional(clazz: ININFlowConfigId.self, source: sourceDictionary["flowConfigId"])
                instance.launchTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["launchTime"])
                instance.launchType = ININFlowDetails.ININLaunchType(rawValue: (sourceDictionary["launchType"] as? String) ?? "") 
                instance.launchedBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["launchedBy"])
                instance.status = ININFlowDetails.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.associatedDocuments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["associatedDocuments"])
                instance.flowCompletionTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["flowCompletionTime"])
                instance.flowCompletionReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowCompletionReason"])
                instance.flowErrorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["flowErrorInfo"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFlowDetailsSearchResult]
            Decoders.addDecoder(clazz: [ININFlowDetailsSearchResult].self) { (source: AnyObject) -> [ININFlowDetailsSearchResult] in
                return Decoders.decode(clazz: [ININFlowDetailsSearchResult].self, source: source)
            }
            // Decoder for ININFlowDetailsSearchResult
            Decoders.addDecoder(clazz: ININFlowDetailsSearchResult.self) { (source: AnyObject) -> ININFlowDetailsSearchResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowDetailsSearchResult()
                instance.searchResults = Decoders.decodeOptional(clazz: ININLinkedEntityListingFlowDetails.self, source: sourceDictionary["searchResults"])
                instance.facetResults = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetResults"])
                return instance
            }


            // Decoder for [ININFlowEntityListing]
            Decoders.addDecoder(clazz: [ININFlowEntityListing].self) { (source: AnyObject) -> [ININFlowEntityListing] in
                return Decoders.decode(clazz: [ININFlowEntityListing].self, source: source)
            }
            // Decoder for ININFlowEntityListing
            Decoders.addDecoder(clazz: ININFlowEntityListing.self) { (source: AnyObject) -> ININFlowEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININFlowExecId]
            Decoders.addDecoder(clazz: [ININFlowExecId].self) { (source: AnyObject) -> [ININFlowExecId] in
                return Decoders.decode(clazz: [ININFlowExecId].self, source: source)
            }
            // Decoder for ININFlowExecId
            Decoders.addDecoder(clazz: ININFlowExecId.self) { (source: AnyObject) -> ININFlowExecId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowExecId()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFlowHistoryDataItem]
            Decoders.addDecoder(clazz: [ININFlowHistoryDataItem].self) { (source: AnyObject) -> [ININFlowHistoryDataItem] in
                return Decoders.decode(clazz: [ININFlowHistoryDataItem].self, source: source)
            }
            // Decoder for ININFlowHistoryDataItem
            Decoders.addDecoder(clazz: ININFlowHistoryDataItem.self) { (source: AnyObject) -> ININFlowHistoryDataItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowHistoryDataItem()
                instance.parameterName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameterName"])
                instance.parameterType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameterType"])
                instance.parameterValues = Decoders.decodeOptional(clazz: ININValue.self, source: sourceDictionary["parameterValues"])
                return instance
            }


            // Decoder for [ININFlowHistoryItem]
            Decoders.addDecoder(clazz: [ININFlowHistoryItem].self) { (source: AnyObject) -> [ININFlowHistoryItem] in
                return Decoders.decode(clazz: [ININFlowHistoryItem].self, source: source)
            }
            // Decoder for ININFlowHistoryItem
            Decoders.addDecoder(clazz: ININFlowHistoryItem.self) { (source: AnyObject) -> ININFlowHistoryItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowHistoryItem()
                instance.historyEventTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["historyEventTime"])
                instance.state = Decoders.decodeOptional(clazz: ININFlowState.self, source: sourceDictionary["state"])
                instance.workItem = Decoders.decodeOptional(clazz: ININWorkItem.self, source: sourceDictionary["workItem"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.historyEventData = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["historyEventData"])
                instance.historyEventType = ININFlowHistoryItem.ININHistoryEventType(rawValue: (sourceDictionary["historyEventType"] as? String) ?? "") 
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [ININFlowHistoryResultItem]
            Decoders.addDecoder(clazz: [ININFlowHistoryResultItem].self) { (source: AnyObject) -> [ININFlowHistoryResultItem] in
                return Decoders.decode(clazz: [ININFlowHistoryResultItem].self, source: source)
            }
            // Decoder for ININFlowHistoryResultItem
            Decoders.addDecoder(clazz: ININFlowHistoryResultItem.self) { (source: AnyObject) -> ININFlowHistoryResultItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowHistoryResultItem()
                instance.flowInstance = Decoders.decodeOptional(clazz: ININFlowDetails.self, source: sourceDictionary["flowInstance"])
                instance.availableActions = Decoders.decodeOptional(clazz: ININBackendFlowAvailableActions.self, source: sourceDictionary["availableActions"])
                instance.historyItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["historyItems"])
                return instance
            }


            // Decoder for [ININFlowInputData]
            Decoders.addDecoder(clazz: [ININFlowInputData].self) { (source: AnyObject) -> [ININFlowInputData] in
                return Decoders.decode(clazz: [ININFlowInputData].self, source: source)
            }
            // Decoder for ININFlowInputData
            Decoders.addDecoder(clazz: ININFlowInputData.self) { (source: AnyObject) -> ININFlowInputData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowInputData()
                instance.linkedDocumentIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["linkedDocumentIds"])
                return instance
            }


            // Decoder for [ININFlowLaunchRequest]
            Decoders.addDecoder(clazz: [ININFlowLaunchRequest].self) { (source: AnyObject) -> [ININFlowLaunchRequest] in
                return Decoders.decode(clazz: [ININFlowLaunchRequest].self, source: source)
            }
            // Decoder for ININFlowLaunchRequest
            Decoders.addDecoder(clazz: ININFlowLaunchRequest.self) { (source: AnyObject) -> ININFlowLaunchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowLaunchRequest()
                instance.flowConfigId = Decoders.decodeOptional(clazz: ININFlowConfigId.self, source: sourceDictionary["flowConfigId"])
                instance.flowInstanceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowInstanceName"])
                instance.inputData = Decoders.decodeOptional(clazz: ININFlowInputData.self, source: sourceDictionary["inputData"])
                instance.launchType = ININFlowLaunchRequest.ININLaunchType(rawValue: (sourceDictionary["launchType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININFlowPublish]
            Decoders.addDecoder(clazz: [ININFlowPublish].self) { (source: AnyObject) -> [ININFlowPublish] in
                return Decoders.decode(clazz: [ININFlowPublish].self, source: source)
            }
            // Decoder for ININFlowPublish
            Decoders.addDecoder(clazz: ININFlowPublish.self) { (source: AnyObject) -> ININFlowPublish in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowPublish()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.flowConfigVersionSource = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowConfigVersionSource"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [ININFlowReportResultItem]
            Decoders.addDecoder(clazz: [ININFlowReportResultItem].self) { (source: AnyObject) -> [ININFlowReportResultItem] in
                return Decoders.decode(clazz: [ININFlowReportResultItem].self, source: source)
            }
            // Decoder for ININFlowReportResultItem
            Decoders.addDecoder(clazz: ININFlowReportResultItem.self) { (source: AnyObject) -> ININFlowReportResultItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowReportResultItem()
                instance.flowExecId = Decoders.decodeOptional(clazz: ININFlowExecId.self, source: sourceDictionary["flowExecId"])
                instance.flowConfigId = Decoders.decodeOptional(clazz: ININFlowConfigId.self, source: sourceDictionary["flowConfigId"])
                instance.flowInstanceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowInstanceName"])
                instance.associatedDocument = Decoders.decodeOptional(clazz: ININAssociatedDocument.self, source: sourceDictionary["associatedDocument"])
                instance.flowStatus = ININFlowReportResultItem.ININFlowStatus(rawValue: (sourceDictionary["flowStatus"] as? String) ?? "") 
                instance.currentState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentState"])
                instance.startDateTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDateTime"])
                instance.endDateTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDateTime"])
                instance.workItemUserAssignees = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["workItemUserAssignees"])
                instance.completedUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["completedUser"])
                instance.completionReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["completionReason"])
                instance.flowErrorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["flowErrorInfo"])
                return instance
            }


            // Decoder for [ININFlowSearchRequest]
            Decoders.addDecoder(clazz: [ININFlowSearchRequest].self) { (source: AnyObject) -> [ININFlowSearchRequest] in
                return Decoders.decode(clazz: [ININFlowSearchRequest].self, source: source)
            }
            // Decoder for ININFlowSearchRequest
            Decoders.addDecoder(clazz: ININFlowSearchRequest.self) { (source: AnyObject) -> ININFlowSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowSearchRequest()
                instance.searchPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["searchPhrase"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.searchFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["searchFields"])
                instance.facetRequests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetRequests"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                return instance
            }


            // Decoder for [ININFlowState]
            Decoders.addDecoder(clazz: [ININFlowState].self) { (source: AnyObject) -> [ININFlowState] in
                return Decoders.decode(clazz: [ININFlowState].self, source: source)
            }
            // Decoder for ININFlowState
            Decoders.addDecoder(clazz: ININFlowState.self) { (source: AnyObject) -> ININFlowState in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowState()
                instance.stateExecId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateExecId"])
                instance.stateConfigId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateConfigId"])
                instance.stateName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stateName"])
                return instance
            }


            // Decoder for [ININFlowTerminateRequest]
            Decoders.addDecoder(clazz: [ININFlowTerminateRequest].self) { (source: AnyObject) -> [ININFlowTerminateRequest] in
                return Decoders.decode(clazz: [ININFlowTerminateRequest].self, source: source)
            }
            // Decoder for ININFlowTerminateRequest
            Decoders.addDecoder(clazz: ININFlowTerminateRequest.self) { (source: AnyObject) -> ININFlowTerminateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowTerminateRequest()
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }


            // Decoder for [ININFlowUploadResponse]
            Decoders.addDecoder(clazz: [ININFlowUploadResponse].self) { (source: AnyObject) -> [ININFlowUploadResponse] in
                return Decoders.decode(clazz: [ININFlowUploadResponse].self, source: source)
            }
            // Decoder for ININFlowUploadResponse
            Decoders.addDecoder(clazz: ININFlowUploadResponse.self) { (source: AnyObject) -> ININFlowUploadResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowUploadResponse()
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                instance.uploadToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadToken"])
                return instance
            }


            // Decoder for [ININFlowVersion]
            Decoders.addDecoder(clazz: [ININFlowVersion].self) { (source: AnyObject) -> [ININFlowVersion] in
                return Decoders.decode(clazz: [ININFlowVersion].self, source: source)
            }
            // Decoder for ININFlowVersion
            Decoders.addDecoder(clazz: ININFlowVersion.self) { (source: AnyObject) -> ININFlowVersion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowVersion()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.commitVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitVersion"])
                instance.configurationVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["configurationVersion"])
                instance.type = ININFlowVersion.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.createdBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["createdBy"])
                instance.configurationUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["configurationUri"])
                instance.dateCreated = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dateCreated"])
                instance.generationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["generationId"])
                instance.publishResultUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["publishResultUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININFlowVersionConfigMetaData]
            Decoders.addDecoder(clazz: [ININFlowVersionConfigMetaData].self) { (source: AnyObject) -> [ININFlowVersionConfigMetaData] in
                return Decoders.decode(clazz: [ININFlowVersionConfigMetaData].self, source: source)
            }
            // Decoder for ININFlowVersionConfigMetaData
            Decoders.addDecoder(clazz: ININFlowVersionConfigMetaData.self) { (source: AnyObject) -> ININFlowVersionConfigMetaData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowVersionConfigMetaData()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.versionSpecificComment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionSpecificComment"])
                instance.flowDefinitionUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowDefinitionUri"])
                instance.createdByUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["createdByUser"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [ININFlowVersionConfigMetaDataEntityListing]
            Decoders.addDecoder(clazz: [ININFlowVersionConfigMetaDataEntityListing].self) { (source: AnyObject) -> [ININFlowVersionConfigMetaDataEntityListing] in
                return Decoders.decode(clazz: [ININFlowVersionConfigMetaDataEntityListing].self, source: source)
            }
            // Decoder for ININFlowVersionConfigMetaDataEntityListing
            Decoders.addDecoder(clazz: ININFlowVersionConfigMetaDataEntityListing.self) { (source: AnyObject) -> ININFlowVersionConfigMetaDataEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowVersionConfigMetaDataEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININFlowVersionEntityListing]
            Decoders.addDecoder(clazz: [ININFlowVersionEntityListing].self) { (source: AnyObject) -> [ININFlowVersionEntityListing] in
                return Decoders.decode(clazz: [ININFlowVersionEntityListing].self, source: source)
            }
            // Decoder for ININFlowVersionEntityListing
            Decoders.addDecoder(clazz: ININFlowVersionEntityListing.self) { (source: AnyObject) -> ININFlowVersionEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININFlowVersionEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININForm]
            Decoders.addDecoder(clazz: [ININForm].self) { (source: AnyObject) -> [ININForm] in
                return Decoders.decode(clazz: [ININForm].self, source: source)
            }
            // Decoder for ININForm
            Decoders.addDecoder(clazz: ININForm.self) { (source: AnyObject) -> ININForm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININForm()
                instance.controls = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["controls"])
                return instance
            }


            // Decoder for [ININGateway]
            Decoders.addDecoder(clazz: [ININGateway].self) { (source: AnyObject) -> [ININGateway] in
                return Decoders.decode(clazz: [ININGateway].self, source: source)
            }
            // Decoder for ININGateway
            Decoders.addDecoder(clazz: ININGateway.self) { (source: AnyObject) -> ININGateway in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGateway()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"])
                instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"])
                return instance
            }


            // Decoder for [ININGeolocation]
            Decoders.addDecoder(clazz: [ININGeolocation].self) { (source: AnyObject) -> [ININGeolocation] in
                return Decoders.decode(clazz: [ININGeolocation].self, source: source)
            }
            // Decoder for ININGeolocation
            Decoders.addDecoder(clazz: ININGeolocation.self) { (source: AnyObject) -> ININGeolocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGeolocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.primary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["primary"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGeolocationSettings]
            Decoders.addDecoder(clazz: [ININGeolocationSettings].self) { (source: AnyObject) -> [ININGeolocationSettings] in
                return Decoders.decode(clazz: [ININGeolocationSettings].self, source: source)
            }
            // Decoder for ININGeolocationSettings
            Decoders.addDecoder(clazz: ININGeolocationSettings.self) { (source: AnyObject) -> ININGeolocationSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGeolocationSettings()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGistener]
            Decoders.addDecoder(clazz: [ININGistener].self) { (source: AnyObject) -> [ININGistener] in
                return Decoders.decode(clazz: [ININGistener].self, source: source)
            }
            // Decoder for ININGistener
            Decoders.addDecoder(clazz: ININGistener.self) { (source: AnyObject) -> ININGistener in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGistener()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.anyWords = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["anyWords"])
                instance.allWords = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["allWords"])
                instance.excludeWords = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["excludeWords"])
                instance.exactPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exactPhrase"])
                instance.groupTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groupTags"])
                instance.socialAccount = Decoders.decodeOptional(clazz: ININSocialAccount.self, source: sourceDictionary["socialAccount"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGreeting]
            Decoders.addDecoder(clazz: [ININGreeting].self) { (source: AnyObject) -> [ININGreeting] in
                return Decoders.decode(clazz: [ININGreeting].self, source: source)
            }
            // Decoder for ININGreeting
            Decoders.addDecoder(clazz: ININGreeting.self) { (source: AnyObject) -> ININGreeting in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGreeting()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININGreeting.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.ownerType = ININGreeting.ININOwnerType(rawValue: (sourceDictionary["ownerType"] as? String) ?? "") 
                instance.owner = Decoders.decodeOptional(clazz: ININDomainEntity.self, source: sourceDictionary["owner"])
                instance.audioFile = Decoders.decodeOptional(clazz: ININGreetingAudioFile.self, source: sourceDictionary["audioFile"])
                instance.audioTTS = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["audioTTS"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGreetingAudioFile]
            Decoders.addDecoder(clazz: [ININGreetingAudioFile].self) { (source: AnyObject) -> [ININGreetingAudioFile] in
                return Decoders.decode(clazz: [ININGreetingAudioFile].self, source: source)
            }
            // Decoder for ININGreetingAudioFile
            Decoders.addDecoder(clazz: ININGreetingAudioFile.self) { (source: AnyObject) -> ININGreetingAudioFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGreetingAudioFile()
                instance.durationMilliseconds = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["durationMilliseconds"])
                instance.sizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["sizeBytes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGreetingMediaInfo]
            Decoders.addDecoder(clazz: [ININGreetingMediaInfo].self) { (source: AnyObject) -> [ININGreetingMediaInfo] in
                return Decoders.decode(clazz: [ININGreetingMediaInfo].self, source: source)
            }
            // Decoder for ININGreetingMediaInfo
            Decoders.addDecoder(clazz: ININGreetingMediaInfo.self) { (source: AnyObject) -> ININGreetingMediaInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGreetingMediaInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.mediaFileUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaFileUri"])
                instance.mediaImageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaImageUri"])
                return instance
            }


            // Decoder for [ININGreetingOwner]
            Decoders.addDecoder(clazz: [ININGreetingOwner].self) { (source: AnyObject) -> [ININGreetingOwner] in
                return Decoders.decode(clazz: [ININGreetingOwner].self, source: source)
            }
            // Decoder for ININGreetingOwner
            Decoders.addDecoder(clazz: ININGreetingOwner.self) { (source: AnyObject) -> ININGreetingOwner in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGreetingOwner()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGroup]
            Decoders.addDecoder(clazz: [ININGroup].self) { (source: AnyObject) -> [ININGroup] in
                return Decoders.decode(clazz: [ININGroup].self, source: source)
            }
            // Decoder for ININGroup
            Decoders.addDecoder(clazz: ININGroup.self) { (source: AnyObject) -> ININGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroup()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["memberCount"])
                instance.state = ININGroup.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.type = ININGroup.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.rulesVisible = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["rulesVisible"])
                instance.visibility = ININGroup.ININVisibility(rawValue: (sourceDictionary["visibility"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGroupEntityListing]
            Decoders.addDecoder(clazz: [ININGroupEntityListing].self) { (source: AnyObject) -> [ININGroupEntityListing] in
                return Decoders.decode(clazz: [ININGroupEntityListing].self, source: source)
            }
            // Decoder for ININGroupEntityListing
            Decoders.addDecoder(clazz: ININGroupEntityListing.self) { (source: AnyObject) -> ININGroupEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININGroupMembersUpdate]
            Decoders.addDecoder(clazz: [ININGroupMembersUpdate].self) { (source: AnyObject) -> [ININGroupMembersUpdate] in
                return Decoders.decode(clazz: [ININGroupMembersUpdate].self, source: source)
            }
            // Decoder for ININGroupMembersUpdate
            Decoders.addDecoder(clazz: ININGroupMembersUpdate.self) { (source: AnyObject) -> ININGroupMembersUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupMembersUpdate()
                instance.memberIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["memberIds"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                return instance
            }


            // Decoder for [ININGroupSearchCriteria]
            Decoders.addDecoder(clazz: [ININGroupSearchCriteria].self) { (source: AnyObject) -> [ININGroupSearchCriteria] in
                return Decoders.decode(clazz: [ININGroupSearchCriteria].self, source: source)
            }
            // Decoder for ININGroupSearchCriteria
            Decoders.addDecoder(clazz: ININGroupSearchCriteria.self) { (source: AnyObject) -> ININGroupSearchCriteria in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupSearchCriteria()
                instance.endValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endValue"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.startValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startValue"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._operator = ININGroupSearchCriteria.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group"])
                instance.type = ININGroupSearchCriteria.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININGroupSearchRequest]
            Decoders.addDecoder(clazz: [ININGroupSearchRequest].self) { (source: AnyObject) -> [ININGroupSearchRequest] in
                return Decoders.decode(clazz: [ININGroupSearchRequest].self, source: source)
            }
            // Decoder for ININGroupSearchRequest
            Decoders.addDecoder(clazz: ININGroupSearchRequest.self) { (source: AnyObject) -> ININGroupSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupSearchRequest()
                instance.sortOrder = ININGroupSearchRequest.ININSortOrder(rawValue: (sourceDictionary["sortOrder"] as? String) ?? "") 
                instance.sortBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortBy"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.returnFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["returnFields"])
                instance.expand = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["expand"])
                instance.query = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [ININGroupTag]
            Decoders.addDecoder(clazz: [ININGroupTag].self) { (source: AnyObject) -> [ININGroupTag] in
                return Decoders.decode(clazz: [ININGroupTag].self, source: source)
            }
            // Decoder for ININGroupTag
            Decoders.addDecoder(clazz: ININGroupTag.self) { (source: AnyObject) -> ININGroupTag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupTag()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.type = ININGroupTag.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININGroupsSearchResponse]
            Decoders.addDecoder(clazz: [ININGroupsSearchResponse].self) { (source: AnyObject) -> [ININGroupsSearchResponse] in
                return Decoders.decode(clazz: [ININGroupsSearchResponse].self, source: source)
            }
            // Decoder for ININGroupsSearchResponse
            Decoders.addDecoder(clazz: ININGroupsSearchResponse.self) { (source: AnyObject) -> ININGroupsSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININGroupsSearchResponse()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.previousPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousPage"])
                instance.currentPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPage"])
                instance.nextPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextPage"])
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININHIPAAConfig]
            Decoders.addDecoder(clazz: [ININHIPAAConfig].self) { (source: AnyObject) -> [ININHIPAAConfig] in
                return Decoders.decode(clazz: [ININHIPAAConfig].self, source: source)
            }
            // Decoder for ININHIPAAConfig
            Decoders.addDecoder(clazz: ININHIPAAConfig.self) { (source: AnyObject) -> ININHIPAAConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININHIPAAConfig()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.enableIdleTokenTimeout = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enableIdleTokenTimeout"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININHardwareRate]
            Decoders.addDecoder(clazz: [ININHardwareRate].self) { (source: AnyObject) -> [ININHardwareRate] in
                return Decoders.decode(clazz: [ININHardwareRate].self, source: source)
            }
            // Decoder for ININHardwareRate
            Decoders.addDecoder(clazz: ININHardwareRate.self) { (source: AnyObject) -> ININHardwareRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININHardwareRate()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.partNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["partNumber"])
                instance.rate = Decoders.decodeOptional(clazz: ININRate.self, source: sourceDictionary["rate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININHardwareRateListing]
            Decoders.addDecoder(clazz: [ININHardwareRateListing].self) { (source: AnyObject) -> [ININHardwareRateListing] in
                return Decoders.decode(clazz: [ININHardwareRateListing].self, source: source)
            }
            // Decoder for ININHardwareRateListing
            Decoders.addDecoder(clazz: ININHardwareRateListing.self) { (source: AnyObject) -> ININHardwareRateListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININHardwareRateListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININHealthCheckInfo]
            Decoders.addDecoder(clazz: [ININHealthCheckInfo].self) { (source: AnyObject) -> [ININHealthCheckInfo] in
                return Decoders.decode(clazz: [ININHealthCheckInfo].self, source: source)
            }
            // Decoder for ININHealthCheckInfo
            Decoders.addDecoder(clazz: ININHealthCheckInfo.self) { (source: AnyObject) -> ININHealthCheckInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININHealthCheckInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.buildTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Build-Time"])
                instance.buildVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Build-Version"])
                instance.implementationVersion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Implementation-Version"])
                instance.status = ININHealthCheckInfo.ININStatus(rawValue: (sourceDictionary["Status"] as? String) ?? "") 
                instance.pingMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["Ping-Ms"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["Date"])
                return instance
            }


            // Decoder for [ININIVR]
            Decoders.addDecoder(clazz: [ININIVR].self) { (source: AnyObject) -> [ININIVR] in
                return Decoders.decode(clazz: [ININIVR].self, source: source)
            }
            // Decoder for ININIVR
            Decoders.addDecoder(clazz: ININIVR.self) { (source: AnyObject) -> ININIVR in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIVR()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININIVR.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.ivrUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ivrUri"])
                instance.dnis = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dnis"])
                instance.flowId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["flowId"])
                instance.scheduleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scheduleId"])
                instance.openHoursFlow = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["openHoursFlow"])
                instance.closedHoursFlow = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["closedHoursFlow"])
                instance.scheduleGroup = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["scheduleGroup"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININIVREntityListing]
            Decoders.addDecoder(clazz: [ININIVREntityListing].self) { (source: AnyObject) -> [ININIVREntityListing] in
                return Decoders.decode(clazz: [ININIVREntityListing].self, source: source)
            }
            // Decoder for ININIVREntityListing
            Decoders.addDecoder(clazz: ININIVREntityListing.self) { (source: AnyObject) -> ININIVREntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIVREntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININImportStatus]
            Decoders.addDecoder(clazz: [ININImportStatus].self) { (source: AnyObject) -> [ININImportStatus] in
                return Decoders.decode(clazz: [ININImportStatus].self, source: source)
            }
            // Decoder for ININImportStatus
            Decoders.addDecoder(clazz: ININImportStatus.self) { (source: AnyObject) -> ININImportStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININImportStatus()
                instance.state = ININImportStatus.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.totalRecords = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalRecords"])
                instance.completedRecords = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["completedRecords"])
                instance.percentComplete = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["percentComplete"])
                instance.failureReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["failureReason"])
                return instance
            }


            // Decoder for [ININInboundDomain]
            Decoders.addDecoder(clazz: [ININInboundDomain].self) { (source: AnyObject) -> [ININInboundDomain] in
                return Decoders.decode(clazz: [ININInboundDomain].self, source: source)
            }
            // Decoder for ININInboundDomain
            Decoders.addDecoder(clazz: ININInboundDomain.self) { (source: AnyObject) -> ININInboundDomain in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInboundDomain()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.mxRecordStatus = ININInboundDomain.ININMxRecordStatus(rawValue: (sourceDictionary["mxRecordStatus"] as? String) ?? "") 
                instance.subDomain = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["subDomain"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININInboundDomainEntityListing]
            Decoders.addDecoder(clazz: [ININInboundDomainEntityListing].self) { (source: AnyObject) -> [ININInboundDomainEntityListing] in
                return Decoders.decode(clazz: [ININInboundDomainEntityListing].self, source: source)
            }
            // Decoder for ININInboundDomainEntityListing
            Decoders.addDecoder(clazz: ININInboundDomainEntityListing.self) { (source: AnyObject) -> ININInboundDomainEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInboundDomainEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININInboundRoute]
            Decoders.addDecoder(clazz: [ININInboundRoute].self) { (source: AnyObject) -> [ININInboundRoute] in
                return Decoders.decode(clazz: [ININInboundRoute].self, source: source)
            }
            // Decoder for ININInboundRoute
            Decoders.addDecoder(clazz: ININInboundRoute.self) { (source: AnyObject) -> ININInboundRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInboundRoute()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.pattern = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pattern"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.skills = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skills"])
                instance.language = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["language"])
                instance.fromName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fromName"])
                instance.fromEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fromEmail"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININInboundRouteEntityListing]
            Decoders.addDecoder(clazz: [ININInboundRouteEntityListing].self) { (source: AnyObject) -> [ININInboundRouteEntityListing] in
                return Decoders.decode(clazz: [ININInboundRouteEntityListing].self, source: source)
            }
            // Decoder for ININInboundRouteEntityListing
            Decoders.addDecoder(clazz: ININInboundRouteEntityListing.self) { (source: AnyObject) -> ININInboundRouteEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInboundRouteEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININIndexedTransform]
            Decoders.addDecoder(clazz: [ININIndexedTransform].self) { (source: AnyObject) -> [ININIndexedTransform] in
                return Decoders.decode(clazz: [ININIndexedTransform].self, source: source)
            }
            // Decoder for ININIndexedTransform
            Decoders.addDecoder(clazz: ININIndexedTransform.self) { (source: AnyObject) -> ININIndexedTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIndexedTransform()
                instance.replaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["replaces"])
                instance.entityPath = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entityPath"])
                instance.index = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["index"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININInitiateScreenRecording]
            Decoders.addDecoder(clazz: [ININInitiateScreenRecording].self) { (source: AnyObject) -> [ININInitiateScreenRecording] in
                return Decoders.decode(clazz: [ININInitiateScreenRecording].self, source: source)
            }
            // Decoder for ININInitiateScreenRecording
            Decoders.addDecoder(clazz: ININInitiateScreenRecording.self) { (source: AnyObject) -> ININInitiateScreenRecording in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInitiateScreenRecording()
                instance.recordACW = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["recordACW"])
                instance.archiveRetention = Decoders.decodeOptional(clazz: ININArchiveRetention.self, source: sourceDictionary["archiveRetention"])
                instance.deleteRetention = Decoders.decodeOptional(clazz: ININDeleteRetention.self, source: sourceDictionary["deleteRetention"])
                return instance
            }


            // Decoder for [ININIntegration]
            Decoders.addDecoder(clazz: [ININIntegration].self) { (source: AnyObject) -> [ININIntegration] in
                return Decoders.decode(clazz: [ININIntegration].self, source: source)
            }
            // Decoder for ININIntegration
            Decoders.addDecoder(clazz: ININIntegration.self) { (source: AnyObject) -> ININIntegration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegration()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.integrationType = Decoders.decodeOptional(clazz: ININIntegrationType.self, source: sourceDictionary["integrationType"])
                instance.state = ININIntegration.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.config = Decoders.decodeOptional(clazz: ININIntegrationConfiguration.self, source: sourceDictionary["config"])
                instance.lastStatus = Decoders.decodeOptional(clazz: ININIntegrationStatusInfo.self, source: sourceDictionary["lastStatus"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININIntegrationConfiguration]
            Decoders.addDecoder(clazz: [ININIntegrationConfiguration].self) { (source: AnyObject) -> [ININIntegrationConfiguration] in
                return Decoders.decode(clazz: [ININIntegrationConfiguration].self, source: source)
            }
            // Decoder for ININIntegrationConfiguration
            Decoders.addDecoder(clazz: ININIntegrationConfiguration.self) { (source: AnyObject) -> ININIntegrationConfiguration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegrationConfiguration()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.propertiesSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["propertiesSchemaUri"])
                instance.advancedSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["advancedSchemaUri"])
                instance.properties = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["properties"])
                instance.advanced = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["advanced"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININIntegrationEntityListing]
            Decoders.addDecoder(clazz: [ININIntegrationEntityListing].self) { (source: AnyObject) -> [ININIntegrationEntityListing] in
                return Decoders.decode(clazz: [ININIntegrationEntityListing].self, source: source)
            }
            // Decoder for ININIntegrationEntityListing
            Decoders.addDecoder(clazz: ININIntegrationEntityListing.self) { (source: AnyObject) -> ININIntegrationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegrationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININIntegrationStatusInfo]
            Decoders.addDecoder(clazz: [ININIntegrationStatusInfo].self) { (source: AnyObject) -> [ININIntegrationStatusInfo] in
                return Decoders.decode(clazz: [ININIntegrationStatusInfo].self, source: source)
            }
            // Decoder for ININIntegrationStatusInfo
            Decoders.addDecoder(clazz: ININIntegrationStatusInfo.self) { (source: AnyObject) -> ININIntegrationStatusInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegrationStatusInfo()
                instance._internal = ININIntegrationStatusInfo.ININInternal(rawValue: (sourceDictionary["internal"] as? String) ?? "") 
                instance.effective = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effective"])
                instance.detail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["detail"])
                instance.lastUpdated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastUpdated"])
                return instance
            }


            // Decoder for [ININIntegrationType]
            Decoders.addDecoder(clazz: [ININIntegrationType].self) { (source: AnyObject) -> [ININIntegrationType] in
                return Decoders.decode(clazz: [ININIntegrationType].self, source: source)
            }
            // Decoder for ININIntegrationType
            Decoders.addDecoder(clazz: ININIntegrationType.self) { (source: AnyObject) -> ININIntegrationType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegrationType()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.provider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["provider"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.configPropertiesSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["configPropertiesSchemaUri"])
                instance.configAdvancedSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["configAdvancedSchemaUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININIntegrationTypeEntityListing]
            Decoders.addDecoder(clazz: [ININIntegrationTypeEntityListing].self) { (source: AnyObject) -> [ININIntegrationTypeEntityListing] in
                return Decoders.decode(clazz: [ININIntegrationTypeEntityListing].self, source: source)
            }
            // Decoder for ININIntegrationTypeEntityListing
            Decoders.addDecoder(clazz: ININIntegrationTypeEntityListing.self) { (source: AnyObject) -> ININIntegrationTypeEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININIntegrationTypeEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININInteractionStatsAlert]
            Decoders.addDecoder(clazz: [ININInteractionStatsAlert].self) { (source: AnyObject) -> [ININInteractionStatsAlert] in
                return Decoders.decode(clazz: [ININInteractionStatsAlert].self, source: source)
            }
            // Decoder for ININInteractionStatsAlert
            Decoders.addDecoder(clazz: ININInteractionStatsAlert.self) { (source: AnyObject) -> ININInteractionStatsAlert in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInteractionStatsAlert()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dimension = ININInteractionStatsAlert.ININDimension(rawValue: (sourceDictionary["dimension"] as? String) ?? "") 
                instance.dimensionValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimensionValue"])
                instance.metric = ININInteractionStatsAlert.ININMetric(rawValue: (sourceDictionary["metric"] as? String) ?? "") 
                instance.mediaType = ININInteractionStatsAlert.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                instance.numericRange = ININInteractionStatsAlert.ININNumericRange(rawValue: (sourceDictionary["numericRange"] as? String) ?? "") 
                instance.statistic = ININInteractionStatsAlert.ININStatistic(rawValue: (sourceDictionary["statistic"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.ruleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ruleId"])
                instance.unread = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["unread"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.notificationUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notificationUsers"])
                instance.alertTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alertTypes"])
                instance.ruleUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ruleUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININInteractionStatsAlertContainer]
            Decoders.addDecoder(clazz: [ININInteractionStatsAlertContainer].self) { (source: AnyObject) -> [ININInteractionStatsAlertContainer] in
                return Decoders.decode(clazz: [ININInteractionStatsAlertContainer].self, source: source)
            }
            // Decoder for ININInteractionStatsAlertContainer
            Decoders.addDecoder(clazz: ININInteractionStatsAlertContainer.self) { (source: AnyObject) -> ININInteractionStatsAlertContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInteractionStatsAlertContainer()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININInteractionStatsRule]
            Decoders.addDecoder(clazz: [ININInteractionStatsRule].self) { (source: AnyObject) -> [ININInteractionStatsRule] in
                return Decoders.decode(clazz: [ININInteractionStatsRule].self, source: source)
            }
            // Decoder for ININInteractionStatsRule
            Decoders.addDecoder(clazz: ININInteractionStatsRule.self) { (source: AnyObject) -> ININInteractionStatsRule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInteractionStatsRule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dimension = ININInteractionStatsRule.ININDimension(rawValue: (sourceDictionary["dimension"] as? String) ?? "") 
                instance.dimensionValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimensionValue"])
                instance.metric = ININInteractionStatsRule.ININMetric(rawValue: (sourceDictionary["metric"] as? String) ?? "") 
                instance.mediaType = ININInteractionStatsRule.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                instance.numericRange = ININInteractionStatsRule.ININNumericRange(rawValue: (sourceDictionary["numericRange"] as? String) ?? "") 
                instance.statistic = ININInteractionStatsRule.ININStatistic(rawValue: (sourceDictionary["statistic"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.inAlarm = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inAlarm"])
                instance.notificationUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["notificationUsers"])
                instance.alertTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alertTypes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININInteractionStatsRuleContainer]
            Decoders.addDecoder(clazz: [ININInteractionStatsRuleContainer].self) { (source: AnyObject) -> [ININInteractionStatsRuleContainer] in
                return Decoders.decode(clazz: [ININInteractionStatsRuleContainer].self, source: source)
            }
            // Decoder for ININInteractionStatsRuleContainer
            Decoders.addDecoder(clazz: ININInteractionStatsRuleContainer.self) { (source: AnyObject) -> ININInteractionStatsRuleContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInteractionStatsRuleContainer()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININInvoice]
            Decoders.addDecoder(clazz: [ININInvoice].self) { (source: AnyObject) -> [ININInvoice] in
                return Decoders.decode(clazz: [ININInvoice].self, source: source)
            }
            // Decoder for ININInvoice
            Decoders.addDecoder(clazz: ININInvoice.self) { (source: AnyObject) -> ININInvoice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININInvoice()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.invoiceNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["invoiceNumber"])
                instance.invoiceDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["invoiceDate"])
                instance.dueDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dueDate"])
                instance.amount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amount"])
                instance.balance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["balance"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININJsonNode]
            Decoders.addDecoder(clazz: [ININJsonNode].self) { (source: AnyObject) -> [ININJsonNode] in
                return Decoders.decode(clazz: [ININJsonNode].self, source: source)
            }
            // Decoder for ININJsonNode
            Decoders.addDecoder(clazz: ININJsonNode.self) { (source: AnyObject) -> ININJsonNode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININJsonNode()
                instance.nodeType = ININJsonNode.ININNodeType(rawValue: (sourceDictionary["nodeType"] as? String) ?? "") 
                instance.float = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["float"])
                instance.boolean = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["boolean"])
                instance.number = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["number"])
                instance.object = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["object"])
                instance.valueNode = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["valueNode"])
                instance.containerNode = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["containerNode"])
                instance.missingNode = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["missingNode"])
                instance.pojo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pojo"])
                instance.integralNumber = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["integralNumber"])
                instance.floatingPointNumber = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["floatingPointNumber"])
                instance.short = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["short"])
                instance.int = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["int"])
                instance.long = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["long"])
                instance.double = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["double"])
                instance.bigDecimal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["bigDecimal"])
                instance.bigInteger = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["bigInteger"])
                instance.textual = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["textual"])
                instance.binary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["binary"])
                instance.array = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["array"])
                instance.null = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["null"])
                return instance
            }


            // Decoder for [ININJsonNodeSearchResponse]
            Decoders.addDecoder(clazz: [ININJsonNodeSearchResponse].self) { (source: AnyObject) -> [ININJsonNodeSearchResponse] in
                return Decoders.decode(clazz: [ININJsonNodeSearchResponse].self, source: source)
            }
            // Decoder for ININJsonNodeSearchResponse
            Decoders.addDecoder(clazz: ININJsonNodeSearchResponse.self) { (source: AnyObject) -> ININJsonNodeSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININJsonNodeSearchResponse()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.previousPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousPage"])
                instance.currentPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPage"])
                instance.nextPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextPage"])
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.results = Decoders.decodeOptional(clazz: ININJsonNode.self, source: sourceDictionary["results"])
                instance.aggregations = Decoders.decodeOptional(clazz: ININJsonNode.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININKeyRotationSchedule]
            Decoders.addDecoder(clazz: [ININKeyRotationSchedule].self) { (source: AnyObject) -> [ININKeyRotationSchedule] in
                return Decoders.decode(clazz: [ININKeyRotationSchedule].self, source: source)
            }
            // Decoder for ININKeyRotationSchedule
            Decoders.addDecoder(clazz: ININKeyRotationSchedule.self) { (source: AnyObject) -> ININKeyRotationSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININKeyRotationSchedule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.period = ININKeyRotationSchedule.ININPeriod(rawValue: (sourceDictionary["period"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININKeyword]
            Decoders.addDecoder(clazz: [ININKeyword].self) { (source: AnyObject) -> [ININKeyword] in
                return Decoders.decode(clazz: [ININKeyword].self, source: source)
            }
            // Decoder for ININKeyword
            Decoders.addDecoder(clazz: ININKeyword.self) { (source: AnyObject) -> ININKeyword in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININKeyword()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phrase"])
                instance.confidence = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["confidence"])
                instance.agentScoreModifier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["agentScoreModifier"])
                instance.customerScoreModifier = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["customerScoreModifier"])
                instance.alternateSpellings = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alternateSpellings"])
                return instance
            }


            // Decoder for [ININKeywordSet]
            Decoders.addDecoder(clazz: [ININKeywordSet].self) { (source: AnyObject) -> [ININKeywordSet] in
                return Decoders.decode(clazz: [ININKeywordSet].self, source: source)
            }
            // Decoder for ININKeywordSet
            Decoders.addDecoder(clazz: ININKeywordSet.self) { (source: AnyObject) -> ININKeywordSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININKeywordSet()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.queue = Decoders.decodeOptional(clazz: ININQueue.self, source: sourceDictionary["queue"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                instance.agents = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agents"])
                instance.keywords = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["keywords"])
                instance.participantPurposes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participantPurposes"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININKeywordSetEntityListing]
            Decoders.addDecoder(clazz: [ININKeywordSetEntityListing].self) { (source: AnyObject) -> [ININKeywordSetEntityListing] in
                return Decoders.decode(clazz: [ININKeywordSetEntityListing].self, source: source)
            }
            // Decoder for ININKeywordSetEntityListing
            Decoders.addDecoder(clazz: ININKeywordSetEntityListing.self) { (source: AnyObject) -> ININKeywordSetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININKeywordSetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLanguage]
            Decoders.addDecoder(clazz: [ININLanguage].self) { (source: AnyObject) -> [ININLanguage] in
                return Decoders.decode(clazz: [ININLanguage].self, source: source)
            }
            // Decoder for ININLanguage
            Decoders.addDecoder(clazz: ININLanguage.self) { (source: AnyObject) -> ININLanguage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLanguage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.state = ININLanguage.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININLanguageEntityListing]
            Decoders.addDecoder(clazz: [ININLanguageEntityListing].self) { (source: AnyObject) -> [ININLanguageEntityListing] in
                return Decoders.decode(clazz: [ININLanguageEntityListing].self, source: source)
            }
            // Decoder for ININLanguageEntityListing
            Decoders.addDecoder(clazz: ININLanguageEntityListing.self) { (source: AnyObject) -> ININLanguageEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLanguageEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLibrary]
            Decoders.addDecoder(clazz: [ININLibrary].self) { (source: AnyObject) -> [ININLibrary] in
                return Decoders.decode(clazz: [ININLibrary].self, source: source)
            }
            // Decoder for ININLibrary
            Decoders.addDecoder(clazz: ININLibrary.self) { (source: AnyObject) -> ININLibrary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLibrary()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["createdBy"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININLibraryEntityListing]
            Decoders.addDecoder(clazz: [ININLibraryEntityListing].self) { (source: AnyObject) -> [ININLibraryEntityListing] in
                return Decoders.decode(clazz: [ININLibraryEntityListing].self, source: source)
            }
            // Decoder for ININLibraryEntityListing
            Decoders.addDecoder(clazz: ININLibraryEntityListing.self) { (source: AnyObject) -> ININLibraryEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLibraryEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLicense]
            Decoders.addDecoder(clazz: [ININLicense].self) { (source: AnyObject) -> [ININLicense] in
                return Decoders.decode(clazz: [ININLicense].self, source: source)
            }
            // Decoder for ININLicense
            Decoders.addDecoder(clazz: ININLicense.self) { (source: AnyObject) -> ININLicense in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLicense()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININLicensesByPermission]
            Decoders.addDecoder(clazz: [ININLicensesByPermission].self) { (source: AnyObject) -> [ININLicensesByPermission] in
                return Decoders.decode(clazz: [ININLicensesByPermission].self, source: source)
            }
            // Decoder for ININLicensesByPermission
            Decoders.addDecoder(clazz: ININLicensesByPermission.self) { (source: AnyObject) -> ININLicensesByPermission in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLicensesByPermission()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.licenses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["licenses"])
                return instance
            }


            // Decoder for [ININLine]
            Decoders.addDecoder(clazz: [ININLine].self) { (source: AnyObject) -> [ININLine] in
                return Decoders.decode(clazz: [ININLine].self, source: source)
            }
            // Decoder for ININLine
            Decoders.addDecoder(clazz: ININLine.self) { (source: AnyObject) -> ININLine in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLine()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININLine.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edgeGroup"])
                instance.template = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["template"])
                instance.site = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["site"])
                instance.lineBaseSettings = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["lineBaseSettings"])
                instance.primaryEdge = Decoders.decodeOptional(clazz: ININEdge.self, source: sourceDictionary["primaryEdge"])
                instance.secondaryEdge = Decoders.decodeOptional(clazz: ININEdge.self, source: sourceDictionary["secondaryEdge"])
                instance.loggedInUser = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["loggedInUser"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININLineBase]
            Decoders.addDecoder(clazz: [ININLineBase].self) { (source: AnyObject) -> [ININLineBase] in
                return Decoders.decode(clazz: [ININLineBase].self, source: source)
            }
            // Decoder for ININLineBase
            Decoders.addDecoder(clazz: ININLineBase.self) { (source: AnyObject) -> ININLineBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLineBase()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.lineMetaBase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["lineMetaBase"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININLineBaseEntityListing]
            Decoders.addDecoder(clazz: [ININLineBaseEntityListing].self) { (source: AnyObject) -> [ININLineBaseEntityListing] in
                return Decoders.decode(clazz: [ININLineBaseEntityListing].self, source: source)
            }
            // Decoder for ININLineBaseEntityListing
            Decoders.addDecoder(clazz: ININLineBaseEntityListing.self) { (source: AnyObject) -> ININLineBaseEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLineBaseEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLineEntityListing]
            Decoders.addDecoder(clazz: [ININLineEntityListing].self) { (source: AnyObject) -> [ININLineEntityListing] in
                return Decoders.decode(clazz: [ININLineEntityListing].self, source: source)
            }
            // Decoder for ININLineEntityListing
            Decoders.addDecoder(clazz: ININLineEntityListing.self) { (source: AnyObject) -> ININLineEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLineEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLineStatus]
            Decoders.addDecoder(clazz: [ININLineStatus].self) { (source: AnyObject) -> [ININLineStatus] in
                return Decoders.decode(clazz: [ININLineStatus].self, source: source)
            }
            // Decoder for ININLineStatus
            Decoders.addDecoder(clazz: ININLineStatus.self) { (source: AnyObject) -> ININLineStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLineStatus()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.reachable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reachable"])
                instance.addressOfRecord = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressOfRecord"])
                instance.contactAddresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["contactAddresses"])
                instance.reachableStateTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["reachableStateTime"])
                return instance
            }


            // Decoder for [ININLinkedEntityListingFlowDetails]
            Decoders.addDecoder(clazz: [ININLinkedEntityListingFlowDetails].self) { (source: AnyObject) -> [ININLinkedEntityListingFlowDetails] in
                return Decoders.decode(clazz: [ININLinkedEntityListingFlowDetails].self, source: source)
            }
            // Decoder for ININLinkedEntityListingFlowDetails
            Decoders.addDecoder(clazz: ININLinkedEntityListingFlowDetails.self) { (source: AnyObject) -> ININLinkedEntityListingFlowDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLinkedEntityListingFlowDetails()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLinkedEntityListingWorkItemSearchDetails]
            Decoders.addDecoder(clazz: [ININLinkedEntityListingWorkItemSearchDetails].self) { (source: AnyObject) -> [ININLinkedEntityListingWorkItemSearchDetails] in
                return Decoders.decode(clazz: [ININLinkedEntityListingWorkItemSearchDetails].self, source: source)
            }
            // Decoder for ININLinkedEntityListingWorkItemSearchDetails
            Decoders.addDecoder(clazz: ININLinkedEntityListingWorkItemSearchDetails.self) { (source: AnyObject) -> ININLinkedEntityListingWorkItemSearchDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLinkedEntityListingWorkItemSearchDetails()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININLocation]
            Decoders.addDecoder(clazz: [ININLocation].self) { (source: AnyObject) -> [ININLocation] in
                return Decoders.decode(clazz: [ININLocation].self, source: source)
            }
            // Decoder for ININLocation
            Decoders.addDecoder(clazz: ININLocation.self) { (source: AnyObject) -> ININLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: ININLocationAddress.self, source: sourceDictionary["address"])
                instance.addressVerified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["addressVerified"])
                instance.emergencyNumber = Decoders.decodeOptional(clazz: ININLocationEmergencyNumber.self, source: sourceDictionary["emergencyNumber"])
                instance.state = ININLocation.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININLocationAddress]
            Decoders.addDecoder(clazz: [ININLocationAddress].self) { (source: AnyObject) -> [ININLocationAddress] in
                return Decoders.decode(clazz: [ININLocationAddress].self, source: source)
            }
            // Decoder for ININLocationAddress
            Decoders.addDecoder(clazz: ININLocationAddress.self) { (source: AnyObject) -> ININLocationAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocationAddress()
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.countryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryName"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.street1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street1"])
                instance.street2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street2"])
                instance.zipcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipcode"])
                return instance
            }


            // Decoder for [ININLocationEmergencyNumber]
            Decoders.addDecoder(clazz: [ININLocationEmergencyNumber].self) { (source: AnyObject) -> [ININLocationEmergencyNumber] in
                return Decoders.decode(clazz: [ININLocationEmergencyNumber].self, source: source)
            }
            // Decoder for ININLocationEmergencyNumber
            Decoders.addDecoder(clazz: ININLocationEmergencyNumber.self) { (source: AnyObject) -> ININLocationEmergencyNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocationEmergencyNumber()
                instance.e164 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["e164"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                instance.type = ININLocationEmergencyNumber.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININLocationSearchCriteria]
            Decoders.addDecoder(clazz: [ININLocationSearchCriteria].self) { (source: AnyObject) -> [ININLocationSearchCriteria] in
                return Decoders.decode(clazz: [ININLocationSearchCriteria].self, source: source)
            }
            // Decoder for ININLocationSearchCriteria
            Decoders.addDecoder(clazz: ININLocationSearchCriteria.self) { (source: AnyObject) -> ININLocationSearchCriteria in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocationSearchCriteria()
                instance.endValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endValue"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.startValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startValue"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._operator = ININLocationSearchCriteria.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group"])
                instance.type = ININLocationSearchCriteria.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININLocationSearchRequest]
            Decoders.addDecoder(clazz: [ININLocationSearchRequest].self) { (source: AnyObject) -> [ININLocationSearchRequest] in
                return Decoders.decode(clazz: [ININLocationSearchRequest].self, source: source)
            }
            // Decoder for ININLocationSearchRequest
            Decoders.addDecoder(clazz: ININLocationSearchRequest.self) { (source: AnyObject) -> ININLocationSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocationSearchRequest()
                instance.sortOrder = ININLocationSearchRequest.ININSortOrder(rawValue: (sourceDictionary["sortOrder"] as? String) ?? "") 
                instance.sortBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortBy"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.returnFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["returnFields"])
                instance.expand = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["expand"])
                instance.query = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [ININLocationsSearchResponse]
            Decoders.addDecoder(clazz: [ININLocationsSearchResponse].self) { (source: AnyObject) -> [ININLocationsSearchResponse] in
                return Decoders.decode(clazz: [ININLocationsSearchResponse].self, source: source)
            }
            // Decoder for ININLocationsSearchResponse
            Decoders.addDecoder(clazz: ININLocationsSearchResponse.self) { (source: AnyObject) -> ININLocationsSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLocationsSearchResponse()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.previousPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousPage"])
                instance.currentPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPage"])
                instance.nextPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextPage"])
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININLockInfo]
            Decoders.addDecoder(clazz: [ININLockInfo].self) { (source: AnyObject) -> [ININLockInfo] in
                return Decoders.decode(clazz: [ININLockInfo].self, source: source)
            }
            // Decoder for ININLockInfo
            Decoders.addDecoder(clazz: ININLockInfo.self) { (source: AnyObject) -> ININLockInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLockInfo()
                instance.lockedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["lockedBy"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateExpires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateExpires"])
                instance.action = ININLockInfo.ININAction(rawValue: (sourceDictionary["action"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININLogicalInterfaceEntityListing]
            Decoders.addDecoder(clazz: [ININLogicalInterfaceEntityListing].self) { (source: AnyObject) -> [ININLogicalInterfaceEntityListing] in
                return Decoders.decode(clazz: [ININLogicalInterfaceEntityListing].self, source: source)
            }
            // Decoder for ININLogicalInterfaceEntityListing
            Decoders.addDecoder(clazz: ININLogicalInterfaceEntityListing.self) { (source: AnyObject) -> ININLogicalInterfaceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININLogicalInterfaceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININManagementUnit]
            Decoders.addDecoder(clazz: [ININManagementUnit].self) { (source: AnyObject) -> [ININManagementUnit] in
                return Decoders.decode(clazz: [ININManagementUnit].self, source: source)
            }
            // Decoder for ININManagementUnit
            Decoders.addDecoder(clazz: ININManagementUnit.self) { (source: AnyObject) -> ININManagementUnit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININManagementUnit()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.startDayOfWeek = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startDayOfWeek"])
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININManagementUnitTimezone]
            Decoders.addDecoder(clazz: [ININManagementUnitTimezone].self) { (source: AnyObject) -> [ININManagementUnitTimezone] in
                return Decoders.decode(clazz: [ININManagementUnitTimezone].self, source: source)
            }
            // Decoder for ININManagementUnitTimezone
            Decoders.addDecoder(clazz: ININManagementUnitTimezone.self) { (source: AnyObject) -> ININManagementUnitTimezone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININManagementUnitTimezone()
                instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"])
                return instance
            }


            // Decoder for [ININMaxParticipants]
            Decoders.addDecoder(clazz: [ININMaxParticipants].self) { (source: AnyObject) -> [ININMaxParticipants] in
                return Decoders.decode(clazz: [ININMaxParticipants].self, source: source)
            }
            // Decoder for ININMaxParticipants
            Decoders.addDecoder(clazz: ININMaxParticipants.self) { (source: AnyObject) -> ININMaxParticipants in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMaxParticipants()
                instance.maxParticipants = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxParticipants"])
                return instance
            }


            // Decoder for [ININMediaParticipantRequest]
            Decoders.addDecoder(clazz: [ININMediaParticipantRequest].self) { (source: AnyObject) -> [ININMediaParticipantRequest] in
                return Decoders.decode(clazz: [ININMediaParticipantRequest].self, source: source)
            }
            // Decoder for ININMediaParticipantRequest
            Decoders.addDecoder(clazz: ININMediaParticipantRequest.self) { (source: AnyObject) -> ININMediaParticipantRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaParticipantRequest()
                instance.wrapup = Decoders.decodeOptional(clazz: ININWrapup.self, source: sourceDictionary["wrapup"])
                instance.state = ININMediaParticipantRequest.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.recording = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["recording"])
                instance.muted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["muted"])
                instance.confined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["confined"])
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                return instance
            }


            // Decoder for [ININMediaPolicies]
            Decoders.addDecoder(clazz: [ININMediaPolicies].self) { (source: AnyObject) -> [ININMediaPolicies] in
                return Decoders.decode(clazz: [ININMediaPolicies].self, source: source)
            }
            // Decoder for ININMediaPolicies
            Decoders.addDecoder(clazz: ININMediaPolicies.self) { (source: AnyObject) -> ININMediaPolicies in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaPolicies()
                instance.callPolicy = Decoders.decodeOptional(clazz: ININCallMediaPolicy.self, source: sourceDictionary["callPolicy"])
                instance.chatPolicy = Decoders.decodeOptional(clazz: ININChatMediaPolicy.self, source: sourceDictionary["chatPolicy"])
                instance.emailPolicy = Decoders.decodeOptional(clazz: ININEmailMediaPolicy.self, source: sourceDictionary["emailPolicy"])
                return instance
            }


            // Decoder for [ININMediaResult]
            Decoders.addDecoder(clazz: [ININMediaResult].self) { (source: AnyObject) -> [ININMediaResult] in
                return Decoders.decode(clazz: [ININMediaResult].self, source: source)
            }
            // Decoder for ININMediaResult
            Decoders.addDecoder(clazz: ININMediaResult.self) { (source: AnyObject) -> ININMediaResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaResult()
                instance.mediaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaUri"])
                instance.waveformData = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["waveformData"])
                return instance
            }


            // Decoder for [ININMediaSetting]
            Decoders.addDecoder(clazz: [ININMediaSetting].self) { (source: AnyObject) -> [ININMediaSetting] in
                return Decoders.decode(clazz: [ININMediaSetting].self, source: source)
            }
            // Decoder for ININMediaSetting
            Decoders.addDecoder(clazz: ININMediaSetting.self) { (source: AnyObject) -> ININMediaSetting in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaSetting()
                instance.alertingTimeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alertingTimeoutSeconds"])
                instance.serviceLevel = Decoders.decodeOptional(clazz: ININServiceLevel.self, source: sourceDictionary["serviceLevel"])
                return instance
            }


            // Decoder for [ININMediaSummary]
            Decoders.addDecoder(clazz: [ININMediaSummary].self) { (source: AnyObject) -> [ININMediaSummary] in
                return Decoders.decode(clazz: [ININMediaSummary].self, source: source)
            }
            // Decoder for ININMediaSummary
            Decoders.addDecoder(clazz: ININMediaSummary.self) { (source: AnyObject) -> ININMediaSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaSummary()
                instance.contactCenter = Decoders.decodeOptional(clazz: ININMediaSummaryDetail.self, source: sourceDictionary["contactCenter"])
                instance.enterprise = Decoders.decodeOptional(clazz: ININMediaSummaryDetail.self, source: sourceDictionary["enterprise"])
                return instance
            }


            // Decoder for [ININMediaSummaryDetail]
            Decoders.addDecoder(clazz: [ININMediaSummaryDetail].self) { (source: AnyObject) -> [ININMediaSummaryDetail] in
                return Decoders.decode(clazz: [ININMediaSummaryDetail].self, source: source)
            }
            // Decoder for ININMediaSummaryDetail
            Decoders.addDecoder(clazz: ININMediaSummaryDetail.self) { (source: AnyObject) -> ININMediaSummaryDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMediaSummaryDetail()
                instance.active = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["active"])
                instance.acw = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["acw"])
                return instance
            }


            // Decoder for [ININMemberEntity]
            Decoders.addDecoder(clazz: [ININMemberEntity].self) { (source: AnyObject) -> [ININMemberEntity] in
                return Decoders.decode(clazz: [ININMemberEntity].self, source: source)
            }
            // Decoder for ININMemberEntity
            Decoders.addDecoder(clazz: ININMemberEntity.self) { (source: AnyObject) -> ININMemberEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMemberEntity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ININMetabase]
            Decoders.addDecoder(clazz: [ININMetabase].self) { (source: AnyObject) -> [ININMetabase] in
                return Decoders.decode(clazz: [ININMetabase].self, source: source)
            }
            // Decoder for ININMetabase
            Decoders.addDecoder(clazz: ININMetabase.self) { (source: AnyObject) -> ININMetabase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMetabase()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININMeteredEvaluationAssignment]
            Decoders.addDecoder(clazz: [ININMeteredEvaluationAssignment].self) { (source: AnyObject) -> [ININMeteredEvaluationAssignment] in
                return Decoders.decode(clazz: [ININMeteredEvaluationAssignment].self, source: source)
            }
            // Decoder for ININMeteredEvaluationAssignment
            Decoders.addDecoder(clazz: ININMeteredEvaluationAssignment.self) { (source: AnyObject) -> ININMeteredEvaluationAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININMeteredEvaluationAssignment()
                instance.evaluationContextId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["evaluationContextId"])
                instance.evaluators = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluators"])
                instance.maxNumberEvaluations = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxNumberEvaluations"])
                instance.evaluationForm = Decoders.decodeOptional(clazz: ININEvaluationForm.self, source: sourceDictionary["evaluationForm"])
                instance.assignToActiveUser = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["assignToActiveUser"])
                instance.timeInterval = Decoders.decodeOptional(clazz: ININTimeInterval.self, source: sourceDictionary["timeInterval"])
                return instance
            }


            // Decoder for [ININNocSupport]
            Decoders.addDecoder(clazz: [ININNocSupport].self) { (source: AnyObject) -> [ININNocSupport] in
                return Decoders.decode(clazz: [ININNocSupport].self, source: source)
            }
            // Decoder for ININNocSupport
            Decoders.addDecoder(clazz: ININNocSupport.self) { (source: AnyObject) -> ININNocSupport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNocSupport()
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                return instance
            }


            // Decoder for [ININNote]
            Decoders.addDecoder(clazz: [ININNote].self) { (source: AnyObject) -> [ININNote] in
                return Decoders.decode(clazz: [ININNote].self, source: source)
            }
            // Decoder for ININNote
            Decoders.addDecoder(clazz: ININNote.self) { (source: AnyObject) -> ININNote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNote()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.noteText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["noteText"])
                instance.modifyDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifyDate"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININNoteListing]
            Decoders.addDecoder(clazz: [ININNoteListing].self) { (source: AnyObject) -> [ININNoteListing] in
                return Decoders.decode(clazz: [ININNoteListing].self, source: source)
            }
            // Decoder for ININNoteListing
            Decoders.addDecoder(clazz: ININNoteListing.self) { (source: AnyObject) -> ININNoteListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNoteListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININNumber]
            Decoders.addDecoder(clazz: [ININNumber].self) { (source: AnyObject) -> [ININNumber] in
                return Decoders.decode(clazz: [ININNumber].self, source: source)
            }
            // Decoder for ININNumber
            Decoders.addDecoder(clazz: ININNumber.self) { (source: AnyObject) -> ININNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNumber()
                instance.start = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end"])
                return instance
            }


            // Decoder for [ININNumberOrder]
            Decoders.addDecoder(clazz: [ININNumberOrder].self) { (source: AnyObject) -> [ININNumberOrder] in
                return Decoders.decode(clazz: [ININNumberOrder].self, source: source)
            }
            // Decoder for ININNumberOrder
            Decoders.addDecoder(clazz: ININNumberOrder.self) { (source: AnyObject) -> ININNumberOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNumberOrder()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.did = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["did"])
                instance.effectiveStartDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveStartDate"])
                instance.effectiveEndDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveEndDate"])
                instance.lastUpdated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastUpdated"])
                instance.startAuthUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startAuthUserId"])
                instance.endAuthUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endAuthUserId"])
                instance.status = ININNumberOrder.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.phoneNumberType = ININNumberOrder.ININPhoneNumberType(rawValue: (sourceDictionary["phoneNumberType"] as? String) ?? "") 
                instance.porting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["porting"])
                instance.billingAddress = Decoders.decodeOptional(clazz: ININPortBillingAddress.self, source: sourceDictionary["billingAddress"])
                instance.responsibleContact = Decoders.decodeOptional(clazz: ININPortContact.self, source: sourceDictionary["responsibleContact"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                instance.envelopeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["envelopeId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININNumberOrderRequest]
            Decoders.addDecoder(clazz: [ININNumberOrderRequest].self) { (source: AnyObject) -> [ININNumberOrderRequest] in
                return Decoders.decode(clazz: [ININNumberOrderRequest].self, source: source)
            }
            // Decoder for ININNumberOrderRequest
            Decoders.addDecoder(clazz: ININNumberOrderRequest.self) { (source: AnyObject) -> ININNumberOrderRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNumberOrderRequest()
                instance.orderTns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderTns"])
                instance.reservationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["reservationIds"])
                instance.orderId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderId"])
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveDate"])
                instance.phoneNumberType = ININNumberOrderRequest.ININPhoneNumberType(rawValue: (sourceDictionary["phoneNumberType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININNumberPlan]
            Decoders.addDecoder(clazz: [ININNumberPlan].self) { (source: AnyObject) -> [ININNumberPlan] in
                return Decoders.decode(clazz: [ININNumberPlan].self, source: source)
            }
            // Decoder for ININNumberPlan
            Decoders.addDecoder(clazz: ININNumberPlan.self) { (source: AnyObject) -> ININNumberPlan in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNumberPlan()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININNumberPlan.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.match = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["match"])
                instance.normalizedFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["normalizedFormat"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.numbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["numbers"])
                instance.digitLength = Decoders.decodeOptional(clazz: ININDigitLength.self, source: sourceDictionary["digitLength"])
                instance.classification = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["classification"])
                instance.matchType = ININNumberPlan.ININMatchType(rawValue: (sourceDictionary["matchType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININNumericRange]
            Decoders.addDecoder(clazz: [ININNumericRange].self) { (source: AnyObject) -> [ININNumericRange] in
                return Decoders.decode(clazz: [ININNumericRange].self, source: source)
            }
            // Decoder for ININNumericRange
            Decoders.addDecoder(clazz: ININNumericRange.self) { (source: AnyObject) -> ININNumericRange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININNumericRange()
                instance.gt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["gt"])
                instance.gte = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["gte"])
                instance.lt = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lt"])
                instance.lte = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lte"])
                return instance
            }


            // Decoder for [ININOAuthClient]
            Decoders.addDecoder(clazz: [ININOAuthClient].self) { (source: AnyObject) -> [ININOAuthClient] in
                return Decoders.decode(clazz: [ININOAuthClient].self, source: source)
            }
            // Decoder for ININOAuthClient
            Decoders.addDecoder(clazz: ININOAuthClient.self) { (source: AnyObject) -> ININOAuthClient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOAuthClient()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.accessTokenValiditySeconds = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["accessTokenValiditySeconds"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.registeredRedirectUri = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["registeredRedirectUri"])
                instance.secret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secret"])
                instance.roleIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roleIds"])
                instance.authorizedGrantType = ININOAuthClient.ININAuthorizedGrantType(rawValue: (sourceDictionary["authorizedGrantType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOAuthClientEntityListing]
            Decoders.addDecoder(clazz: [ININOAuthClientEntityListing].self) { (source: AnyObject) -> [ININOAuthClientEntityListing] in
                return Decoders.decode(clazz: [ININOAuthClientEntityListing].self, source: source)
            }
            // Decoder for ININOAuthClientEntityListing
            Decoders.addDecoder(clazz: ININOAuthClientEntityListing.self) { (source: AnyObject) -> ININOAuthClientEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOAuthClientEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININOAuthProvider]
            Decoders.addDecoder(clazz: [ININOAuthProvider].self) { (source: AnyObject) -> [ININOAuthProvider] in
                return Decoders.decode(clazz: [ININOAuthProvider].self, source: source)
            }
            // Decoder for ININOAuthProvider
            Decoders.addDecoder(clazz: ININOAuthProvider.self) { (source: AnyObject) -> ININOAuthProvider in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOAuthProvider()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOAuthProviderEntityListing]
            Decoders.addDecoder(clazz: [ININOAuthProviderEntityListing].self) { (source: AnyObject) -> [ININOAuthProviderEntityListing] in
                return Decoders.decode(clazz: [ININOAuthProviderEntityListing].self, source: source)
            }
            // Decoder for ININOAuthProviderEntityListing
            Decoders.addDecoder(clazz: ININOAuthProviderEntityListing.self) { (source: AnyObject) -> ININOAuthProviderEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOAuthProviderEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININObservationDataContainer]
            Decoders.addDecoder(clazz: [ININObservationDataContainer].self) { (source: AnyObject) -> [ININObservationDataContainer] in
                return Decoders.decode(clazz: [ININObservationDataContainer].self, source: source)
            }
            // Decoder for ININObservationDataContainer
            Decoders.addDecoder(clazz: ININObservationDataContainer.self) { (source: AnyObject) -> ININObservationDataContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININObservationDataContainer()
                instance.group = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["group"])
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                return instance
            }


            // Decoder for [ININObservationQuery]
            Decoders.addDecoder(clazz: [ININObservationQuery].self) { (source: AnyObject) -> [ININObservationQuery] in
                return Decoders.decode(clazz: [ININObservationQuery].self, source: source)
            }
            // Decoder for ININObservationQuery
            Decoders.addDecoder(clazz: ININObservationQuery.self) { (source: AnyObject) -> ININObservationQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININObservationQuery()
                instance.filter = Decoders.decodeOptional(clazz: ININAnalyticsQueryFilter.self, source: sourceDictionary["filter"])
                instance.metrics = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metrics"])
                return instance
            }


            // Decoder for [ININObservationQueryResponse]
            Decoders.addDecoder(clazz: [ININObservationQueryResponse].self) { (source: AnyObject) -> [ININObservationQueryResponse] in
                return Decoders.decode(clazz: [ININObservationQueryResponse].self, source: source)
            }
            // Decoder for ININObservationQueryResponse
            Decoders.addDecoder(clazz: ININObservationQueryResponse.self) { (source: AnyObject) -> ININObservationQueryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININObservationQueryResponse()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININOkta]
            Decoders.addDecoder(clazz: [ININOkta].self) { (source: AnyObject) -> [ININOkta] in
                return Decoders.decode(clazz: [ININOkta].self, source: source)
            }
            // Decoder for ININOkta
            Decoders.addDecoder(clazz: ININOkta.self) { (source: AnyObject) -> ININOkta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOkta()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.issuerURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerURI"])
                instance.ssoTargetURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssoTargetURI"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOneLogin]
            Decoders.addDecoder(clazz: [ININOneLogin].self) { (source: AnyObject) -> [ININOneLogin] in
                return Decoders.decode(clazz: [ININOneLogin].self, source: source)
            }
            // Decoder for ININOneLogin
            Decoders.addDecoder(clazz: ININOneLogin.self) { (source: AnyObject) -> ININOneLogin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOneLogin()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.issuerURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerURI"])
                instance.ssoTargetURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssoTargetURI"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrder]
            Decoders.addDecoder(clazz: [ININOrder].self) { (source: AnyObject) -> [ININOrder] in
                return Decoders.decode(clazz: [ININOrder].self, source: source)
            }
            // Decoder for ININOrder
            Decoders.addDecoder(clazz: ININOrder.self) { (source: AnyObject) -> ININOrder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrder()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.quote = Decoders.decodeOptional(clazz: ININQuote.self, source: sourceDictionary["quote"])
                instance.envelopeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["envelopeId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrgLicenseAssignment]
            Decoders.addDecoder(clazz: [ININOrgLicenseAssignment].self) { (source: AnyObject) -> [ININOrgLicenseAssignment] in
                return Decoders.decode(clazz: [ININOrgLicenseAssignment].self, source: source)
            }
            // Decoder for ININOrgLicenseAssignment
            Decoders.addDecoder(clazz: ININOrgLicenseAssignment.self) { (source: AnyObject) -> ININOrgLicenseAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrgLicenseAssignment()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.licenseId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrgMediaUtilization]
            Decoders.addDecoder(clazz: [ININOrgMediaUtilization].self) { (source: AnyObject) -> [ININOrgMediaUtilization] in
                return Decoders.decode(clazz: [ININOrgMediaUtilization].self, source: source)
            }
            // Decoder for ININOrgMediaUtilization
            Decoders.addDecoder(clazz: ININOrgMediaUtilization.self) { (source: AnyObject) -> ININOrgMediaUtilization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrgMediaUtilization()
                instance.maximumCapacity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumCapacity"])
                instance.interruptableMediaTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["interruptableMediaTypes"])
                instance.includeNonAcd = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["includeNonAcd"])
                return instance
            }


            // Decoder for [ININOrganization]
            Decoders.addDecoder(clazz: [ININOrganization].self) { (source: AnyObject) -> [ININOrganization] in
                return Decoders.decode(clazz: [ININOrganization].self, source: source)
            }
            // Decoder for ININOrganization
            Decoders.addDecoder(clazz: ININOrganization.self) { (source: AnyObject) -> ININOrganization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganization()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.thirdPartyOrgId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyOrgId"])
                instance.thirdPartyOrgName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyOrgName"])
                instance.thirdPartyURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyURI"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.state = ININOrganization.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.defaultSiteId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultSiteId"])
                instance.deletable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deletable"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrganizationCreate]
            Decoders.addDecoder(clazz: [ININOrganizationCreate].self) { (source: AnyObject) -> [ININOrganizationCreate] in
                return Decoders.decode(clazz: [ININOrganizationCreate].self, source: source)
            }
            // Decoder for ININOrganizationCreate
            Decoders.addDecoder(clazz: ININOrganizationCreate.self) { (source: AnyObject) -> ININOrganizationCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganizationCreate()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.adminUsername = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adminUsername"])
                instance.adminPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adminPassword"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.thirdPartyOrgName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdPartyOrgName"])
                instance.deletable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deletable"])
                return instance
            }


            // Decoder for [ININOrganizationPresence]
            Decoders.addDecoder(clazz: [ININOrganizationPresence].self) { (source: AnyObject) -> [ININOrganizationPresence] in
                return Decoders.decode(clazz: [ININOrganizationPresence].self, source: source)
            }
            // Decoder for ININOrganizationPresence
            Decoders.addDecoder(clazz: ININOrganizationPresence.self) { (source: AnyObject) -> ININOrganizationPresence in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganizationPresence()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.languageLabels = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["languageLabels"])
                instance.systemPresence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["systemPresence"])
                instance.deactivated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deactivated"])
                instance.primary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["primary"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["createdBy"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["modifiedBy"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrganizationPresenceEntityListing]
            Decoders.addDecoder(clazz: [ININOrganizationPresenceEntityListing].self) { (source: AnyObject) -> [ININOrganizationPresenceEntityListing] in
                return Decoders.decode(clazz: [ININOrganizationPresenceEntityListing].self, source: source)
            }
            // Decoder for ININOrganizationPresenceEntityListing
            Decoders.addDecoder(clazz: ININOrganizationPresenceEntityListing.self) { (source: AnyObject) -> ININOrganizationPresenceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganizationPresenceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININOrganizationProductEntityListing]
            Decoders.addDecoder(clazz: [ININOrganizationProductEntityListing].self) { (source: AnyObject) -> [ININOrganizationProductEntityListing] in
                return Decoders.decode(clazz: [ININOrganizationProductEntityListing].self, source: source)
            }
            // Decoder for ININOrganizationProductEntityListing
            Decoders.addDecoder(clazz: ININOrganizationProductEntityListing.self) { (source: AnyObject) -> ININOrganizationProductEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganizationProductEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININOrganizationRoleEntityListing]
            Decoders.addDecoder(clazz: [ININOrganizationRoleEntityListing].self) { (source: AnyObject) -> [ININOrganizationRoleEntityListing] in
                return Decoders.decode(clazz: [ININOrganizationRoleEntityListing].self, source: source)
            }
            // Decoder for ININOrganizationRoleEntityListing
            Decoders.addDecoder(clazz: ININOrganizationRoleEntityListing.self) { (source: AnyObject) -> ININOrganizationRoleEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrganizationRoleEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININOrphanRecording]
            Decoders.addDecoder(clazz: [ININOrphanRecording].self) { (source: AnyObject) -> [ININOrphanRecording] in
                return Decoders.decode(clazz: [ININOrphanRecording].self, source: source)
            }
            // Decoder for ININOrphanRecording
            Decoders.addDecoder(clazz: ININOrphanRecording.self) { (source: AnyObject) -> ININOrphanRecording in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrphanRecording()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createdTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdTime"])
                instance.recoveredTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["recoveredTime"])
                instance.providerType = ININOrphanRecording.ININProviderType(rawValue: (sourceDictionary["providerType"] as? String) ?? "") 
                instance.mediaSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["mediaSizeBytes"])
                instance.mediaType = ININOrphanRecording.ININMediaType(rawValue: (sourceDictionary["mediaType"] as? String) ?? "") 
                instance.fileState = ININOrphanRecording.ININFileState(rawValue: (sourceDictionary["fileState"] as? String) ?? "") 
                instance.providerEndpoint = Decoders.decodeOptional(clazz: ININEndpoint.self, source: sourceDictionary["providerEndpoint"])
                instance.recording = Decoders.decodeOptional(clazz: ININRecording.self, source: sourceDictionary["recording"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOrphanRecordingListing]
            Decoders.addDecoder(clazz: [ININOrphanRecordingListing].self) { (source: AnyObject) -> [ININOrphanRecordingListing] in
                return Decoders.decode(clazz: [ININOrphanRecordingListing].self, source: source)
            }
            // Decoder for ININOrphanRecordingListing
            Decoders.addDecoder(clazz: ININOrphanRecordingListing.self) { (source: AnyObject) -> ININOrphanRecordingListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOrphanRecordingListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININOutOfOffice]
            Decoders.addDecoder(clazz: [ININOutOfOffice].self) { (source: AnyObject) -> [ININOutOfOffice] in
                return Decoders.decode(clazz: [ININOutOfOffice].self, source: source)
            }
            // Decoder for ININOutOfOffice
            Decoders.addDecoder(clazz: ININOutOfOffice.self) { (source: AnyObject) -> ININOutOfOffice in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOutOfOffice()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOutboundRoute]
            Decoders.addDecoder(clazz: [ININOutboundRoute].self) { (source: AnyObject) -> [ININOutboundRoute] in
                return Decoders.decode(clazz: [ININOutboundRoute].self, source: source)
            }
            // Decoder for ININOutboundRoute
            Decoders.addDecoder(clazz: ININOutboundRoute.self) { (source: AnyObject) -> ININOutboundRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOutboundRoute()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININOutboundRoute.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.site = Decoders.decodeOptional(clazz: ININSite.self, source: sourceDictionary["site"])
                instance.classificationTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classificationTypes"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.distribution = ININOutboundRoute.ININDistribution(rawValue: (sourceDictionary["distribution"] as? String) ?? "") 
                instance.managed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["managed"])
                instance.externalTrunkBases = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["externalTrunkBases"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININOutboundRouteEntityListing]
            Decoders.addDecoder(clazz: [ININOutboundRouteEntityListing].self) { (source: AnyObject) -> [ININOutboundRouteEntityListing] in
                return Decoders.decode(clazz: [ININOutboundRouteEntityListing].self, source: source)
            }
            // Decoder for ININOutboundRouteEntityListing
            Decoders.addDecoder(clazz: ININOutboundRouteEntityListing.self) { (source: AnyObject) -> ININOutboundRouteEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININOutboundRouteEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPINConfiguration]
            Decoders.addDecoder(clazz: [ININPINConfiguration].self) { (source: AnyObject) -> [ININPINConfiguration] in
                return Decoders.decode(clazz: [ININPINConfiguration].self, source: source)
            }
            // Decoder for ININPINConfiguration
            Decoders.addDecoder(clazz: ININPINConfiguration.self) { (source: AnyObject) -> ININPINConfiguration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPINConfiguration()
                instance.minimumLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumLength"])
                instance.maximumLength = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumLength"])
                return instance
            }


            // Decoder for [ININPage]
            Decoders.addDecoder(clazz: [ININPage].self) { (source: AnyObject) -> [ININPage] in
                return Decoders.decode(clazz: [ININPage].self, source: source)
            }
            // Decoder for ININPage
            Decoders.addDecoder(clazz: ININPage.self) { (source: AnyObject) -> ININPage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.versionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionId"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.rootContainer = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["rootContainer"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPagingSpec]
            Decoders.addDecoder(clazz: [ININPagingSpec].self) { (source: AnyObject) -> [ININPagingSpec] in
                return Decoders.decode(clazz: [ININPagingSpec].self, source: source)
            }
            // Decoder for ININPagingSpec
            Decoders.addDecoder(clazz: ININPagingSpec.self) { (source: AnyObject) -> ININPagingSpec in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPagingSpec()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                return instance
            }


            // Decoder for [ININParameter]
            Decoders.addDecoder(clazz: [ININParameter].self) { (source: AnyObject) -> [ININParameter] in
                return Decoders.decode(clazz: [ININParameter].self, source: source)
            }
            // Decoder for ININParameter
            Decoders.addDecoder(clazz: ININParameter.self) { (source: AnyObject) -> ININParameter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININParameter()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.parameterType = ININParameter.ININParameterType(rawValue: (sourceDictionary["parameterType"] as? String) ?? "") 
                instance.domain = ININParameter.ININDomain(rawValue: (sourceDictionary["domain"] as? String) ?? "") 
                instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"])
                return instance
            }


            // Decoder for [ININParsedCertificate]
            Decoders.addDecoder(clazz: [ININParsedCertificate].self) { (source: AnyObject) -> [ININParsedCertificate] in
                return Decoders.decode(clazz: [ININParsedCertificate].self, source: source)
            }
            // Decoder for ININParsedCertificate
            Decoders.addDecoder(clazz: ININParsedCertificate.self) { (source: AnyObject) -> ININParsedCertificate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININParsedCertificate()
                instance.certificateDetails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["certificateDetails"])
                return instance
            }


            // Decoder for [ININParticipant]
            Decoders.addDecoder(clazz: [ININParticipant].self) { (source: AnyObject) -> [ININParticipant] in
                return Decoders.decode(clazz: [ININParticipant].self, source: source)
            }
            // Decoder for ININParticipant
            Decoders.addDecoder(clazz: ININParticipant.self) { (source: AnyObject) -> ININParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.userUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userUri"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.externalContactId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["externalContactId"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupId"])
                instance.queueName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueName"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.participantType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["participantType"])
                instance.consultParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["consultParticipantId"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.ani = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ani"])
                instance.dnis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dnis"])
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = ININParticipant.ININWrapupPrompt(rawValue: (sourceDictionary["wrapupPrompt"] as? String) ?? "") 
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.wrapup = Decoders.decodeOptional(clazz: ININWrapup.self, source: sourceDictionary["wrapup"])
                instance.monitoredParticipantId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["monitoredParticipantId"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.calls = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["calls"])
                instance.callbacks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["callbacks"])
                instance.chats = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["chats"])
                instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"])
                instance.socialExpressions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["socialExpressions"])
                instance.videos = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["videos"])
                instance.evaluations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["evaluations"])
                return instance
            }


            // Decoder for [ININParticipantAttributes]
            Decoders.addDecoder(clazz: [ININParticipantAttributes].self) { (source: AnyObject) -> [ININParticipantAttributes] in
                return Decoders.decode(clazz: [ININParticipantAttributes].self, source: source)
            }
            // Decoder for ININParticipantAttributes
            Decoders.addDecoder(clazz: ININParticipantAttributes.self) { (source: AnyObject) -> ININParticipantAttributes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININParticipantAttributes()
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                return instance
            }


            // Decoder for [ININPaymentMethod]
            Decoders.addDecoder(clazz: [ININPaymentMethod].self) { (source: AnyObject) -> [ININPaymentMethod] in
                return Decoders.decode(clazz: [ININPaymentMethod].self, source: source)
            }
            // Decoder for ININPaymentMethod
            Decoders.addDecoder(clazz: ININPaymentMethod.self) { (source: AnyObject) -> ININPaymentMethod in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPaymentMethod()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININPaymentMethod.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.providerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["providerName"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.cardExpirationDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardExpirationDate"])
                instance.cardLastFourDigits = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cardLastFourDigits"])
                instance.cardType = ININPaymentMethod.ININCardType(rawValue: (sourceDictionary["cardType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPaymentMethodListing]
            Decoders.addDecoder(clazz: [ININPaymentMethodListing].self) { (source: AnyObject) -> [ININPaymentMethodListing] in
                return Decoders.decode(clazz: [ININPaymentMethodListing].self, source: source)
            }
            // Decoder for ININPaymentMethodListing
            Decoders.addDecoder(clazz: ININPaymentMethodListing.self) { (source: AnyObject) -> ININPaymentMethodListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPaymentMethodListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPaymentTokenProvider]
            Decoders.addDecoder(clazz: [ININPaymentTokenProvider].self) { (source: AnyObject) -> [ININPaymentTokenProvider] in
                return Decoders.decode(clazz: [ININPaymentTokenProvider].self, source: source)
            }
            // Decoder for ININPaymentTokenProvider
            Decoders.addDecoder(clazz: ININPaymentTokenProvider.self) { (source: AnyObject) -> ININPaymentTokenProvider in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPaymentTokenProvider()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.tokenCreationRequestEnvelope = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["tokenCreationRequestEnvelope"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPermissionCollectionEntityListing]
            Decoders.addDecoder(clazz: [ININPermissionCollectionEntityListing].self) { (source: AnyObject) -> [ININPermissionCollectionEntityListing] in
                return Decoders.decode(clazz: [ININPermissionCollectionEntityListing].self, source: source)
            }
            // Decoder for ININPermissionCollectionEntityListing
            Decoders.addDecoder(clazz: ININPermissionCollectionEntityListing.self) { (source: AnyObject) -> ININPermissionCollectionEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPermissionCollectionEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPermissions]
            Decoders.addDecoder(clazz: [ININPermissions].self) { (source: AnyObject) -> [ININPermissions] in
                return Decoders.decode(clazz: [ININPermissions].self, source: source)
            }
            // Decoder for ININPermissions
            Decoders.addDecoder(clazz: ININPermissions.self) { (source: AnyObject) -> ININPermissions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPermissions()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ids"])
                return instance
            }


            // Decoder for [ININPhone]
            Decoders.addDecoder(clazz: [ININPhone].self) { (source: AnyObject) -> [ININPhone] in
                return Decoders.decode(clazz: [ININPhone].self, source: source)
            }
            // Decoder for ININPhone
            Decoders.addDecoder(clazz: ININPhone.self) { (source: AnyObject) -> ININPhone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhone()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININPhone.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edgeGroup"])
                instance.site = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["site"])
                instance.phoneBaseSettings = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["phoneBaseSettings"])
                instance.lineBaseSettings = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["lineBaseSettings"])
                instance.phoneMetaBase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["phoneMetaBase"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.status = Decoders.decodeOptional(clazz: ININPhoneStatus.self, source: sourceDictionary["status"])
                instance.secondaryStatus = Decoders.decodeOptional(clazz: ININPhoneStatus.self, source: sourceDictionary["secondaryStatus"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.capabilities = Decoders.decodeOptional(clazz: ININPhoneCapabilities.self, source: sourceDictionary["capabilities"])
                instance.webRtcUser = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["webRtcUser"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPhoneBase]
            Decoders.addDecoder(clazz: [ININPhoneBase].self) { (source: AnyObject) -> [ININPhoneBase] in
                return Decoders.decode(clazz: [ININPhoneBase].self, source: source)
            }
            // Decoder for ININPhoneBase
            Decoders.addDecoder(clazz: ININPhoneBase.self) { (source: AnyObject) -> ININPhoneBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneBase()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.phoneMetaBase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["phoneMetaBase"])
                instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.capabilities = Decoders.decodeOptional(clazz: ININPhoneCapabilities.self, source: sourceDictionary["capabilities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPhoneBaseEntityListing]
            Decoders.addDecoder(clazz: [ININPhoneBaseEntityListing].self) { (source: AnyObject) -> [ININPhoneBaseEntityListing] in
                return Decoders.decode(clazz: [ININPhoneBaseEntityListing].self, source: source)
            }
            // Decoder for ININPhoneBaseEntityListing
            Decoders.addDecoder(clazz: ININPhoneBaseEntityListing.self) { (source: AnyObject) -> ININPhoneBaseEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneBaseEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPhoneCapabilities]
            Decoders.addDecoder(clazz: [ININPhoneCapabilities].self) { (source: AnyObject) -> [ININPhoneCapabilities] in
                return Decoders.decode(clazz: [ININPhoneCapabilities].self, source: source)
            }
            // Decoder for ININPhoneCapabilities
            Decoders.addDecoder(clazz: ININPhoneCapabilities.self) { (source: AnyObject) -> ININPhoneCapabilities in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneCapabilities()
                instance.provisions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["provisions"])
                instance.registers = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["registers"])
                instance.dualRegisters = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dualRegisters"])
                instance.hardwareIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hardwareIdType"])
                instance.allowReboot = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allowReboot"])
                instance.noRebalance = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["noRebalance"])
                return instance
            }


            // Decoder for [ININPhoneColumn]
            Decoders.addDecoder(clazz: [ININPhoneColumn].self) { (source: AnyObject) -> [ININPhoneColumn] in
                return Decoders.decode(clazz: [ININPhoneColumn].self, source: source)
            }
            // Decoder for ININPhoneColumn
            Decoders.addDecoder(clazz: ININPhoneColumn.self) { (source: AnyObject) -> ININPhoneColumn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneColumn()
                instance.columnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["columnName"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ININPhoneEntityListing]
            Decoders.addDecoder(clazz: [ININPhoneEntityListing].self) { (source: AnyObject) -> [ININPhoneEntityListing] in
                return Decoders.decode(clazz: [ININPhoneEntityListing].self, source: source)
            }
            // Decoder for ININPhoneEntityListing
            Decoders.addDecoder(clazz: ININPhoneEntityListing.self) { (source: AnyObject) -> ININPhoneEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPhoneMetaBaseEntityListing]
            Decoders.addDecoder(clazz: [ININPhoneMetaBaseEntityListing].self) { (source: AnyObject) -> [ININPhoneMetaBaseEntityListing] in
                return Decoders.decode(clazz: [ININPhoneMetaBaseEntityListing].self, source: source)
            }
            // Decoder for ININPhoneMetaBaseEntityListing
            Decoders.addDecoder(clazz: ININPhoneMetaBaseEntityListing.self) { (source: AnyObject) -> ININPhoneMetaBaseEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneMetaBaseEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPhoneNumber]
            Decoders.addDecoder(clazz: [ININPhoneNumber].self) { (source: AnyObject) -> [ININPhoneNumber] in
                return Decoders.decode(clazz: [ININPhoneNumber].self, source: source)
            }
            // Decoder for ININPhoneNumber
            Decoders.addDecoder(clazz: ININPhoneNumber.self) { (source: AnyObject) -> ININPhoneNumber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneNumber()
                instance.display = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display"])
                instance._extension = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["extension"])
                instance.acceptsSMS = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["acceptsSMS"])
                instance.userInput = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userInput"])
                instance.e164 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["e164"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["countryCode"])
                return instance
            }


            // Decoder for [ININPhoneNumberColumn]
            Decoders.addDecoder(clazz: [ININPhoneNumberColumn].self) { (source: AnyObject) -> [ININPhoneNumberColumn] in
                return Decoders.decode(clazz: [ININPhoneNumberColumn].self, source: source)
            }
            // Decoder for ININPhoneNumberColumn
            Decoders.addDecoder(clazz: ININPhoneNumberColumn.self) { (source: AnyObject) -> ININPhoneNumberColumn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneNumberColumn()
                instance.columnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["columnName"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [ININPhoneNumberStatus]
            Decoders.addDecoder(clazz: [ININPhoneNumberStatus].self) { (source: AnyObject) -> [ININPhoneNumberStatus] in
                return Decoders.decode(clazz: [ININPhoneNumberStatus].self, source: source)
            }
            // Decoder for ININPhoneNumberStatus
            Decoders.addDecoder(clazz: ININPhoneNumberStatus.self) { (source: AnyObject) -> ININPhoneNumberStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneNumberStatus()
                instance.callable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["callable"])
                return instance
            }


            // Decoder for [ININPhoneStatus]
            Decoders.addDecoder(clazz: [ININPhoneStatus].self) { (source: AnyObject) -> [ININPhoneStatus] in
                return Decoders.decode(clazz: [ININPhoneStatus].self, source: source)
            }
            // Decoder for ININPhoneStatus
            Decoders.addDecoder(clazz: ININPhoneStatus.self) { (source: AnyObject) -> ININPhoneStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhoneStatus()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.operationalStatus = ININPhoneStatus.ININOperationalStatus(rawValue: (sourceDictionary["operationalStatus"] as? String) ?? "") 
                instance.edgesStatus = ININPhoneStatus.ININEdgesStatus(rawValue: (sourceDictionary["edgesStatus"] as? String) ?? "") 
                instance.provision = Decoders.decodeOptional(clazz: ININProvisionInfo.self, source: sourceDictionary["provision"])
                instance.lineStatuses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lineStatuses"])
                instance.phoneAssignmentToEdgeType = ININPhoneStatus.ININPhoneAssignmentToEdgeType(rawValue: (sourceDictionary["phoneAssignmentToEdgeType"] as? String) ?? "") 
                instance.edge = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edge"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPhonesReboot]
            Decoders.addDecoder(clazz: [ININPhonesReboot].self) { (source: AnyObject) -> [ININPhonesReboot] in
                return Decoders.decode(clazz: [ININPhonesReboot].self, source: source)
            }
            // Decoder for ININPhonesReboot
            Decoders.addDecoder(clazz: ININPhonesReboot.self) { (source: AnyObject) -> ININPhonesReboot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhonesReboot()
                instance.phoneIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phoneIds"])
                instance.siteId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siteId"])
                return instance
            }


            // Decoder for [ININPhysicalInterfaceEntityListing]
            Decoders.addDecoder(clazz: [ININPhysicalInterfaceEntityListing].self) { (source: AnyObject) -> [ININPhysicalInterfaceEntityListing] in
                return Decoders.decode(clazz: [ININPhysicalInterfaceEntityListing].self, source: source)
            }
            // Decoder for ININPhysicalInterfaceEntityListing
            Decoders.addDecoder(clazz: ININPhysicalInterfaceEntityListing.self) { (source: AnyObject) -> ININPhysicalInterfaceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPhysicalInterfaceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPolicy]
            Decoders.addDecoder(clazz: [ININPolicy].self) { (source: AnyObject) -> [ININPolicy] in
                return Decoders.decode(clazz: [ININPolicy].self, source: source)
            }
            // Decoder for ININPolicy
            Decoders.addDecoder(clazz: ININPolicy.self) { (source: AnyObject) -> ININPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicy()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.order = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["order"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.mediaPolicies = Decoders.decodeOptional(clazz: ININMediaPolicies.self, source: sourceDictionary["mediaPolicies"])
                instance.conditions = Decoders.decodeOptional(clazz: ININPolicyConditions.self, source: sourceDictionary["conditions"])
                instance.actions = Decoders.decodeOptional(clazz: ININPolicyActions.self, source: sourceDictionary["actions"])
                instance.policyErrors = Decoders.decodeOptional(clazz: ININPolicyErrors.self, source: sourceDictionary["policyErrors"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPolicyActions]
            Decoders.addDecoder(clazz: [ININPolicyActions].self) { (source: AnyObject) -> [ININPolicyActions] in
                return Decoders.decode(clazz: [ININPolicyActions].self, source: source)
            }
            // Decoder for ININPolicyActions
            Decoders.addDecoder(clazz: ININPolicyActions.self) { (source: AnyObject) -> ININPolicyActions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicyActions()
                instance.retainRecording = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["retainRecording"])
                instance.deleteRecording = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deleteRecording"])
                instance.alwaysDelete = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["alwaysDelete"])
                instance.assignEvaluations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignEvaluations"])
                instance.assignMeteredEvaluations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignMeteredEvaluations"])
                instance.assignCalibrations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignCalibrations"])
                instance.retentionDuration = Decoders.decodeOptional(clazz: ININRetentionDuration.self, source: sourceDictionary["retentionDuration"])
                instance.initiateScreenRecording = Decoders.decodeOptional(clazz: ININInitiateScreenRecording.self, source: sourceDictionary["initiateScreenRecording"])
                return instance
            }


            // Decoder for [ININPolicyConditions]
            Decoders.addDecoder(clazz: [ININPolicyConditions].self) { (source: AnyObject) -> [ININPolicyConditions] in
                return Decoders.decode(clazz: [ININPolicyConditions].self, source: source)
            }
            // Decoder for ININPolicyConditions
            Decoders.addDecoder(clazz: ININPolicyConditions.self) { (source: AnyObject) -> ININPolicyConditions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicyConditions()
                instance.forUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forUsers"])
                instance.directions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["directions"])
                instance.dateRanges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateRanges"])
                instance.mediaTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["mediaTypes"])
                instance.forQueues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["forQueues"])
                instance.duration = Decoders.decodeOptional(clazz: ININDurationCondition.self, source: sourceDictionary["duration"])
                instance.wrapupCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wrapupCodes"])
                instance.timeAllowed = Decoders.decodeOptional(clazz: ININTimeAllowed.self, source: sourceDictionary["timeAllowed"])
                return instance
            }


            // Decoder for [ININPolicyEntityListing]
            Decoders.addDecoder(clazz: [ININPolicyEntityListing].self) { (source: AnyObject) -> [ININPolicyEntityListing] in
                return Decoders.decode(clazz: [ININPolicyEntityListing].self, source: source)
            }
            // Decoder for ININPolicyEntityListing
            Decoders.addDecoder(clazz: ININPolicyEntityListing.self) { (source: AnyObject) -> ININPolicyEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicyEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPolicyErrorMessage]
            Decoders.addDecoder(clazz: [ININPolicyErrorMessage].self) { (source: AnyObject) -> [ININPolicyErrorMessage] in
                return Decoders.decode(clazz: [ININPolicyErrorMessage].self, source: source)
            }
            // Decoder for ININPolicyErrorMessage
            Decoders.addDecoder(clazz: ININPolicyErrorMessage.self) { (source: AnyObject) -> ININPolicyErrorMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicyErrorMessage()
                instance.statusCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["statusCode"])
                instance.userMessage = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["userMessage"])
                instance.userParamsMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userParamsMessage"])
                instance.errorCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorCode"])
                instance.correlationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationId"])
                instance.userParams = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userParams"])
                instance.insertDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["insertDate"])
                return instance
            }


            // Decoder for [ININPolicyErrors]
            Decoders.addDecoder(clazz: [ININPolicyErrors].self) { (source: AnyObject) -> [ININPolicyErrors] in
                return Decoders.decode(clazz: [ININPolicyErrors].self, source: source)
            }
            // Decoder for ININPolicyErrors
            Decoders.addDecoder(clazz: ININPolicyErrors.self) { (source: AnyObject) -> ININPolicyErrors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPolicyErrors()
                instance.policyErrorMessages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["policyErrorMessages"])
                return instance
            }


            // Decoder for [ININPortBillingAddress]
            Decoders.addDecoder(clazz: [ININPortBillingAddress].self) { (source: AnyObject) -> [ININPortBillingAddress] in
                return Decoders.decode(clazz: [ININPortBillingAddress].self, source: source)
            }
            // Decoder for ININPortBillingAddress
            Decoders.addDecoder(clazz: ININPortBillingAddress.self) { (source: AnyObject) -> ININPortBillingAddress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPortBillingAddress()
                instance.streetAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["streetAddress"])
                instance.cityProvince = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cityProvince"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zipPostal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipPostal"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                return instance
            }


            // Decoder for [ININPortContact]
            Decoders.addDecoder(clazz: [ININPortContact].self) { (source: AnyObject) -> [ININPortContact] in
                return Decoders.decode(clazz: [ININPortContact].self, source: source)
            }
            // Decoder for ININPortContact
            Decoders.addDecoder(clazz: ININPortContact.self) { (source: AnyObject) -> ININPortContact in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPortContact()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                return instance
            }


            // Decoder for [ININPredictionResults]
            Decoders.addDecoder(clazz: [ININPredictionResults].self) { (source: AnyObject) -> [ININPredictionResults] in
                return Decoders.decode(clazz: [ININPredictionResults].self, source: source)
            }
            // Decoder for ININPredictionResults
            Decoders.addDecoder(clazz: ININPredictionResults.self) { (source: AnyObject) -> ININPredictionResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPredictionResults()
                instance.formula = ININPredictionResults.ININFormula(rawValue: (sourceDictionary["formula"] as? String) ?? "") 
                instance.estimatedWaitTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedWaitTimeSeconds"])
                return instance
            }


            // Decoder for [ININPresenceQueryResponse]
            Decoders.addDecoder(clazz: [ININPresenceQueryResponse].self) { (source: AnyObject) -> [ININPresenceQueryResponse] in
                return Decoders.decode(clazz: [ININPresenceQueryResponse].self, source: source)
            }
            // Decoder for ININPresenceQueryResponse
            Decoders.addDecoder(clazz: ININPresenceQueryResponse.self) { (source: AnyObject) -> ININPresenceQueryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPresenceQueryResponse()
                instance.systemToOrganizationMappings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["systemToOrganizationMappings"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININProduct]
            Decoders.addDecoder(clazz: [ININProduct].self) { (source: AnyObject) -> [ININProduct] in
                return Decoders.decode(clazz: [ININProduct].self, source: source)
            }
            // Decoder for ININProduct
            Decoders.addDecoder(clazz: ININProduct.self) { (source: AnyObject) -> ININProduct in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININProduct()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.status = ININProduct.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.comments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["comments"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPrompt]
            Decoders.addDecoder(clazz: [ININPrompt].self) { (source: AnyObject) -> [ININPrompt] in
                return Decoders.decode(clazz: [ININPrompt].self, source: source)
            }
            // Decoder for ININPrompt
            Decoders.addDecoder(clazz: ININPrompt.self) { (source: AnyObject) -> ININPrompt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPrompt()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.resources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["resources"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPromptAsset]
            Decoders.addDecoder(clazz: [ININPromptAsset].self) { (source: AnyObject) -> [ININPromptAsset] in
                return Decoders.decode(clazz: [ININPromptAsset].self, source: source)
            }
            // Decoder for ININPromptAsset
            Decoders.addDecoder(clazz: ININPromptAsset.self) { (source: AnyObject) -> ININPromptAsset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPromptAsset()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.promptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptId"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                instance.mediaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaUri"])
                instance.ttsString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ttsString"])
                instance.uploadStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadStatus"])
                instance.uploadUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadUri"])
                instance.languageDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["languageDefault"])
                instance.tags = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["tags"])
                instance.durationSeconds = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["durationSeconds"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPromptAssetEntityListing]
            Decoders.addDecoder(clazz: [ININPromptAssetEntityListing].self) { (source: AnyObject) -> [ININPromptAssetEntityListing] in
                return Decoders.decode(clazz: [ININPromptAssetEntityListing].self, source: source)
            }
            // Decoder for ININPromptAssetEntityListing
            Decoders.addDecoder(clazz: ININPromptAssetEntityListing.self) { (source: AnyObject) -> ININPromptAssetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPromptAssetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPromptEntityListing]
            Decoders.addDecoder(clazz: [ININPromptEntityListing].self) { (source: AnyObject) -> [ININPromptEntityListing] in
                return Decoders.decode(clazz: [ININPromptEntityListing].self, source: source)
            }
            // Decoder for ININPromptEntityListing
            Decoders.addDecoder(clazz: ININPromptEntityListing.self) { (source: AnyObject) -> ININPromptEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPromptEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININPropertyIndexRequest]
            Decoders.addDecoder(clazz: [ININPropertyIndexRequest].self) { (source: AnyObject) -> [ININPropertyIndexRequest] in
                return Decoders.decode(clazz: [ININPropertyIndexRequest].self, source: source)
            }
            // Decoder for ININPropertyIndexRequest
            Decoders.addDecoder(clazz: ININPropertyIndexRequest.self) { (source: AnyObject) -> ININPropertyIndexRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPropertyIndexRequest()
                instance.sessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sessionId"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ININProvisionInfo]
            Decoders.addDecoder(clazz: [ININProvisionInfo].self) { (source: AnyObject) -> [ININProvisionInfo] in
                return Decoders.decode(clazz: [ININProvisionInfo].self, source: source)
            }
            // Decoder for ININProvisionInfo
            Decoders.addDecoder(clazz: ININProvisionInfo.self) { (source: AnyObject) -> ININProvisionInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININProvisionInfo()
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.errorInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorInfo"])
                return instance
            }


            // Decoder for [ININPublication]
            Decoders.addDecoder(clazz: [ININPublication].self) { (source: AnyObject) -> [ININPublication] in
                return Decoders.decode(clazz: [ININPublication].self, source: source)
            }
            // Decoder for ININPublication
            Decoders.addDecoder(clazz: ININPublication.self) { (source: AnyObject) -> ININPublication in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPublication()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.tweetText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tweetText"])
                instance.rawTweetText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rawTweetText"])
                instance.approved = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["approved"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPublishScriptRequestData]
            Decoders.addDecoder(clazz: [ININPublishScriptRequestData].self) { (source: AnyObject) -> [ININPublishScriptRequestData] in
                return Decoders.decode(clazz: [ININPublishScriptRequestData].self, source: source)
            }
            // Decoder for ININPublishScriptRequestData
            Decoders.addDecoder(clazz: ININPublishScriptRequestData.self) { (source: AnyObject) -> ININPublishScriptRequestData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPublishScriptRequestData()
                instance.scriptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scriptId"])
                instance.versionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionId"])
                return instance
            }


            // Decoder for [ININPublishedResult]
            Decoders.addDecoder(clazz: [ININPublishedResult].self) { (source: AnyObject) -> [ININPublishedResult] in
                return Decoders.decode(clazz: [ININPublishedResult].self, source: source)
            }
            // Decoder for ININPublishedResult
            Decoders.addDecoder(clazz: ININPublishedResult.self) { (source: AnyObject) -> ININPublishedResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPublishedResult()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININPublishedResult.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININPureCloud]
            Decoders.addDecoder(clazz: [ININPureCloud].self) { (source: AnyObject) -> [ININPureCloud] in
                return Decoders.decode(clazz: [ININPureCloud].self, source: source)
            }
            // Decoder for ININPureCloud
            Decoders.addDecoder(clazz: ININPureCloud.self) { (source: AnyObject) -> ININPureCloud in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININPureCloud()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQualityAudit]
            Decoders.addDecoder(clazz: [ININQualityAudit].self) { (source: AnyObject) -> [ININQualityAudit] in
                return Decoders.decode(clazz: [ININQualityAudit].self, source: source)
            }
            // Decoder for ININQualityAudit
            Decoders.addDecoder(clazz: ININQualityAudit.self) { (source: AnyObject) -> ININQualityAudit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQualityAudit()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.timestamp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestamp"])
                instance.entity = Decoders.decodeOptional(clazz: ININAuditEntity.self, source: sourceDictionary["entity"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.changes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["changes"])
                instance.entityType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityType"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQualityAuditPage]
            Decoders.addDecoder(clazz: [ININQualityAuditPage].self) { (source: AnyObject) -> [ININQualityAuditPage] in
                return Decoders.decode(clazz: [ININQualityAuditPage].self, source: source)
            }
            // Decoder for ININQualityAuditPage
            Decoders.addDecoder(clazz: ININQualityAuditPage.self) { (source: AnyObject) -> ININQualityAuditPage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQualityAuditPage()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININQueryFacetInfo]
            Decoders.addDecoder(clazz: [ININQueryFacetInfo].self) { (source: AnyObject) -> [ININQueryFacetInfo] in
                return Decoders.decode(clazz: [ININQueryFacetInfo].self, source: source)
            }
            // Decoder for ININQueryFacetInfo
            Decoders.addDecoder(clazz: ININQueryFacetInfo.self) { (source: AnyObject) -> ININQueryFacetInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueryFacetInfo()
                instance.attributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attributes"])
                instance.facets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facets"])
                return instance
            }


            // Decoder for [ININQueryRequest]
            Decoders.addDecoder(clazz: [ININQueryRequest].self) { (source: AnyObject) -> [ININQueryRequest] in
                return Decoders.decode(clazz: [ININQueryRequest].self, source: source)
            }
            // Decoder for ININQueryRequest
            Decoders.addDecoder(clazz: ININQueryRequest.self) { (source: AnyObject) -> ININQueryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueryRequest()
                instance.queryPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queryPhrase"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.facetNameRequests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetNameRequests"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                instance.attributeFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attributeFilters"])
                instance.includeShares = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["includeShares"])
                return instance
            }


            // Decoder for [ININQueryResult]
            Decoders.addDecoder(clazz: [ININQueryResult].self) { (source: AnyObject) -> [ININQueryResult] in
                return Decoders.decode(clazz: [ININQueryResult].self, source: source)
            }
            // Decoder for ININQueryResult
            Decoders.addDecoder(clazz: ININQueryResult.self) { (source: AnyObject) -> ININQueryResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueryResult()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.body = Decoders.decodeOptional(clazz: ININDomainEntity.self, source: sourceDictionary["body"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQueryResults]
            Decoders.addDecoder(clazz: [ININQueryResults].self) { (source: AnyObject) -> [ININQueryResults] in
                return Decoders.decode(clazz: [ININQueryResults].self, source: source)
            }
            // Decoder for ININQueryResults
            Decoders.addDecoder(clazz: ININQueryResults.self) { (source: AnyObject) -> ININQueryResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueryResults()
                instance.results = Decoders.decodeOptional(clazz: ININDomainEntityListingQueryResult.self, source: sourceDictionary["results"])
                instance.facetInfo = Decoders.decodeOptional(clazz: ININQueryFacetInfo.self, source: sourceDictionary["facetInfo"])
                return instance
            }


            // Decoder for [ININQuestionGroup]
            Decoders.addDecoder(clazz: [ININQuestionGroup].self) { (source: AnyObject) -> [ININQuestionGroup] in
                return Decoders.decode(clazz: [ININQuestionGroup].self, source: source)
            }
            // Decoder for ININQuestionGroup
            Decoders.addDecoder(clazz: ININQuestionGroup.self) { (source: AnyObject) -> ININQuestionGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuestionGroup()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.defaultAnswersToHighest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["defaultAnswersToHighest"])
                instance.defaultAnswersToNA = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["defaultAnswersToNA"])
                instance.naEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["naEnabled"])
                instance.weight = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["weight"])
                instance.manualWeight = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualWeight"])
                instance.questions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["questions"])
                return instance
            }


            // Decoder for [ININQuestionGroupScore]
            Decoders.addDecoder(clazz: [ININQuestionGroupScore].self) { (source: AnyObject) -> [ININQuestionGroupScore] in
                return Decoders.decode(clazz: [ININQuestionGroupScore].self, source: source)
            }
            // Decoder for ININQuestionGroupScore
            Decoders.addDecoder(clazz: ININQuestionGroupScore.self) { (source: AnyObject) -> ININQuestionGroupScore in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuestionGroupScore()
                instance.questionGroupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["questionGroupId"])
                instance.totalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalScore"])
                instance.maxTotalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maxTotalScore"])
                instance.totalCriticalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalCriticalScore"])
                instance.maxTotalCriticalScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maxTotalCriticalScore"])
                instance.totalScoreUnweighted = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalScoreUnweighted"])
                instance.maxTotalScoreUnweighted = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maxTotalScoreUnweighted"])
                instance.totalCriticalScoreUnweighted = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["totalCriticalScoreUnweighted"])
                instance.maxTotalCriticalScoreUnweighted = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maxTotalCriticalScoreUnweighted"])
                instance.markedNA = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["markedNA"])
                instance.questionScores = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["questionScores"])
                return instance
            }


            // Decoder for [ININQuestionScore]
            Decoders.addDecoder(clazz: [ININQuestionScore].self) { (source: AnyObject) -> [ININQuestionScore] in
                return Decoders.decode(clazz: [ININQuestionScore].self, source: source)
            }
            // Decoder for ININQuestionScore
            Decoders.addDecoder(clazz: ININQuestionScore.self) { (source: AnyObject) -> ININQuestionScore in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuestionScore()
                instance.questionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["questionId"])
                instance.answerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["answerId"])
                instance.score = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["score"])
                instance.markedNA = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["markedNA"])
                instance.failedKillQuestion = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["failedKillQuestion"])
                instance.comments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comments"])
                return instance
            }


            // Decoder for [ININQueue]
            Decoders.addDecoder(clazz: [ININQueue].self) { (source: AnyObject) -> [ININQueue] in
                return Decoders.decode(clazz: [ININQueue].self, source: source)
            }
            // Decoder for ININQueue
            Decoders.addDecoder(clazz: ININQueue.self) { (source: AnyObject) -> ININQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueue()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININQueue.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.mediaSettings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["mediaSettings"])
                instance.bullseye = Decoders.decodeOptional(clazz: ININBullseye.self, source: sourceDictionary["bullseye"])
                instance.acwSettings = Decoders.decodeOptional(clazz: ININAcwSettings.self, source: sourceDictionary["acwSettings"])
                instance.skillEvaluationMethod = ININQueue.ININSkillEvaluationMethod(rawValue: (sourceDictionary["skillEvaluationMethod"] as? String) ?? "") 
                instance.queueFlow = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queueFlow"])
                instance.callingPartyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callingPartyName"])
                instance.callingPartyNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callingPartyNumber"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["memberCount"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQueueEntityListing]
            Decoders.addDecoder(clazz: [ININQueueEntityListing].self) { (source: AnyObject) -> [ININQueueEntityListing] in
                return Decoders.decode(clazz: [ININQueueEntityListing].self, source: source)
            }
            // Decoder for ININQueueEntityListing
            Decoders.addDecoder(clazz: ININQueueEntityListing.self) { (source: AnyObject) -> ININQueueEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueueEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININQueueMember]
            Decoders.addDecoder(clazz: [ININQueueMember].self) { (source: AnyObject) -> [ININQueueMember] in
                return Decoders.decode(clazz: [ININQueueMember].self, source: source)
            }
            // Decoder for ININQueueMember
            Decoders.addDecoder(clazz: ININQueueMember.self) { (source: AnyObject) -> ININQueueMember in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueueMember()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.ringNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ringNumber"])
                instance.joined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["joined"])
                instance.memberBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memberBy"])
                instance.routingStatus = Decoders.decodeOptional(clazz: ININRoutingStatus.self, source: sourceDictionary["routingStatus"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQueueUtilizationDiagnostic]
            Decoders.addDecoder(clazz: [ININQueueUtilizationDiagnostic].self) { (source: AnyObject) -> [ININQueueUtilizationDiagnostic] in
                return Decoders.decode(clazz: [ININQueueUtilizationDiagnostic].self, source: source)
            }
            // Decoder for ININQueueUtilizationDiagnostic
            Decoders.addDecoder(clazz: ININQueueUtilizationDiagnostic.self) { (source: AnyObject) -> ININQueueUtilizationDiagnostic in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQueueUtilizationDiagnostic()
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.usersInQueue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersInQueue"])
                instance.activeUsersInQueue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["activeUsersInQueue"])
                instance.usersOnQueue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersOnQueue"])
                instance.usersNotUtilized = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersNotUtilized"])
                instance.usersOnQueueWithStation = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersOnQueueWithStation"])
                instance.usersOnACampaignCall = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersOnACampaignCall"])
                instance.usersOnDifferentEdgeGroup = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersOnDifferentEdgeGroup"])
                instance.usersOnANonCampaignCall = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["usersOnANonCampaignCall"])
                return instance
            }


            // Decoder for [ININQuote]
            Decoders.addDecoder(clazz: [ININQuote].self) { (source: AnyObject) -> [ININQuote] in
                return Decoders.decode(clazz: [ININQuote].self, source: source)
            }
            // Decoder for ININQuote
            Decoders.addDecoder(clazz: ININQuote.self) { (source: AnyObject) -> ININQuote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuote()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.purchaseOrder = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purchaseOrder"])
                instance.type = ININQuote.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.status = ININQuote.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.lastUpdatedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastUpdatedDate"])
                instance.billingContactEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactEmail"])
                instance.billingContactFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactFirstName"])
                instance.billingContactLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactLastName"])
                instance.billingContactPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billingContactPhone"])
                instance.includeVoiceCharges = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["includeVoiceCharges"])
                instance.charges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["charges"])
                instance.edgeControlModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["edgeControlModel"])
                instance.referralCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["referralCodes"])
                instance.discountCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["discountCodes"])
                instance.salesPartnerCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["salesPartnerCode"])
                instance.isAnnualPrepay = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isAnnualPrepay"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININQuoteCharge]
            Decoders.addDecoder(clazz: [ININQuoteCharge].self) { (source: AnyObject) -> [ININQuoteCharge] in
                return Decoders.decode(clazz: [ININQuoteCharge].self, source: source)
            }
            // Decoder for ININQuoteCharge
            Decoders.addDecoder(clazz: ININQuoteCharge.self) { (source: AnyObject) -> ININQuoteCharge in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuoteCharge()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.chargeType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chargeType"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                instance.listTotal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["listTotal"])
                instance.total = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["total"])
                instance.listPriceDisplay = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["listPriceDisplay"])
                instance.discount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["discount"])
                instance.effectivePrice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectivePrice"])
                instance.productShippable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["productShippable"])
                instance.shippingAddress = Decoders.decodeOptional(clazz: ININBillingAddress.self, source: sourceDictionary["shippingAddress"])
                instance.forRelatedPart = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["forRelatedPart"])
                return instance
            }


            // Decoder for [ININQuoteListing]
            Decoders.addDecoder(clazz: [ININQuoteListing].self) { (source: AnyObject) -> [ININQuoteListing] in
                return Decoders.decode(clazz: [ININQuoteListing].self, source: source)
            }
            // Decoder for ININQuoteListing
            Decoders.addDecoder(clazz: ININQuoteListing.self) { (source: AnyObject) -> ININQuoteListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININQuoteListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININRate]
            Decoders.addDecoder(clazz: [ININRate].self) { (source: AnyObject) -> [ININRate] in
                return Decoders.decode(clazz: [ININRate].self, source: source)
            }
            // Decoder for ININRate
            Decoders.addDecoder(clazz: ININRate.self) { (source: AnyObject) -> ININRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRate()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.partNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["partNumber"])
                instance.tiers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tiers"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININReaction]
            Decoders.addDecoder(clazz: [ININReaction].self) { (source: AnyObject) -> [ININReaction] in
                return Decoders.decode(clazz: [ININReaction].self, source: source)
            }
            // Decoder for ININReaction
            Decoders.addDecoder(clazz: ININReaction.self) { (source: AnyObject) -> ININReaction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReaction()
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.reactionType = ININReaction.ININReactionType(rawValue: (sourceDictionary["reactionType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININRecording]
            Decoders.addDecoder(clazz: [ININRecording].self) { (source: AnyObject) -> [ININRecording] in
                return Decoders.decode(clazz: [ININRecording].self, source: source)
            }
            // Decoder for ININRecording
            Decoders.addDecoder(clazz: ININRecording.self) { (source: AnyObject) -> ININRecording in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRecording()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.conversationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["conversationId"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.media = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["media"])
                instance.annotations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["annotations"])
                instance.transcript = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["transcript"])
                instance.emailTranscript = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emailTranscript"])
                instance.fileState = ININRecording.ININFileState(rawValue: (sourceDictionary["fileState"] as? String) ?? "") 
                instance.restoreExpirationTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["restoreExpirationTime"])
                instance.mediaUris = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["mediaUris"])
                instance.estimatedTranscodeTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["estimatedTranscodeTimeMs"])
                instance.actualTranscodeTimeMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["actualTranscodeTimeMs"])
                instance.archiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["archiveDate"])
                instance.archiveMedium = ININRecording.ININArchiveMedium(rawValue: (sourceDictionary["archiveMedium"] as? String) ?? "") 
                instance.deleteDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["deleteDate"])
                instance.maxAllowedRestorationsForOrg = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxAllowedRestorationsForOrg"])
                instance.remainingRestorationsAllowedForOrg = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["remainingRestorationsAllowedForOrg"])
                instance.sessionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sessionId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININRecordingEmailMessage]
            Decoders.addDecoder(clazz: [ININRecordingEmailMessage].self) { (source: AnyObject) -> [ININRecordingEmailMessage] in
                return Decoders.decode(clazz: [ININRecordingEmailMessage].self, source: source)
            }
            // Decoder for ININRecordingEmailMessage
            Decoders.addDecoder(clazz: ININRecordingEmailMessage.self) { (source: AnyObject) -> ININRecordingEmailMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRecordingEmailMessage()
                instance.htmlBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["htmlBody"])
                instance.textBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["textBody"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.to = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["to"])
                instance.cc = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cc"])
                instance.bcc = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bcc"])
                instance.from = Decoders.decodeOptional(clazz: ININEmailAddress.self, source: sourceDictionary["from"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.attachments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attachments"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                return instance
            }


            // Decoder for [ININRecordingSettings]
            Decoders.addDecoder(clazz: [ININRecordingSettings].self) { (source: AnyObject) -> [ININRecordingSettings] in
                return Decoders.decode(clazz: [ININRecordingSettings].self, source: source)
            }
            // Decoder for ININRecordingSettings
            Decoders.addDecoder(clazz: ININRecordingSettings.self) { (source: AnyObject) -> ININRecordingSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRecordingSettings()
                instance.maxSimultaneousStreams = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maxSimultaneousStreams"])
                return instance
            }


            // Decoder for [ININRelationship]
            Decoders.addDecoder(clazz: [ININRelationship].self) { (source: AnyObject) -> [ININRelationship] in
                return Decoders.decode(clazz: [ININRelationship].self, source: source)
            }
            // Decoder for ININRelationship
            Decoders.addDecoder(clazz: ININRelationship.self) { (source: AnyObject) -> ININRelationship in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRelationship()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.externalOrganization = Decoders.decodeOptional(clazz: ININExternalOrganization.self, source: sourceDictionary["externalOrganization"])
                instance.relationship = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationship"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININRelationshipListing]
            Decoders.addDecoder(clazz: [ININRelationshipListing].self) { (source: AnyObject) -> [ININRelationshipListing] in
                return Decoders.decode(clazz: [ININRelationshipListing].self, source: source)
            }
            // Decoder for ININRelationshipListing
            Decoders.addDecoder(clazz: ININRelationshipListing.self) { (source: AnyObject) -> ININRelationshipListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRelationshipListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININReplaceRequest]
            Decoders.addDecoder(clazz: [ININReplaceRequest].self) { (source: AnyObject) -> [ININReplaceRequest] in
                return Decoders.decode(clazz: [ININReplaceRequest].self, source: source)
            }
            // Decoder for ININReplaceRequest
            Decoders.addDecoder(clazz: ININReplaceRequest.self) { (source: AnyObject) -> ININReplaceRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReplaceRequest()
                instance.changeNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["changeNumber"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.authToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authToken"])
                return instance
            }


            // Decoder for [ININReplaceResponse]
            Decoders.addDecoder(clazz: [ININReplaceResponse].self) { (source: AnyObject) -> [ININReplaceResponse] in
                return Decoders.decode(clazz: [ININReplaceResponse].self, source: source)
            }
            // Decoder for ININReplaceResponse
            Decoders.addDecoder(clazz: ININReplaceResponse.self) { (source: AnyObject) -> ININReplaceResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReplaceResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.changeNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["changeNumber"])
                instance.uploadStatus = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["uploadStatus"])
                instance.uploadDestinationUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadDestinationUri"])
                instance.uploadMethod = ININReplaceResponse.ININUploadMethod(rawValue: (sourceDictionary["uploadMethod"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININReportMetaData]
            Decoders.addDecoder(clazz: [ININReportMetaData].self) { (source: AnyObject) -> [ININReportMetaData] in
                return Decoders.decode(clazz: [ININReportMetaData].self, source: source)
            }
            // Decoder for ININReportMetaData
            Decoders.addDecoder(clazz: ININReportMetaData.self) { (source: AnyObject) -> ININReportMetaData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportMetaData()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.keywords = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["keywords"])
                instance.availableLocales = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["availableLocales"])
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.exampleUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exampleUrl"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININReportMetaDataEntityListing]
            Decoders.addDecoder(clazz: [ININReportMetaDataEntityListing].self) { (source: AnyObject) -> [ININReportMetaDataEntityListing] in
                return Decoders.decode(clazz: [ININReportMetaDataEntityListing].self, source: source)
            }
            // Decoder for ININReportMetaDataEntityListing
            Decoders.addDecoder(clazz: ININReportMetaDataEntityListing.self) { (source: AnyObject) -> ININReportMetaDataEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportMetaDataEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININReportRequest]
            Decoders.addDecoder(clazz: [ININReportRequest].self) { (source: AnyObject) -> [ININReportRequest] in
                return Decoders.decode(clazz: [ININReportRequest].self, source: source)
            }
            // Decoder for ININReportRequest
            Decoders.addDecoder(clazz: ININReportRequest.self) { (source: AnyObject) -> ININReportRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportRequest()
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.facetRequests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetRequests"])
                instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                instance.groupBy = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groupBy"])
                return instance
            }


            // Decoder for [ININReportRunEntry]
            Decoders.addDecoder(clazz: [ININReportRunEntry].self) { (source: AnyObject) -> [ININReportRunEntry] in
                return Decoders.decode(clazz: [ININReportRunEntry].self, source: source)
            }
            // Decoder for ININReportRunEntry
            Decoders.addDecoder(clazz: ININReportRunEntry.self) { (source: AnyObject) -> ININReportRunEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportRunEntry()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.reportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reportId"])
                instance.runTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["runTime"])
                instance.runStatus = ININReportRunEntry.ININRunStatus(rawValue: (sourceDictionary["runStatus"] as? String) ?? "") 
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.runDurationMsec = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["runDurationMsec"])
                instance.reportUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reportUrl"])
                instance.reportFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reportFormat"])
                instance.scheduleUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scheduleUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININReportRunEntryEntityDomainListing]
            Decoders.addDecoder(clazz: [ININReportRunEntryEntityDomainListing].self) { (source: AnyObject) -> [ININReportRunEntryEntityDomainListing] in
                return Decoders.decode(clazz: [ININReportRunEntryEntityDomainListing].self, source: source)
            }
            // Decoder for ININReportRunEntryEntityDomainListing
            Decoders.addDecoder(clazz: ININReportRunEntryEntityDomainListing.self) { (source: AnyObject) -> ININReportRunEntryEntityDomainListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportRunEntryEntityDomainListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININReportSchedule]
            Decoders.addDecoder(clazz: [ININReportSchedule].self) { (source: AnyObject) -> [ININReportSchedule] in
                return Decoders.decode(clazz: [ININReportSchedule].self, source: source)
            }
            // Decoder for ININReportSchedule
            Decoders.addDecoder(clazz: ININReportSchedule.self) { (source: AnyObject) -> ININReportSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportSchedule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.quartzCronExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quartzCronExpression"])
                instance.nextFireTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["nextFireTime"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.timeZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZone"])
                instance.timePeriod = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timePeriod"])
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.reportFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reportFormat"])
                instance.locale = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["locale"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.reportId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reportId"])
                instance.parameters = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["parameters"])
                instance.lastRun = Decoders.decodeOptional(clazz: ININReportRunEntry.self, source: sourceDictionary["lastRun"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININReportScheduleEntityListing]
            Decoders.addDecoder(clazz: [ININReportScheduleEntityListing].self) { (source: AnyObject) -> [ININReportScheduleEntityListing] in
                return Decoders.decode(clazz: [ININReportScheduleEntityListing].self, source: source)
            }
            // Decoder for ININReportScheduleEntityListing
            Decoders.addDecoder(clazz: ININReportScheduleEntityListing.self) { (source: AnyObject) -> ININReportScheduleEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReportScheduleEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININReservation]
            Decoders.addDecoder(clazz: [ININReservation].self) { (source: AnyObject) -> [ININReservation] in
                return Decoders.decode(clazz: [ININReservation].self, source: source)
            }
            // Decoder for ININReservation
            Decoders.addDecoder(clazz: ININReservation.self) { (source: AnyObject) -> ININReservation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININReservation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.reservedTn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reservedTn"])
                instance.reservationExpires = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["reservationExpires"])
                instance.phoneNumberType = ININReservation.ININPhoneNumberType(rawValue: (sourceDictionary["phoneNumberType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININResourceConditionNode]
            Decoders.addDecoder(clazz: [ININResourceConditionNode].self) { (source: AnyObject) -> [ININResourceConditionNode] in
                return Decoders.decode(clazz: [ININResourceConditionNode].self, source: source)
            }
            // Decoder for ININResourceConditionNode
            Decoders.addDecoder(clazz: ININResourceConditionNode.self) { (source: AnyObject) -> ININResourceConditionNode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResourceConditionNode()
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance.conjunction = ININResourceConditionNode.ININConjunction(rawValue: (sourceDictionary["conjunction"] as? String) ?? "") 
                instance._operator = ININResourceConditionNode.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.operands = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["operands"])
                instance.terms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["terms"])
                return instance
            }


            // Decoder for [ININResourceConditionValue]
            Decoders.addDecoder(clazz: [ININResourceConditionValue].self) { (source: AnyObject) -> [ININResourceConditionValue] in
                return Decoders.decode(clazz: [ININResourceConditionValue].self, source: source)
            }
            // Decoder for ININResourceConditionValue
            Decoders.addDecoder(clazz: ININResourceConditionValue.self) { (source: AnyObject) -> ININResourceConditionValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResourceConditionValue()
                instance.type = ININResourceConditionValue.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ININResourcePermissionPolicy]
            Decoders.addDecoder(clazz: [ININResourcePermissionPolicy].self) { (source: AnyObject) -> [ININResourcePermissionPolicy] in
                return Decoders.decode(clazz: [ININResourcePermissionPolicy].self, source: source)
            }
            // Decoder for ININResourcePermissionPolicy
            Decoders.addDecoder(clazz: ININResourcePermissionPolicy.self) { (source: AnyObject) -> ININResourcePermissionPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResourcePermissionPolicy()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.domain = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"])
                instance.entityName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entityName"])
                instance.policyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["policyName"])
                instance.policyDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["policyDescription"])
                instance.actionSetKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["actionSetKey"])
                instance.resourceConditionNode = Decoders.decodeOptional(clazz: ININResourceConditionNode.self, source: sourceDictionary["resourceConditionNode"])
                instance.namedResources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["namedResources"])
                instance.resourceCondition = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resourceCondition"])
                instance.actionSet = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionSet"])
                return instance
            }


            // Decoder for [ININResponse]
            Decoders.addDecoder(clazz: [ININResponse].self) { (source: AnyObject) -> [ININResponse] in
                return Decoders.decode(clazz: [ININResponse].self, source: source)
            }
            // Decoder for ININResponse
            Decoders.addDecoder(clazz: ININResponse.self) { (source: AnyObject) -> ININResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.libraries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["libraries"])
                instance.texts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["texts"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["createdBy"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.interactionType = ININResponse.ININInteractionType(rawValue: (sourceDictionary["interactionType"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININResponseEntityList]
            Decoders.addDecoder(clazz: [ININResponseEntityList].self) { (source: AnyObject) -> [ININResponseEntityList] in
                return Decoders.decode(clazz: [ININResponseEntityList].self, source: source)
            }
            // Decoder for ININResponseEntityList
            Decoders.addDecoder(clazz: ININResponseEntityList.self) { (source: AnyObject) -> ININResponseEntityList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseEntityList()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININResponseEntityListing]
            Decoders.addDecoder(clazz: [ININResponseEntityListing].self) { (source: AnyObject) -> [ININResponseEntityListing] in
                return Decoders.decode(clazz: [ININResponseEntityListing].self, source: source)
            }
            // Decoder for ININResponseEntityListing
            Decoders.addDecoder(clazz: ININResponseEntityListing.self) { (source: AnyObject) -> ININResponseEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININResponseFilter]
            Decoders.addDecoder(clazz: [ININResponseFilter].self) { (source: AnyObject) -> [ININResponseFilter] in
                return Decoders.decode(clazz: [ININResponseFilter].self, source: source)
            }
            // Decoder for ININResponseFilter
            Decoders.addDecoder(clazz: ININResponseFilter.self) { (source: AnyObject) -> ININResponseFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseFilter()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance._operator = ININResponseFilter.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                return instance
            }


            // Decoder for [ININResponseQueryRequest]
            Decoders.addDecoder(clazz: [ININResponseQueryRequest].self) { (source: AnyObject) -> [ININResponseQueryRequest] in
                return Decoders.decode(clazz: [ININResponseQueryRequest].self, source: source)
            }
            // Decoder for ININResponseQueryRequest
            Decoders.addDecoder(clazz: ININResponseQueryRequest.self) { (source: AnyObject) -> ININResponseQueryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseQueryRequest()
                instance.queryPhrase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queryPhrase"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                return instance
            }


            // Decoder for [ININResponseQueryResults]
            Decoders.addDecoder(clazz: [ININResponseQueryResults].self) { (source: AnyObject) -> [ININResponseQueryResults] in
                return Decoders.decode(clazz: [ININResponseQueryResults].self, source: source)
            }
            // Decoder for ININResponseQueryResults
            Decoders.addDecoder(clazz: ININResponseQueryResults.self) { (source: AnyObject) -> ININResponseQueryResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseQueryResults()
                instance.results = Decoders.decodeOptional(clazz: ININResponseEntityList.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ININResponseSet]
            Decoders.addDecoder(clazz: [ININResponseSet].self) { (source: AnyObject) -> [ININResponseSet] in
                return Decoders.decode(clazz: [ININResponseSet].self, source: source)
            }
            // Decoder for ININResponseSet
            Decoders.addDecoder(clazz: ININResponseSet.self) { (source: AnyObject) -> ININResponseSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseSet()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.responses = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["responses"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININResponseSetEntityListing]
            Decoders.addDecoder(clazz: [ININResponseSetEntityListing].self) { (source: AnyObject) -> [ININResponseSetEntityListing] in
                return Decoders.decode(clazz: [ININResponseSetEntityListing].self, source: source)
            }
            // Decoder for ININResponseSetEntityListing
            Decoders.addDecoder(clazz: ININResponseSetEntityListing.self) { (source: AnyObject) -> ININResponseSetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseSetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININResponseText]
            Decoders.addDecoder(clazz: [ININResponseText].self) { (source: AnyObject) -> [ININResponseText] in
                return Decoders.decode(clazz: [ININResponseText].self, source: source)
            }
            // Decoder for ININResponseText
            Decoders.addDecoder(clazz: ININResponseText.self) { (source: AnyObject) -> ININResponseText in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININResponseText()
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.contentType = ININResponseText.ININContentType(rawValue: (sourceDictionary["contentType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININRestErrorDetail]
            Decoders.addDecoder(clazz: [ININRestErrorDetail].self) { (source: AnyObject) -> [ININRestErrorDetail] in
                return Decoders.decode(clazz: [ININRestErrorDetail].self, source: source)
            }
            // Decoder for ININRestErrorDetail
            Decoders.addDecoder(clazz: ININRestErrorDetail.self) { (source: AnyObject) -> ININRestErrorDetail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRestErrorDetail()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                return instance
            }


            // Decoder for [ININRetentionDuration]
            Decoders.addDecoder(clazz: [ININRetentionDuration].self) { (source: AnyObject) -> [ININRetentionDuration] in
                return Decoders.decode(clazz: [ININRetentionDuration].self, source: source)
            }
            // Decoder for ININRetentionDuration
            Decoders.addDecoder(clazz: ININRetentionDuration.self) { (source: AnyObject) -> ININRetentionDuration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRetentionDuration()
                instance.archiveRetention = Decoders.decodeOptional(clazz: ININArchiveRetention.self, source: sourceDictionary["archiveRetention"])
                instance.deleteRetention = Decoders.decodeOptional(clazz: ININDeleteRetention.self, source: sourceDictionary["deleteRetention"])
                return instance
            }


            // Decoder for [ININRing]
            Decoders.addDecoder(clazz: [ININRing].self) { (source: AnyObject) -> [ININRing] in
                return Decoders.decode(clazz: [ININRing].self, source: source)
            }
            // Decoder for ININRing
            Decoders.addDecoder(clazz: ININRing.self) { (source: AnyObject) -> ININRing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRing()
                instance.expansionCriteria = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["expansionCriteria"])
                instance.actions = Decoders.decodeOptional(clazz: ININActions.self, source: sourceDictionary["actions"])
                return instance
            }


            // Decoder for [ININRoutingData]
            Decoders.addDecoder(clazz: [ININRoutingData].self) { (source: AnyObject) -> [ININRoutingData] in
                return Decoders.decode(clazz: [ININRoutingData].self, source: source)
            }
            // Decoder for ININRoutingData
            Decoders.addDecoder(clazz: ININRoutingData.self) { (source: AnyObject) -> ININRoutingData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRoutingData()
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.languageId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["languageId"])
                instance.priority = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["priority"])
                instance.skillIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skillIds"])
                instance.preferredAgentIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["preferredAgentIds"])
                return instance
            }


            // Decoder for [ININRoutingSkill]
            Decoders.addDecoder(clazz: [ININRoutingSkill].self) { (source: AnyObject) -> [ININRoutingSkill] in
                return Decoders.decode(clazz: [ININRoutingSkill].self, source: source)
            }
            // Decoder for ININRoutingSkill
            Decoders.addDecoder(clazz: ININRoutingSkill.self) { (source: AnyObject) -> ININRoutingSkill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRoutingSkill()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.state = ININRoutingSkill.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININRoutingStatus]
            Decoders.addDecoder(clazz: [ININRoutingStatus].self) { (source: AnyObject) -> [ININRoutingStatus] in
                return Decoders.decode(clazz: [ININRoutingStatus].self, source: source)
            }
            // Decoder for ININRoutingStatus
            Decoders.addDecoder(clazz: ININRoutingStatus.self) { (source: AnyObject) -> ININRoutingStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRoutingStatus()
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.status = ININRoutingStatus.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                return instance
            }


            // Decoder for [ININRuleSet]
            Decoders.addDecoder(clazz: [ININRuleSet].self) { (source: AnyObject) -> [ININRuleSet] in
                return Decoders.decode(clazz: [ININRuleSet].self, source: source)
            }
            // Decoder for ININRuleSet
            Decoders.addDecoder(clazz: ININRuleSet.self) { (source: AnyObject) -> ININRuleSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRuleSet()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.contactList = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["contactList"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININRuleSetEntityListing]
            Decoders.addDecoder(clazz: [ININRuleSetEntityListing].self) { (source: AnyObject) -> [ININRuleSetEntityListing] in
                return Decoders.decode(clazz: [ININRuleSetEntityListing].self, source: source)
            }
            // Decoder for ININRuleSetEntityListing
            Decoders.addDecoder(clazz: ININRuleSetEntityListing.self) { (source: AnyObject) -> ININRuleSetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRuleSetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININRunNowResponse]
            Decoders.addDecoder(clazz: [ININRunNowResponse].self) { (source: AnyObject) -> [ININRunNowResponse] in
                return Decoders.decode(clazz: [ININRunNowResponse].self, source: source)
            }
            // Decoder for ININRunNowResponse
            Decoders.addDecoder(clazz: ININRunNowResponse.self) { (source: AnyObject) -> ININRunNowResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININRunNowResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSalesforce]
            Decoders.addDecoder(clazz: [ININSalesforce].self) { (source: AnyObject) -> [ININSalesforce] in
                return Decoders.decode(clazz: [ININSalesforce].self, source: source)
            }
            // Decoder for ININSalesforce
            Decoders.addDecoder(clazz: ININSalesforce.self) { (source: AnyObject) -> ININSalesforce in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSalesforce()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.certificate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["certificate"])
                instance.issuerURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["issuerURI"])
                instance.ssoTargetURI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssoTargetURI"])
                instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININScene]
            Decoders.addDecoder(clazz: [ININScene].self) { (source: AnyObject) -> [ININScene] in
                return Decoders.decode(clazz: [ININScene].self, source: source)
            }
            // Decoder for ININScene
            Decoders.addDecoder(clazz: ININScene.self) { (source: AnyObject) -> ININScene in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScene()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sceneGroup = Decoders.decodeOptional(clazz: ININSceneGroup.self, source: sourceDictionary["sceneGroup"])
                instance.assets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assets"])
                instance.thumbnail = Decoders.decodeOptional(clazz: ININThumbnail.self, source: sourceDictionary["thumbnail"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.waypoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["waypoints"])
                instance.defaultOrientationY = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["defaultOrientationY"])
                instance.type = ININScene.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSceneEntityListing]
            Decoders.addDecoder(clazz: [ININSceneEntityListing].self) { (source: AnyObject) -> [ININSceneEntityListing] in
                return Decoders.decode(clazz: [ININSceneEntityListing].self, source: source)
            }
            // Decoder for ININSceneEntityListing
            Decoders.addDecoder(clazz: ININSceneEntityListing.self) { (source: AnyObject) -> ININSceneEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSceneEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSceneGroup]
            Decoders.addDecoder(clazz: [ININSceneGroup].self) { (source: AnyObject) -> [ININSceneGroup] in
                return Decoders.decode(clazz: [ININSceneGroup].self, source: source)
            }
            // Decoder for ININSceneGroup
            Decoders.addDecoder(clazz: ININSceneGroup.self) { (source: AnyObject) -> ININSceneGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSceneGroup()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.queue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queue"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSceneGroupEntityListing]
            Decoders.addDecoder(clazz: [ININSceneGroupEntityListing].self) { (source: AnyObject) -> [ININSceneGroupEntityListing] in
                return Decoders.decode(clazz: [ININSceneGroupEntityListing].self, source: source)
            }
            // Decoder for ININSceneGroupEntityListing
            Decoders.addDecoder(clazz: ININSceneGroupEntityListing.self) { (source: AnyObject) -> ININSceneGroupEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSceneGroupEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSchedule]
            Decoders.addDecoder(clazz: [ININSchedule].self) { (source: AnyObject) -> [ININSchedule] in
                return Decoders.decode(clazz: [ININSchedule].self, source: source)
            }
            // Decoder for ININSchedule
            Decoders.addDecoder(clazz: ININSchedule.self) { (source: AnyObject) -> ININSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSchedule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININSchedule.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.start = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["end"])
                instance.rrule = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rrule"])
                instance.keywords = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["keywords"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININScheduleEntityListing]
            Decoders.addDecoder(clazz: [ININScheduleEntityListing].self) { (source: AnyObject) -> [ININScheduleEntityListing] in
                return Decoders.decode(clazz: [ININScheduleEntityListing].self, source: source)
            }
            // Decoder for ININScheduleEntityListing
            Decoders.addDecoder(clazz: ININScheduleEntityListing.self) { (source: AnyObject) -> ININScheduleEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScheduleEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININScheduleGroup]
            Decoders.addDecoder(clazz: [ININScheduleGroup].self) { (source: AnyObject) -> [ININScheduleGroup] in
                return Decoders.decode(clazz: [ININScheduleGroup].self, source: source)
            }
            // Decoder for ININScheduleGroup
            Decoders.addDecoder(clazz: ININScheduleGroup.self) { (source: AnyObject) -> ININScheduleGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScheduleGroup()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININScheduleGroup.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.timeZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZone"])
                instance.openSchedules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["openSchedules"])
                instance.closedSchedules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["closedSchedules"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININScheduleGroupEntityListing]
            Decoders.addDecoder(clazz: [ININScheduleGroupEntityListing].self) { (source: AnyObject) -> [ININScheduleGroupEntityListing] in
                return Decoders.decode(clazz: [ININScheduleGroupEntityListing].self, source: source)
            }
            // Decoder for ININScheduleGroupEntityListing
            Decoders.addDecoder(clazz: ININScheduleGroupEntityListing.self) { (source: AnyObject) -> ININScheduleGroupEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScheduleGroupEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININScheduleInterval]
            Decoders.addDecoder(clazz: [ININScheduleInterval].self) { (source: AnyObject) -> [ININScheduleInterval] in
                return Decoders.decode(clazz: [ININScheduleInterval].self, source: source)
            }
            // Decoder for ININScheduleInterval
            Decoders.addDecoder(clazz: ININScheduleInterval.self) { (source: AnyObject) -> ININScheduleInterval in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScheduleInterval()
                instance.start = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["end"])
                return instance
            }


            // Decoder for [ININSchemaCategory]
            Decoders.addDecoder(clazz: [ININSchemaCategory].self) { (source: AnyObject) -> [ININSchemaCategory] in
                return Decoders.decode(clazz: [ININSchemaCategory].self, source: source)
            }
            // Decoder for ININSchemaCategory
            Decoders.addDecoder(clazz: ININSchemaCategory.self) { (source: AnyObject) -> ININSchemaCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSchemaCategory()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSchemaCategoryEntityListing]
            Decoders.addDecoder(clazz: [ININSchemaCategoryEntityListing].self) { (source: AnyObject) -> [ININSchemaCategoryEntityListing] in
                return Decoders.decode(clazz: [ININSchemaCategoryEntityListing].self, source: source)
            }
            // Decoder for ININSchemaCategoryEntityListing
            Decoders.addDecoder(clazz: ININSchemaCategoryEntityListing.self) { (source: AnyObject) -> ININSchemaCategoryEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSchemaCategoryEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSchemaReferenceEntityListing]
            Decoders.addDecoder(clazz: [ININSchemaReferenceEntityListing].self) { (source: AnyObject) -> [ININSchemaReferenceEntityListing] in
                return Decoders.decode(clazz: [ININSchemaReferenceEntityListing].self, source: source)
            }
            // Decoder for ININSchemaReferenceEntityListing
            Decoders.addDecoder(clazz: ININSchemaReferenceEntityListing.self) { (source: AnyObject) -> ININSchemaReferenceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSchemaReferenceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININScript]
            Decoders.addDecoder(clazz: [ININScript].self) { (source: AnyObject) -> [ININScript] in
                return Decoders.decode(clazz: [ININScript].self, source: source)
            }
            // Decoder for ININScript
            Decoders.addDecoder(clazz: ININScript.self) { (source: AnyObject) -> ININScript in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScript()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.versionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["versionId"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.publishedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["publishedDate"])
                instance.versionDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["versionDate"])
                instance.startPageId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startPageId"])
                instance.startPageName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startPageName"])
                instance.features = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["features"])
                instance.variables = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["variables"])
                instance.customActions = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["customActions"])
                instance.pages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pages"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININScriptEntityListing]
            Decoders.addDecoder(clazz: [ININScriptEntityListing].self) { (source: AnyObject) -> [ININScriptEntityListing] in
                return Decoders.decode(clazz: [ININScriptEntityListing].self, source: source)
            }
            // Decoder for ININScriptEntityListing
            Decoders.addDecoder(clazz: ININScriptEntityListing.self) { (source: AnyObject) -> ININScriptEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININScriptEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSearchAggregation]
            Decoders.addDecoder(clazz: [ININSearchAggregation].self) { (source: AnyObject) -> [ININSearchAggregation] in
                return Decoders.decode(clazz: [ININSearchAggregation].self, source: source)
            }
            // Decoder for ININSearchAggregation
            Decoders.addDecoder(clazz: ININSearchAggregation.self) { (source: AnyObject) -> ININSearchAggregation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSearchAggregation()
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININSearchAggregation.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.order = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["order"])
                return instance
            }


            // Decoder for [ININSearchCriteria]
            Decoders.addDecoder(clazz: [ININSearchCriteria].self) { (source: AnyObject) -> [ININSearchCriteria] in
                return Decoders.decode(clazz: [ININSearchCriteria].self, source: source)
            }
            // Decoder for ININSearchCriteria
            Decoders.addDecoder(clazz: ININSearchCriteria.self) { (source: AnyObject) -> ININSearchCriteria in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSearchCriteria()
                instance.endValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endValue"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.startValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startValue"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._operator = ININSearchCriteria.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group"])
                instance.type = ININSearchCriteria.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININSearchRequest]
            Decoders.addDecoder(clazz: [ININSearchRequest].self) { (source: AnyObject) -> [ININSearchRequest] in
                return Decoders.decode(clazz: [ININSearchRequest].self, source: source)
            }
            // Decoder for ININSearchRequest
            Decoders.addDecoder(clazz: ININSearchRequest.self) { (source: AnyObject) -> ININSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSearchRequest()
                instance.sortOrder = ININSearchRequest.ININSortOrder(rawValue: (sourceDictionary["sortOrder"] as? String) ?? "") 
                instance.sortBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortBy"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.returnFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["returnFields"])
                instance.expand = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["expand"])
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.query = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["query"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININSecurityProfile]
            Decoders.addDecoder(clazz: [ININSecurityProfile].self) { (source: AnyObject) -> [ININSecurityProfile] in
                return Decoders.decode(clazz: [ININSecurityProfile].self, source: source)
            }
            // Decoder for ININSecurityProfile
            Decoders.addDecoder(clazz: ININSecurityProfile.self) { (source: AnyObject) -> ININSecurityProfile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSecurityProfile()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.permissions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissions"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSecurityProfileEntityListing]
            Decoders.addDecoder(clazz: [ININSecurityProfileEntityListing].self) { (source: AnyObject) -> [ININSecurityProfileEntityListing] in
                return Decoders.decode(clazz: [ININSecurityProfileEntityListing].self, source: source)
            }
            // Decoder for ININSecurityProfileEntityListing
            Decoders.addDecoder(clazz: ININSecurityProfileEntityListing.self) { (source: AnyObject) -> ININSecurityProfileEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSecurityProfileEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSegment]
            Decoders.addDecoder(clazz: [ININSegment].self) { (source: AnyObject) -> [ININSegment] in
                return Decoders.decode(clazz: [ININSegment].self, source: source)
            }
            // Decoder for ININSegment
            Decoders.addDecoder(clazz: ININSegment.self) { (source: AnyObject) -> ININSegment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSegment()
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.howEnded = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["howEnded"])
                instance.disconnectType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["disconnectType"])
                return instance
            }


            // Decoder for [ININSequenceSchedule]
            Decoders.addDecoder(clazz: [ININSequenceSchedule].self) { (source: AnyObject) -> [ININSequenceSchedule] in
                return Decoders.decode(clazz: [ININSequenceSchedule].self, source: source)
            }
            // Decoder for ININSequenceSchedule
            Decoders.addDecoder(clazz: ININSequenceSchedule.self) { (source: AnyObject) -> ININSequenceSchedule in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSequenceSchedule()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.intervals = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["intervals"])
                instance.timeZone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZone"])
                instance.sequence = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["sequence"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININServerDate]
            Decoders.addDecoder(clazz: [ININServerDate].self) { (source: AnyObject) -> [ININServerDate] in
                return Decoders.decode(clazz: [ININServerDate].self, source: source)
            }
            // Decoder for ININServerDate
            Decoders.addDecoder(clazz: ININServerDate.self) { (source: AnyObject) -> ININServerDate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININServerDate()
                instance.currentDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["currentDate"])
                return instance
            }


            // Decoder for [ININService]
            Decoders.addDecoder(clazz: [ININService].self) { (source: AnyObject) -> [ININService] in
                return Decoders.decode(clazz: [ININService].self, source: source)
            }
            // Decoder for ININService
            Decoders.addDecoder(clazz: ININService.self) { (source: AnyObject) -> ININService in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININService()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.domains = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["domains"])
                instance.serviceTypes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["serviceTypes"])
                instance.gateways = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["gateways"])
                instance.dns = Decoders.decodeOptional(clazz: ININDns.self, source: sourceDictionary["dns"])
                instance.vpn = Decoders.decodeOptional(clazz: ININVpn.self, source: sourceDictionary["vpn"])
                instance.carrier = Decoders.decodeOptional(clazz: ININCarrier.self, source: sourceDictionary["carrier"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININServiceContext]
            Decoders.addDecoder(clazz: [ININServiceContext].self) { (source: AnyObject) -> [ININServiceContext] in
                return Decoders.decode(clazz: [ININServiceContext].self, source: source)
            }
            // Decoder for ININServiceContext
            Decoders.addDecoder(clazz: ININServiceContext.self) { (source: AnyObject) -> ININServiceContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININServiceContext()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININServiceEntityListing]
            Decoders.addDecoder(clazz: [ININServiceEntityListing].self) { (source: AnyObject) -> [ININServiceEntityListing] in
                return Decoders.decode(clazz: [ININServiceEntityListing].self, source: source)
            }
            // Decoder for ININServiceEntityListing
            Decoders.addDecoder(clazz: ININServiceEntityListing.self) { (source: AnyObject) -> ININServiceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININServiceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININServiceLevel]
            Decoders.addDecoder(clazz: [ININServiceLevel].self) { (source: AnyObject) -> [ININServiceLevel] in
                return Decoders.decode(clazz: [ININServiceLevel].self, source: source)
            }
            // Decoder for ININServiceLevel
            Decoders.addDecoder(clazz: ININServiceLevel.self) { (source: AnyObject) -> ININServiceLevel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININServiceLevel()
                instance.percentage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["percentage"])
                instance.durationMs = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["durationMs"])
                return instance
            }


            // Decoder for [ININServiceType]
            Decoders.addDecoder(clazz: [ININServiceType].self) { (source: AnyObject) -> [ININServiceType] in
                return Decoders.decode(clazz: [ININServiceType].self, source: source)
            }
            // Decoder for ININServiceType
            Decoders.addDecoder(clazz: ININServiceType.self) { (source: AnyObject) -> ININServiceType in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININServiceType()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.parameters = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["parameters"])
                instance.codecs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codecs"])
                instance.strip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["strip"])
                instance.callingPartyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callingPartyId"])
                instance.callHistory = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callHistory"])
                instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"])
                return instance
            }


            // Decoder for [ININShare]
            Decoders.addDecoder(clazz: [ININShare].self) { (source: AnyObject) -> [ININShare] in
                return Decoders.decode(clazz: [ININShare].self, source: source)
            }
            // Decoder for ININShare
            Decoders.addDecoder(clazz: ININShare.self) { (source: AnyObject) -> ININShare in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININShare()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sharedEntityType = ININShare.ININSharedEntityType(rawValue: (sourceDictionary["sharedEntityType"] as? String) ?? "") 
                instance.sharedEntity = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["sharedEntity"])
                instance.memberType = ININShare.ININMemberType(rawValue: (sourceDictionary["memberType"] as? String) ?? "") 
                instance.member = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["member"])
                instance.sharedBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["sharedBy"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.group = Decoders.decodeOptional(clazz: ININGroup.self, source: sourceDictionary["group"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININShareEntityListing]
            Decoders.addDecoder(clazz: [ININShareEntityListing].self) { (source: AnyObject) -> [ININShareEntityListing] in
                return Decoders.decode(clazz: [ININShareEntityListing].self, source: source)
            }
            // Decoder for ININShareEntityListing
            Decoders.addDecoder(clazz: ININShareEntityListing.self) { (source: AnyObject) -> ININShareEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININShareEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSharedEntity]
            Decoders.addDecoder(clazz: [ININSharedEntity].self) { (source: AnyObject) -> [ININSharedEntity] in
                return Decoders.decode(clazz: [ININSharedEntity].self, source: source)
            }
            // Decoder for ININSharedEntity
            Decoders.addDecoder(clazz: ININSharedEntity.self) { (source: AnyObject) -> ININSharedEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSharedEntity()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ININSharedResponse]
            Decoders.addDecoder(clazz: [ININSharedResponse].self) { (source: AnyObject) -> [ININSharedResponse] in
                return Decoders.decode(clazz: [ININSharedResponse].self, source: source)
            }
            // Decoder for ININSharedResponse
            Decoders.addDecoder(clazz: ININSharedResponse.self) { (source: AnyObject) -> ININSharedResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSharedResponse()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.downloadUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadUri"])
                instance.viewUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["viewUri"])
                instance.document = Decoders.decodeOptional(clazz: ININDocument.self, source: sourceDictionary["document"])
                instance.share = Decoders.decodeOptional(clazz: ININShare.self, source: sourceDictionary["share"])
                return instance
            }


            // Decoder for [ININSheetSchema]
            Decoders.addDecoder(clazz: [ININSheetSchema].self) { (source: AnyObject) -> [ININSheetSchema] in
                return Decoders.decode(clazz: [ININSheetSchema].self, source: source)
            }
            // Decoder for ININSheetSchema
            Decoders.addDecoder(clazz: ININSheetSchema.self) { (source: AnyObject) -> ININSheetSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSheetSchema()
                instance.headerRow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["HeaderRow"])
                instance.dataRow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["DataRow"])
                instance.headerMappings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["HeaderMappings"])
                instance.rateType = ININSheetSchema.ININRateType(rawValue: (sourceDictionary["RateType"] as? String) ?? "") 
                instance.sheetNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["SheetNumber"])
                instance.dateFormat = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["DateFormat"])
                return instance
            }


            // Decoder for [ININSheetTransform]
            Decoders.addDecoder(clazz: [ININSheetTransform].self) { (source: AnyObject) -> [ININSheetTransform] in
                return Decoders.decode(clazz: [ININSheetTransform].self, source: source)
            }
            // Decoder for ININSheetTransform
            Decoders.addDecoder(clazz: ININSheetTransform.self) { (source: AnyObject) -> ININSheetTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSheetTransform()
                instance.sheet = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sheet"])
                instance.sheetName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sheetName"])
                instance.table = Decoders.decodeOptional(clazz: ININTableTransform.self, source: sourceDictionary["table"])
                return instance
            }


            // Decoder for [ININSignatureDocumentInfo]
            Decoders.addDecoder(clazz: [ININSignatureDocumentInfo].self) { (source: AnyObject) -> [ININSignatureDocumentInfo] in
                return Decoders.decode(clazz: [ININSignatureDocumentInfo].self, source: source)
            }
            // Decoder for ININSignatureDocumentInfo
            Decoders.addDecoder(clazz: ININSignatureDocumentInfo.self) { (source: AnyObject) -> ININSignatureDocumentInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSignatureDocumentInfo()
                instance.org = Decoders.decodeOptional(clazz: ININOrganization.self, source: sourceDictionary["org"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.returnUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["returnUrl"])
                instance.template = Decoders.decodeOptional(clazz: ININDocusignTemplateMapping.self, source: sourceDictionary["template"])
                return instance
            }


            // Decoder for [ININSite]
            Decoders.addDecoder(clazz: [ININSite].self) { (source: AnyObject) -> [ININSite] in
                return Decoders.decode(clazz: [ININSite].self, source: source)
            }
            // Decoder for ININSite
            Decoders.addDecoder(clazz: ININSite.self) { (source: AnyObject) -> ININSite in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSite()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININSite.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.primarySites = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["primarySites"])
                instance.secondarySites = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["secondarySites"])
                instance.primaryEdges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["primaryEdges"])
                instance.secondaryEdges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["secondaryEdges"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.edges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["edges"])
                instance.edgeAutoUpdateConfig = Decoders.decodeOptional(clazz: ININEdgeAutoUpdateConfig.self, source: sourceDictionary["edgeAutoUpdateConfig"])
                instance.location = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["location"])
                instance.managed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["managed"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSiteEntityListing]
            Decoders.addDecoder(clazz: [ININSiteEntityListing].self) { (source: AnyObject) -> [ININSiteEntityListing] in
                return Decoders.decode(clazz: [ININSiteEntityListing].self, source: source)
            }
            // Decoder for ININSiteEntityListing
            Decoders.addDecoder(clazz: ININSiteEntityListing.self) { (source: AnyObject) -> ININSiteEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSiteEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSkillEntityListing]
            Decoders.addDecoder(clazz: [ININSkillEntityListing].self) { (source: AnyObject) -> [ININSkillEntityListing] in
                return Decoders.decode(clazz: [ININSkillEntityListing].self, source: source)
            }
            // Decoder for ININSkillEntityListing
            Decoders.addDecoder(clazz: ININSkillEntityListing.self) { (source: AnyObject) -> ININSkillEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSkillEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSkillsToRemove]
            Decoders.addDecoder(clazz: [ININSkillsToRemove].self) { (source: AnyObject) -> [ININSkillsToRemove] in
                return Decoders.decode(clazz: [ININSkillsToRemove].self, source: source)
            }
            // Decoder for ININSkillsToRemove
            Decoders.addDecoder(clazz: ININSkillsToRemove.self) { (source: AnyObject) -> ININSkillsToRemove in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSkillsToRemove()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSnapshot]
            Decoders.addDecoder(clazz: [ININSnapshot].self) { (source: AnyObject) -> [ININSnapshot] in
                return Decoders.decode(clazz: [ININSnapshot].self, source: source)
            }
            // Decoder for ININSnapshot
            Decoders.addDecoder(clazz: ININSnapshot.self) { (source: AnyObject) -> ININSnapshot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSnapshot()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSocialAccount]
            Decoders.addDecoder(clazz: [ININSocialAccount].self) { (source: AnyObject) -> [ININSocialAccount] in
                return Decoders.decode(clazz: [ININSocialAccount].self, source: source)
            }
            // Decoder for ININSocialAccount
            Decoders.addDecoder(clazz: ININSocialAccount.self) { (source: AnyObject) -> ININSocialAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocialAccount()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.authorized = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["authorized"])
                instance.socialHub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialHub"])
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                instance.accessTokenSecret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token_secret"])
                instance.twitterId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["twitterId"])
                instance.streamingEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["streamingEnabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSocialConversation]
            Decoders.addDecoder(clazz: [ININSocialConversation].self) { (source: AnyObject) -> [ININSocialConversation] in
                return Decoders.decode(clazz: [ININSocialConversation].self, source: source)
            }
            // Decoder for ININSocialConversation
            Decoders.addDecoder(clazz: ININSocialConversation.self) { (source: AnyObject) -> ININSocialConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocialConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSocialConversationEntityListing]
            Decoders.addDecoder(clazz: [ININSocialConversationEntityListing].self) { (source: AnyObject) -> [ININSocialConversationEntityListing] in
                return Decoders.decode(clazz: [ININSocialConversationEntityListing].self, source: source)
            }
            // Decoder for ININSocialConversationEntityListing
            Decoders.addDecoder(clazz: ININSocialConversationEntityListing.self) { (source: AnyObject) -> ININSocialConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocialConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSocialExpression]
            Decoders.addDecoder(clazz: [ININSocialExpression].self) { (source: AnyObject) -> [ININSocialExpression] in
                return Decoders.decode(clazz: [ININSocialExpression].self, source: source)
            }
            // Decoder for ININSocialExpression
            Decoders.addDecoder(clazz: ININSocialExpression.self) { (source: AnyObject) -> ININSocialExpression in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocialExpression()
                instance.state = ININSocialExpression.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.socialMediaId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialMediaId"])
                instance.socialMediaHub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialMediaHub"])
                instance.socialUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialUserName"])
                instance.previewText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previewText"])
                instance.recordingId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recordingId"])
                instance.segments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["segments"])
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.disconnectType = ININSocialExpression.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                return instance
            }


            // Decoder for [ININSocialMediaParticipant]
            Decoders.addDecoder(clazz: [ININSocialMediaParticipant].self) { (source: AnyObject) -> [ININSocialMediaParticipant] in
                return Decoders.decode(clazz: [ININSocialMediaParticipant].self, source: source)
            }
            // Decoder for ININSocialMediaParticipant
            Decoders.addDecoder(clazz: ININSocialMediaParticipant.self) { (source: AnyObject) -> ININSocialMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocialMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININSocialMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININSocialMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININSocialMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.socialMediaId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialMediaId"])
                instance.socialMediaHub = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialMediaHub"])
                instance.socialUserName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialUserName"])
                instance.previewText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previewText"])
                return instance
            }


            // Decoder for [ININSocializeEntityFilter]
            Decoders.addDecoder(clazz: [ININSocializeEntityFilter].self) { (source: AnyObject) -> [ININSocializeEntityFilter] in
                return Decoders.decode(clazz: [ININSocializeEntityFilter].self, source: source)
            }
            // Decoder for ININSocializeEntityFilter
            Decoders.addDecoder(clazz: ININSocializeEntityFilter.self) { (source: AnyObject) -> ININSocializeEntityFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocializeEntityFilter()
                instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"])
                instance._operator = ININSocializeEntityFilter.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.fieldValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldValue"])
                return instance
            }


            // Decoder for [ININSocializeFilterRequest]
            Decoders.addDecoder(clazz: [ININSocializeFilterRequest].self) { (source: AnyObject) -> [ININSocializeFilterRequest] in
                return Decoders.decode(clazz: [ININSocializeFilterRequest].self, source: source)
            }
            // Decoder for ININSocializeFilterRequest
            Decoders.addDecoder(clazz: ININSocializeFilterRequest.self) { (source: AnyObject) -> ININSocializeFilterRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSocializeFilterRequest()
                instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.sortBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortBy"])
                instance.sortOrder = ININSocializeFilterRequest.ININSortOrder(rawValue: (sourceDictionary["sortOrder"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININSortField]
            Decoders.addDecoder(clazz: [ININSortField].self) { (source: AnyObject) -> [ININSortField] in
                return Decoders.decode(clazz: [ININSortField].self, source: source)
            }
            // Decoder for ININSortField
            Decoders.addDecoder(clazz: ININSortField.self) { (source: AnyObject) -> ININSortField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSortField()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sortType = ININSortField.ININSortType(rawValue: (sourceDictionary["sortType"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININSortItem]
            Decoders.addDecoder(clazz: [ININSortItem].self) { (source: AnyObject) -> [ININSortItem] in
                return Decoders.decode(clazz: [ININSortItem].self, source: source)
            }
            // Decoder for ININSortItem
            Decoders.addDecoder(clazz: ININSortItem.self) { (source: AnyObject) -> ININSortItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSortItem()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ascending = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ascending"])
                return instance
            }


            // Decoder for [ININSpreadsheetTransform]
            Decoders.addDecoder(clazz: [ININSpreadsheetTransform].self) { (source: AnyObject) -> [ININSpreadsheetTransform] in
                return Decoders.decode(clazz: [ININSpreadsheetTransform].self, source: source)
            }
            // Decoder for ININSpreadsheetTransform
            Decoders.addDecoder(clazz: ININSpreadsheetTransform.self) { (source: AnyObject) -> ININSpreadsheetTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSpreadsheetTransform()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.restEndpoint = Decoders.decodeOptional(clazz: ININTransformEndpoint.self, source: sourceDictionary["restEndpoint"])
                instance.filenameTransforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filenameTransforms"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.sheetNameTransforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sheetNameTransforms"])
                instance.sheets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sheets"])
                instance.clientTransformModel = Decoders.decodeOptional(clazz: ININClientSpreadsheetTransform.self, source: sourceDictionary["clientTransformModel"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSpreadsheetTransformEntityListing]
            Decoders.addDecoder(clazz: [ININSpreadsheetTransformEntityListing].self) { (source: AnyObject) -> [ININSpreadsheetTransformEntityListing] in
                return Decoders.decode(clazz: [ININSpreadsheetTransformEntityListing].self, source: source)
            }
            // Decoder for ININSpreadsheetTransformEntityListing
            Decoders.addDecoder(clazz: ININSpreadsheetTransformEntityListing.self) { (source: AnyObject) -> ININSpreadsheetTransformEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSpreadsheetTransformEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININStation]
            Decoders.addDecoder(clazz: [ININStation].self) { (source: AnyObject) -> [ININStation] in
                return Decoders.decode(clazz: [ININStation].self, source: source)
            }
            // Decoder for ININStation
            Decoders.addDecoder(clazz: ININStation.self) { (source: AnyObject) -> ININStation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININStation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.status = ININStation.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.primaryEdge = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["primaryEdge"])
                instance.secondaryEdge = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["secondaryEdge"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.lineAppearanceId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lineAppearanceId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININStationEntityListing]
            Decoders.addDecoder(clazz: [ININStationEntityListing].self) { (source: AnyObject) -> [ININStationEntityListing] in
                return Decoders.decode(clazz: [ININStationEntityListing].self, source: source)
            }
            // Decoder for ININStationEntityListing
            Decoders.addDecoder(clazz: ININStationEntityListing.self) { (source: AnyObject) -> ININStationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININStationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININStatisticalResponse]
            Decoders.addDecoder(clazz: [ININStatisticalResponse].self) { (source: AnyObject) -> [ININStatisticalResponse] in
                return Decoders.decode(clazz: [ININStatisticalResponse].self, source: source)
            }
            // Decoder for ININStatisticalResponse
            Decoders.addDecoder(clazz: ININStatisticalResponse.self) { (source: AnyObject) -> ININStatisticalResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININStatisticalResponse()
                instance.interval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interval"])
                instance.metrics = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metrics"])
                return instance
            }


            // Decoder for [ININStatisticalSummary]
            Decoders.addDecoder(clazz: [ININStatisticalSummary].self) { (source: AnyObject) -> [ININStatisticalSummary] in
                return Decoders.decode(clazz: [ININStatisticalSummary].self, source: source)
            }
            // Decoder for ININStatisticalSummary
            Decoders.addDecoder(clazz: ININStatisticalSummary.self) { (source: AnyObject) -> ININStatisticalSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININStatisticalSummary()
                instance.max = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max"])
                instance.min = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min"])
                instance.count = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["count"])
                instance.sum = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sum"])
                instance.current = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["current"])
                instance.ratio = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["ratio"])
                instance.numerator = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numerator"])
                instance.denominator = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["denominator"])
                instance.target = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["target"])
                return instance
            }


            // Decoder for [ININSubDataItem]
            Decoders.addDecoder(clazz: [ININSubDataItem].self) { (source: AnyObject) -> [ININSubDataItem] in
                return Decoders.decode(clazz: [ININSubDataItem].self, source: source)
            }
            // Decoder for ININSubDataItem
            Decoders.addDecoder(clazz: ININSubDataItem.self) { (source: AnyObject) -> ININSubDataItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSubDataItem()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance.prompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prompt"])
                instance.displayValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayValue"])
                return instance
            }


            // Decoder for [ININSubscriberResponse]
            Decoders.addDecoder(clazz: [ININSubscriberResponse].self) { (source: AnyObject) -> [ININSubscriberResponse] in
                return Decoders.decode(clazz: [ININSubscriberResponse].self, source: source)
            }
            // Decoder for ININSubscriberResponse
            Decoders.addDecoder(clazz: ININSubscriberResponse.self) { (source: AnyObject) -> ININSubscriberResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSubscriberResponse()
                instance.messageReturned = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["messageReturned"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [ININSuggestSearchCriteria]
            Decoders.addDecoder(clazz: [ININSuggestSearchCriteria].self) { (source: AnyObject) -> [ININSuggestSearchCriteria] in
                return Decoders.decode(clazz: [ININSuggestSearchCriteria].self, source: source)
            }
            // Decoder for ININSuggestSearchCriteria
            Decoders.addDecoder(clazz: ININSuggestSearchCriteria.self) { (source: AnyObject) -> ININSuggestSearchCriteria in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSuggestSearchCriteria()
                instance.endValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endValue"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.startValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startValue"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._operator = ININSuggestSearchCriteria.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group"])
                return instance
            }


            // Decoder for [ININSuggestSearchRequest]
            Decoders.addDecoder(clazz: [ININSuggestSearchRequest].self) { (source: AnyObject) -> [ININSuggestSearchRequest] in
                return Decoders.decode(clazz: [ININSuggestSearchRequest].self, source: source)
            }
            // Decoder for ININSuggestSearchRequest
            Decoders.addDecoder(clazz: ININSuggestSearchRequest.self) { (source: AnyObject) -> ININSuggestSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSuggestSearchRequest()
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.query = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [ININSupport]
            Decoders.addDecoder(clazz: [ININSupport].self) { (source: AnyObject) -> [ININSupport] in
                return Decoders.decode(clazz: [ININSupport].self, source: source)
            }
            // Decoder for ININSupport
            Decoders.addDecoder(clazz: ININSupport.self) { (source: AnyObject) -> ININSupport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSupport()
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"])
                return instance
            }


            // Decoder for [ININSupportCredit]
            Decoders.addDecoder(clazz: [ININSupportCredit].self) { (source: AnyObject) -> [ININSupportCredit] in
                return Decoders.decode(clazz: [ININSupportCredit].self, source: source)
            }
            // Decoder for ININSupportCredit
            Decoders.addDecoder(clazz: ININSupportCredit.self) { (source: AnyObject) -> ININSupportCredit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSupportCredit()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSupportCreditListing]
            Decoders.addDecoder(clazz: [ININSupportCreditListing].self) { (source: AnyObject) -> [ININSupportCreditListing] in
                return Decoders.decode(clazz: [ININSupportCreditListing].self, source: source)
            }
            // Decoder for ININSupportCreditListing
            Decoders.addDecoder(clazz: ININSupportCreditListing.self) { (source: AnyObject) -> ININSupportCreditListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSupportCreditListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSystemPresence]
            Decoders.addDecoder(clazz: [ININSystemPresence].self) { (source: AnyObject) -> [ININSystemPresence] in
                return Decoders.decode(clazz: [ININSystemPresence].self, source: source)
            }
            // Decoder for ININSystemPresence
            Decoders.addDecoder(clazz: ININSystemPresence.self) { (source: AnyObject) -> ININSystemPresence in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSystemPresence()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSystemPrompt]
            Decoders.addDecoder(clazz: [ININSystemPrompt].self) { (source: AnyObject) -> [ININSystemPrompt] in
                return Decoders.decode(clazz: [ININSystemPrompt].self, source: source)
            }
            // Decoder for ININSystemPrompt
            Decoders.addDecoder(clazz: ININSystemPrompt.self) { (source: AnyObject) -> ININSystemPrompt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSystemPrompt()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.resources = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["resources"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSystemPromptAsset]
            Decoders.addDecoder(clazz: [ININSystemPromptAsset].self) { (source: AnyObject) -> [ININSystemPromptAsset] in
                return Decoders.decode(clazz: [ININSystemPromptAsset].self, source: source)
            }
            // Decoder for ININSystemPromptAsset
            Decoders.addDecoder(clazz: ININSystemPromptAsset.self) { (source: AnyObject) -> ININSystemPromptAsset in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSystemPromptAsset()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.promptId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptId"])
                instance.language = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["language"])
                instance.durationSeconds = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["durationSeconds"])
                instance.mediaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaUri"])
                instance.ttsString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ttsString"])
                instance.uploadUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uploadUri"])
                instance.uploadStatus = ININSystemPromptAsset.ININUploadStatus(rawValue: (sourceDictionary["uploadStatus"] as? String) ?? "") 
                instance.hasDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasDefault"])
                instance.languageDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["languageDefault"])
                instance.tags = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["tags"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININSystemPromptAssetEntityListing]
            Decoders.addDecoder(clazz: [ININSystemPromptAssetEntityListing].self) { (source: AnyObject) -> [ININSystemPromptAssetEntityListing] in
                return Decoders.decode(clazz: [ININSystemPromptAssetEntityListing].self, source: source)
            }
            // Decoder for ININSystemPromptAssetEntityListing
            Decoders.addDecoder(clazz: ININSystemPromptAssetEntityListing.self) { (source: AnyObject) -> ININSystemPromptAssetEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSystemPromptAssetEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININSystemPromptEntityListing]
            Decoders.addDecoder(clazz: [ININSystemPromptEntityListing].self) { (source: AnyObject) -> [ININSystemPromptEntityListing] in
                return Decoders.decode(clazz: [ININSystemPromptEntityListing].self, source: source)
            }
            // Decoder for ININSystemPromptEntityListing
            Decoders.addDecoder(clazz: ININSystemPromptEntityListing.self) { (source: AnyObject) -> ININSystemPromptEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININSystemPromptEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTableTransform]
            Decoders.addDecoder(clazz: [ININTableTransform].self) { (source: AnyObject) -> [ININTableTransform] in
                return Decoders.decode(clazz: [ININTableTransform].self, source: source)
            }
            // Decoder for ININTableTransform
            Decoders.addDecoder(clazz: ININTableTransform.self) { (source: AnyObject) -> ININTableTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTableTransform()
                instance.headerRow = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["headerRow"])
                instance.firstData = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["firstData"])
                instance.headerReplaces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["headerReplaces"])
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                instance.unpivots = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unpivots"])
                instance.collapses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collapses"])
                return instance
            }


            // Decoder for [ININTagModel]
            Decoders.addDecoder(clazz: [ININTagModel].self) { (source: AnyObject) -> [ININTagModel] in
                return Decoders.decode(clazz: [ININTagModel].self, source: source)
            }
            // Decoder for ININTagModel
            Decoders.addDecoder(clazz: ININTagModel.self) { (source: AnyObject) -> ININTagModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTagModel()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ININTagQueryRequest]
            Decoders.addDecoder(clazz: [ININTagQueryRequest].self) { (source: AnyObject) -> [ININTagQueryRequest] in
                return Decoders.decode(clazz: [ININTagQueryRequest].self, source: source)
            }
            // Decoder for ININTagQueryRequest
            Decoders.addDecoder(clazz: ININTagQueryRequest.self) { (source: AnyObject) -> ININTagQueryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTagQueryRequest()
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                return instance
            }


            // Decoder for [ININTagValue]
            Decoders.addDecoder(clazz: [ININTagValue].self) { (source: AnyObject) -> [ININTagValue] in
                return Decoders.decode(clazz: [ININTagValue].self, source: source)
            }
            // Decoder for ININTagValue
            Decoders.addDecoder(clazz: ININTagValue.self) { (source: AnyObject) -> ININTagValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTagValue()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.inUse = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inUse"])
                instance.acl = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["acl"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTagValueEntityListing]
            Decoders.addDecoder(clazz: [ININTagValueEntityListing].self) { (source: AnyObject) -> [ININTagValueEntityListing] in
                return Decoders.decode(clazz: [ININTagValueEntityListing].self, source: source)
            }
            // Decoder for ININTagValueEntityListing
            Decoders.addDecoder(clazz: ININTagValueEntityListing.self) { (source: AnyObject) -> ININTagValueEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTagValueEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTemplateEntityListing]
            Decoders.addDecoder(clazz: [ININTemplateEntityListing].self) { (source: AnyObject) -> [ININTemplateEntityListing] in
                return Decoders.decode(clazz: [ININTemplateEntityListing].self, source: source)
            }
            // Decoder for ININTemplateEntityListing
            Decoders.addDecoder(clazz: ININTemplateEntityListing.self) { (source: AnyObject) -> ININTemplateEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTemplateEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTermAttribute]
            Decoders.addDecoder(clazz: [ININTermAttribute].self) { (source: AnyObject) -> [ININTermAttribute] in
                return Decoders.decode(clazz: [ININTermAttribute].self, source: source)
            }
            // Decoder for ININTermAttribute
            Decoders.addDecoder(clazz: ININTermAttribute.self) { (source: AnyObject) -> ININTermAttribute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTermAttribute()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININTermAttribute.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININTextTableTransform]
            Decoders.addDecoder(clazz: [ININTextTableTransform].self) { (source: AnyObject) -> [ININTextTableTransform] in
                return Decoders.decode(clazz: [ININTextTableTransform].self, source: source)
            }
            // Decoder for ININTextTableTransform
            Decoders.addDecoder(clazz: ININTextTableTransform.self) { (source: AnyObject) -> ININTextTableTransform in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTextTableTransform()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.restEndpoint = Decoders.decodeOptional(clazz: ININTransformEndpoint.self, source: sourceDictionary["restEndpoint"])
                instance.filenameTransforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filenameTransforms"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.commentSymbol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commentSymbol"])
                instance.delimiter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["delimiter"])
                instance.table = Decoders.decodeOptional(clazz: ININTableTransform.self, source: sourceDictionary["table"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTextTableTransformEntityListing]
            Decoders.addDecoder(clazz: [ININTextTableTransformEntityListing].self) { (source: AnyObject) -> [ININTextTableTransformEntityListing] in
                return Decoders.decode(clazz: [ININTextTableTransformEntityListing].self, source: source)
            }
            // Decoder for ININTextTableTransformEntityListing
            Decoders.addDecoder(clazz: ININTextTableTransformEntityListing.self) { (source: AnyObject) -> ININTextTableTransformEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTextTableTransformEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININThirdPartyAccount]
            Decoders.addDecoder(clazz: [ININThirdPartyAccount].self) { (source: AnyObject) -> [ININThirdPartyAccount] in
                return Decoders.decode(clazz: [ININThirdPartyAccount].self, source: source)
            }
            // Decoder for ININThirdPartyAccount
            Decoders.addDecoder(clazz: ININThirdPartyAccount.self) { (source: AnyObject) -> ININThirdPartyAccount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININThirdPartyAccount()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.accountNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accountNumber"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.invoices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["invoices"])
                instance.subscriptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subscriptions"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININThirdPartySubscription]
            Decoders.addDecoder(clazz: [ININThirdPartySubscription].self) { (source: AnyObject) -> [ININThirdPartySubscription] in
                return Decoders.decode(clazz: [ININThirdPartySubscription].self, source: source)
            }
            // Decoder for ININThirdPartySubscription
            Decoders.addDecoder(clazz: ININThirdPartySubscription.self) { (source: AnyObject) -> ININThirdPartySubscription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININThirdPartySubscription()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.contractEffectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["contractEffectiveDate"])
                instance.version = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININThumbnail]
            Decoders.addDecoder(clazz: [ININThumbnail].self) { (source: AnyObject) -> [ININThumbnail] in
                return Decoders.decode(clazz: [ININThumbnail].self, source: source)
            }
            // Decoder for ININThumbnail
            Decoders.addDecoder(clazz: ININThumbnail.self) { (source: AnyObject) -> ININThumbnail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININThumbnail()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.downloadUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadUrl"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTicker]
            Decoders.addDecoder(clazz: [ININTicker].self) { (source: AnyObject) -> [ININTicker] in
                return Decoders.decode(clazz: [ININTicker].self, source: source)
            }
            // Decoder for ININTicker
            Decoders.addDecoder(clazz: ININTicker.self) { (source: AnyObject) -> ININTicker in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTicker()
                instance.symbol = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["symbol"])
                instance.exchange = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["exchange"])
                return instance
            }


            // Decoder for [ININTier]
            Decoders.addDecoder(clazz: [ININTier].self) { (source: AnyObject) -> [ININTier] in
                return Decoders.decode(clazz: [ININTier].self, source: source)
            }
            // Decoder for ININTier
            Decoders.addDecoder(clazz: ININTier.self) { (source: AnyObject) -> ININTier in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTier()
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                return instance
            }


            // Decoder for [ININTimeAllowed]
            Decoders.addDecoder(clazz: [ININTimeAllowed].self) { (source: AnyObject) -> [ININTimeAllowed] in
                return Decoders.decode(clazz: [ININTimeAllowed].self, source: source)
            }
            // Decoder for ININTimeAllowed
            Decoders.addDecoder(clazz: ININTimeAllowed.self) { (source: AnyObject) -> ININTimeAllowed in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeAllowed()
                instance.timeSlots = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["timeSlots"])
                instance.timeZoneId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timeZoneId"])
                instance.empty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["empty"])
                return instance
            }


            // Decoder for [ININTimeInterval]
            Decoders.addDecoder(clazz: [ININTimeInterval].self) { (source: AnyObject) -> [ININTimeInterval] in
                return Decoders.decode(clazz: [ININTimeInterval].self, source: source)
            }
            // Decoder for ININTimeInterval
            Decoders.addDecoder(clazz: ININTimeInterval.self) { (source: AnyObject) -> ININTimeInterval in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeInterval()
                instance.days = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["days"])
                instance.hours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hours"])
                return instance
            }


            // Decoder for [ININTimeOffRequest]
            Decoders.addDecoder(clazz: [ININTimeOffRequest].self) { (source: AnyObject) -> [ININTimeOffRequest] in
                return Decoders.decode(clazz: [ININTimeOffRequest].self, source: source)
            }
            // Decoder for ININTimeOffRequest
            Decoders.addDecoder(clazz: ININTimeOffRequest.self) { (source: AnyObject) -> ININTimeOffRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeOffRequest()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.isFullDayRequest = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isFullDayRequest"])
                instance.markedAsRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["markedAsRead"])
                instance.activityCodeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["activityCodeId"])
                instance.status = ININTimeOffRequest.ININStatus(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.partialDayStartDateTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["partialDayStartDateTimes"])
                instance.fullDayManagementUnitDates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fullDayManagementUnitDates"])
                instance.dailyDurationMinutes = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dailyDurationMinutes"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.submittedBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["submittedBy"])
                instance.submittedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["submittedDate"])
                instance.reviewedBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["reviewedBy"])
                instance.reviewedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["reviewedDate"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["modifiedBy"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTimeOffRequestList]
            Decoders.addDecoder(clazz: [ININTimeOffRequestList].self) { (source: AnyObject) -> [ININTimeOffRequestList] in
                return Decoders.decode(clazz: [ININTimeOffRequestList].self, source: source)
            }
            // Decoder for ININTimeOffRequestList
            Decoders.addDecoder(clazz: ININTimeOffRequestList.self) { (source: AnyObject) -> ININTimeOffRequestList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeOffRequestList()
                instance.timeOffRequests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["timeOffRequests"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTimeOffRequestPatch]
            Decoders.addDecoder(clazz: [ININTimeOffRequestPatch].self) { (source: AnyObject) -> [ININTimeOffRequestPatch] in
                return Decoders.decode(clazz: [ININTimeOffRequestPatch].self, source: source)
            }
            // Decoder for ININTimeOffRequestPatch
            Decoders.addDecoder(clazz: ININTimeOffRequestPatch.self) { (source: AnyObject) -> ININTimeOffRequestPatch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeOffRequestPatch()
                instance.markedAsRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["markedAsRead"])
                return instance
            }


            // Decoder for [ININTimeSlot]
            Decoders.addDecoder(clazz: [ININTimeSlot].self) { (source: AnyObject) -> [ININTimeSlot] in
                return Decoders.decode(clazz: [ININTimeSlot].self, source: source)
            }
            // Decoder for ININTimeSlot
            Decoders.addDecoder(clazz: ININTimeSlot.self) { (source: AnyObject) -> ININTimeSlot in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeSlot()
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.stopTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopTime"])
                instance.day = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["day"])
                return instance
            }


            // Decoder for [ININTimeZone]
            Decoders.addDecoder(clazz: [ININTimeZone].self) { (source: AnyObject) -> [ININTimeZone] in
                return Decoders.decode(clazz: [ININTimeZone].self, source: source)
            }
            // Decoder for ININTimeZone
            Decoders.addDecoder(clazz: ININTimeZone.self) { (source: AnyObject) -> ININTimeZone in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeZone()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.offset = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["offset"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTimeZoneEntityListing]
            Decoders.addDecoder(clazz: [ININTimeZoneEntityListing].self) { (source: AnyObject) -> [ININTimeZoneEntityListing] in
                return Decoders.decode(clazz: [ININTimeZoneEntityListing].self, source: source)
            }
            // Decoder for ININTimeZoneEntityListing
            Decoders.addDecoder(clazz: ININTimeZoneEntityListing.self) { (source: AnyObject) -> ININTimeZoneEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTimeZoneEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTrace]
            Decoders.addDecoder(clazz: [ININTrace].self) { (source: AnyObject) -> [ININTrace] in
                return Decoders.decode(clazz: [ININTrace].self, source: source)
            }
            // Decoder for ININTrace
            Decoders.addDecoder(clazz: ININTrace.self) { (source: AnyObject) -> ININTrace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrace()
                instance.topic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["topic"])
                instance.timestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timestamp"])
                instance.level = ININTrace.ININLevel(rawValue: (sourceDictionary["level"] as? String) ?? "") 
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.details = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["details"])
                instance.timestampString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timestampString"])
                instance.detailsString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["detailsString"])
                return instance
            }


            // Decoder for [ININTraceList]
            Decoders.addDecoder(clazz: [ININTraceList].self) { (source: AnyObject) -> [ININTraceList] in
                return Decoders.decode(clazz: [ININTraceList].self, source: source)
            }
            // Decoder for ININTraceList
            Decoders.addDecoder(clazz: ININTraceList.self) { (source: AnyObject) -> ININTraceList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTraceList()
                instance.app = Decoders.decodeOptional(clazz: ININApp.self, source: sourceDictionary["app"])
                instance.traces = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["traces"])
                return instance
            }


            // Decoder for [ININTransferRequest]
            Decoders.addDecoder(clazz: [ININTransferRequest].self) { (source: AnyObject) -> [ININTransferRequest] in
                return Decoders.decode(clazz: [ININTransferRequest].self, source: source)
            }
            // Decoder for ININTransferRequest
            Decoders.addDecoder(clazz: ININTransferRequest.self) { (source: AnyObject) -> ININTransferRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTransferRequest()
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                instance.queueId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueId"])
                instance.voicemail = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail"])
                return instance
            }


            // Decoder for [ININTransformEndpoint]
            Decoders.addDecoder(clazz: [ININTransformEndpoint].self) { (source: AnyObject) -> [ININTransformEndpoint] in
                return Decoders.decode(clazz: [ININTransformEndpoint].self, source: source)
            }
            // Decoder for ININTransformEndpoint
            Decoders.addDecoder(clazz: ININTransformEndpoint.self) { (source: AnyObject) -> ININTransformEndpoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTransformEndpoint()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.swaggerUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["swaggerUrl"])
                instance.route = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["route"])
                instance.entity = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entity"])
                instance.apiFunction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiFunction"])
                instance.ready = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ready"])
                instance.active = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["active"])
                instance.batchSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["batchSize"])
                instance.parallelism = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parallelism"])
                instance.updateProgressEvery = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["updateProgressEvery"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTransformLens]
            Decoders.addDecoder(clazz: [ININTransformLens].self) { (source: AnyObject) -> [ININTransformLens] in
                return Decoders.decode(clazz: [ININTransformLens].self, source: source)
            }
            // Decoder for ININTransformLens
            Decoders.addDecoder(clazz: ININTransformLens.self) { (source: AnyObject) -> ININTransformLens in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTransformLens()
                instance.replace = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["replace"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ININTrunk]
            Decoders.addDecoder(clazz: [ININTrunk].self) { (source: AnyObject) -> [ININTrunk] in
                return Decoders.decode(clazz: [ININTrunk].self, source: source)
            }
            // Decoder for ININTrunk
            Decoders.addDecoder(clazz: ININTrunk.self) { (source: AnyObject) -> ININTrunk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunk()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININTrunk.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.trunkType = ININTrunk.ININTrunkType(rawValue: (sourceDictionary["trunkType"] as? String) ?? "") 
                instance.edge = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edge"])
                instance.trunkBase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["trunkBase"])
                instance.trunkMetabase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["trunkMetabase"])
                instance.edgeGroup = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["edgeGroup"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTrunkBase]
            Decoders.addDecoder(clazz: [ININTrunkBase].self) { (source: AnyObject) -> [ININTrunkBase] in
                return Decoders.decode(clazz: [ININTrunkBase].self, source: source)
            }
            // Decoder for ININTrunkBase
            Decoders.addDecoder(clazz: ININTrunkBase.self) { (source: AnyObject) -> ININTrunkBase in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunkBase()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININTrunkBase.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.trunkMetabase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["trunkMetabase"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance.trunkType = ININTrunkBase.ININTrunkType(rawValue: (sourceDictionary["trunkType"] as? String) ?? "") 
                instance.managed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["managed"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTrunkBaseAssignment]
            Decoders.addDecoder(clazz: [ININTrunkBaseAssignment].self) { (source: AnyObject) -> [ININTrunkBaseAssignment] in
                return Decoders.decode(clazz: [ININTrunkBaseAssignment].self, source: source)
            }
            // Decoder for ININTrunkBaseAssignment
            Decoders.addDecoder(clazz: ININTrunkBaseAssignment.self) { (source: AnyObject) -> ININTrunkBaseAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunkBaseAssignment()
                instance.family = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["family"])
                instance.trunkBase = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["trunkBase"])
                return instance
            }


            // Decoder for [ININTrunkEntityListing]
            Decoders.addDecoder(clazz: [ININTrunkEntityListing].self) { (source: AnyObject) -> [ININTrunkEntityListing] in
                return Decoders.decode(clazz: [ININTrunkEntityListing].self, source: source)
            }
            // Decoder for ININTrunkEntityListing
            Decoders.addDecoder(clazz: ININTrunkEntityListing.self) { (source: AnyObject) -> ININTrunkEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunkEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTrunkMetabaseEntityListing]
            Decoders.addDecoder(clazz: [ININTrunkMetabaseEntityListing].self) { (source: AnyObject) -> [ININTrunkMetabaseEntityListing] in
                return Decoders.decode(clazz: [ININTrunkMetabaseEntityListing].self, source: source)
            }
            // Decoder for ININTrunkMetabaseEntityListing
            Decoders.addDecoder(clazz: ININTrunkMetabaseEntityListing.self) { (source: AnyObject) -> ININTrunkMetabaseEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunkMetabaseEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININTrunkRecordingEnabledCount]
            Decoders.addDecoder(clazz: [ININTrunkRecordingEnabledCount].self) { (source: AnyObject) -> [ININTrunkRecordingEnabledCount] in
                return Decoders.decode(clazz: [ININTrunkRecordingEnabledCount].self, source: source)
            }
            // Decoder for ININTrunkRecordingEnabledCount
            Decoders.addDecoder(clazz: ININTrunkRecordingEnabledCount.self) { (source: AnyObject) -> ININTrunkRecordingEnabledCount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTrunkRecordingEnabledCount()
                instance.enabledCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["enabledCount"])
                instance.disabledCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["disabledCount"])
                return instance
            }


            // Decoder for [ININTwitterExpression]
            Decoders.addDecoder(clazz: [ININTwitterExpression].self) { (source: AnyObject) -> [ININTwitterExpression] in
                return Decoders.decode(clazz: [ININTwitterExpression].self, source: source)
            }
            // Decoder for ININTwitterExpression
            Decoders.addDecoder(clazz: ININTwitterExpression.self) { (source: AnyObject) -> ININTwitterExpression in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTwitterExpression()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.isDispositioned = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isDispositioned"])
                instance.isNoise = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isNoise"])
                instance.gistener = Decoders.decodeOptional(clazz: ININGistener.self, source: sourceDictionary["gistener"])
                instance.tweetId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tweetId"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.tweetCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["tweetCreated"])
                instance.isReply = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isReply"])
                instance.isRetweet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isRetweet"])
                instance.retweetParentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["retweetParentId"])
                instance.retweetCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retweetCount"])
                instance.isQuotedTweet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isQuotedTweet"])
                instance.quotedParentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["quotedParentId"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                instance.userScreenName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userScreenName"])
                instance.userTweetCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userTweetCount"])
                instance.userFollowersCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userFollowersCount"])
                instance.groupTags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groupTags"])
                instance.routed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["routed"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININTwitterExpressionBuffer]
            Decoders.addDecoder(clazz: [ININTwitterExpressionBuffer].self) { (source: AnyObject) -> [ININTwitterExpressionBuffer] in
                return Decoders.decode(clazz: [ININTwitterExpressionBuffer].self, source: source)
            }
            // Decoder for ININTwitterExpressionBuffer
            Decoders.addDecoder(clazz: ININTwitterExpressionBuffer.self) { (source: AnyObject) -> ININTwitterExpressionBuffer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTwitterExpressionBuffer()
                instance.bufferContent = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bufferContent"])
                return instance
            }


            // Decoder for [ININTwitterId]
            Decoders.addDecoder(clazz: [ININTwitterId].self) { (source: AnyObject) -> [ININTwitterId] in
                return Decoders.decode(clazz: [ININTwitterId].self, source: source)
            }
            // Decoder for ININTwitterId
            Decoders.addDecoder(clazz: ININTwitterId.self) { (source: AnyObject) -> ININTwitterId in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININTwitterId()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.screenName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["screenName"])
                instance.verified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"])
                instance.profileUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["profileUrl"])
                return instance
            }


            // Decoder for [ININUnpivotColumns]
            Decoders.addDecoder(clazz: [ININUnpivotColumns].self) { (source: AnyObject) -> [ININUnpivotColumns] in
                return Decoders.decode(clazz: [ININUnpivotColumns].self, source: source)
            }
            // Decoder for ININUnpivotColumns
            Decoders.addDecoder(clazz: ININUnpivotColumns.self) { (source: AnyObject) -> ININUnpivotColumns in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUnpivotColumns()
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                return instance
            }


            // Decoder for [ININUnreadMetric]
            Decoders.addDecoder(clazz: [ININUnreadMetric].self) { (source: AnyObject) -> [ININUnreadMetric] in
                return Decoders.decode(clazz: [ININUnreadMetric].self, source: source)
            }
            // Decoder for ININUnreadMetric
            Decoders.addDecoder(clazz: ININUnreadMetric.self) { (source: AnyObject) -> ININUnreadMetric in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUnreadMetric()
                instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"])
                return instance
            }


            // Decoder for [ININUnreadStatus]
            Decoders.addDecoder(clazz: [ININUnreadStatus].self) { (source: AnyObject) -> [ININUnreadStatus] in
                return Decoders.decode(clazz: [ININUnreadStatus].self, source: source)
            }
            // Decoder for ININUnreadStatus
            Decoders.addDecoder(clazz: ININUnreadStatus.self) { (source: AnyObject) -> ININUnreadStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUnreadStatus()
                instance.unread = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["unread"])
                return instance
            }


            // Decoder for [ININUploadProgress]
            Decoders.addDecoder(clazz: [ININUploadProgress].self) { (source: AnyObject) -> [ININUploadProgress] in
                return Decoders.decode(clazz: [ININUploadProgress].self, source: source)
            }
            // Decoder for ININUploadProgress
            Decoders.addDecoder(clazz: ININUploadProgress.self) { (source: AnyObject) -> ININUploadProgress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUploadProgress()
                instance.carrierId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CarrierId"])
                instance.schemaName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["SchemaName"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Status"])
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Filename"])
                instance.filetype = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Filetype"])
                instance.created = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["Created"])
                instance.updated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["Updated"])
                return instance
            }


            // Decoder for [ININUriReference]
            Decoders.addDecoder(clazz: [ININUriReference].self) { (source: AnyObject) -> [ININUriReference] in
                return Decoders.decode(clazz: [ININUriReference].self, source: source)
            }
            // Decoder for ININUriReference
            Decoders.addDecoder(clazz: ININUriReference.self) { (source: AnyObject) -> ININUriReference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUriReference()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUrlResponse]
            Decoders.addDecoder(clazz: [ININUrlResponse].self) { (source: AnyObject) -> [ININUrlResponse] in
                return Decoders.decode(clazz: [ININUrlResponse].self, source: source)
            }
            // Decoder for ININUrlResponse
            Decoders.addDecoder(clazz: ININUrlResponse.self) { (source: AnyObject) -> ININUrlResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUrlResponse()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ININUsage]
            Decoders.addDecoder(clazz: [ININUsage].self) { (source: AnyObject) -> [ININUsage] in
                return Decoders.decode(clazz: [ININUsage].self, source: source)
            }
            // Decoder for ININUsage
            Decoders.addDecoder(clazz: ININUsage.self) { (source: AnyObject) -> ININUsage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUsage()
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                return instance
            }


            // Decoder for [ININUsageItem]
            Decoders.addDecoder(clazz: [ININUsageItem].self) { (source: AnyObject) -> [ININUsageItem] in
                return Decoders.decode(clazz: [ININUsageItem].self, source: source)
            }
            // Decoder for ININUsageItem
            Decoders.addDecoder(clazz: ININUsageItem.self) { (source: AnyObject) -> ININUsageItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUsageItem()
                instance.type = ININUsageItem.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.totalDocumentByteCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalDocumentByteCount"])
                instance.totalDocumentCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalDocumentCount"])
                return instance
            }


            // Decoder for [ININUser]
            Decoders.addDecoder(clazz: [ININUser].self) { (source: AnyObject) -> [ININUser] in
                return Decoders.decode(clazz: [ININUser].self, source: source)
            }
            // Decoder for ININUser
            Decoders.addDecoder(clazz: ININUser.self) { (source: AnyObject) -> ININUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUser()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.chat = Decoders.decodeOptional(clazz: ININChat.self, source: sourceDictionary["chat"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.primaryContactInfo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["primaryContactInfo"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.state = ININUser.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.routingStatus = Decoders.decodeOptional(clazz: ININRoutingStatus.self, source: sourceDictionary["routingStatus"])
                instance.presence = Decoders.decodeOptional(clazz: ININUserPresence.self, source: sourceDictionary["presence"])
                instance.conversationSummary = Decoders.decodeOptional(clazz: ININUserConversationSummary.self, source: sourceDictionary["conversationSummary"])
                instance.outOfOffice = Decoders.decodeOptional(clazz: ININOutOfOffice.self, source: sourceDictionary["outOfOffice"])
                instance.geolocation = Decoders.decodeOptional(clazz: ININGeolocation.self, source: sourceDictionary["geolocation"])
                instance.station = Decoders.decodeOptional(clazz: ININUserStations.self, source: sourceDictionary["station"])
                instance.authorization = Decoders.decodeOptional(clazz: ININUserAuthorization.self, source: sourceDictionary["authorization"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserActionCategory]
            Decoders.addDecoder(clazz: [ININUserActionCategory].self) { (source: AnyObject) -> [ININUserActionCategory] in
                return Decoders.decode(clazz: [ININUserActionCategory].self, source: source)
            }
            // Decoder for ININUserActionCategory
            Decoders.addDecoder(clazz: ININUserActionCategory.self) { (source: AnyObject) -> ININUserActionCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserActionCategory()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserActionCategoryEntityListing]
            Decoders.addDecoder(clazz: [ININUserActionCategoryEntityListing].self) { (source: AnyObject) -> [ININUserActionCategoryEntityListing] in
                return Decoders.decode(clazz: [ININUserActionCategoryEntityListing].self, source: source)
            }
            // Decoder for ININUserActionCategoryEntityListing
            Decoders.addDecoder(clazz: ININUserActionCategoryEntityListing.self) { (source: AnyObject) -> ININUserActionCategoryEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserActionCategoryEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserActionMetadata]
            Decoders.addDecoder(clazz: [ININUserActionMetadata].self) { (source: AnyObject) -> [ININUserActionMetadata] in
                return Decoders.decode(clazz: [ININUserActionMetadata].self, source: source)
            }
            // Decoder for ININUserActionMetadata
            Decoders.addDecoder(clazz: ININUserActionMetadata.self) { (source: AnyObject) -> ININUserActionMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserActionMetadata()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.deprecated = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deprecated"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.published = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["published"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.helpLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["helpLink"])
                instance.requests = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["requests"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserActionMetadataEntityListing]
            Decoders.addDecoder(clazz: [ININUserActionMetadataEntityListing].self) { (source: AnyObject) -> [ININUserActionMetadataEntityListing] in
                return Decoders.decode(clazz: [ININUserActionMetadataEntityListing].self, source: source)
            }
            // Decoder for ININUserActionMetadataEntityListing
            Decoders.addDecoder(clazz: ININUserActionMetadataEntityListing.self) { (source: AnyObject) -> ININUserActionMetadataEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserActionMetadataEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserActionMetadataRequest]
            Decoders.addDecoder(clazz: [ININUserActionMetadataRequest].self) { (source: AnyObject) -> [ININUserActionMetadataRequest] in
                return Decoders.decode(clazz: [ININUserActionMetadataRequest].self, source: source)
            }
            // Decoder for ININUserActionMetadataRequest
            Decoders.addDecoder(clazz: ININUserActionMetadataRequest.self) { (source: AnyObject) -> ININUserActionMetadataRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserActionMetadataRequest()
                instance.format = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["format"])
                instance.method = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["method"])
                instance.inputSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputSchemaUri"])
                instance.successSchemaUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["successSchemaUri"])
                instance.inputSchema = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["inputSchema"])
                instance.successSchema = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["successSchema"])
                return instance
            }


            // Decoder for [ININUserAuthorization]
            Decoders.addDecoder(clazz: [ININUserAuthorization].self) { (source: AnyObject) -> [ININUserAuthorization] in
                return Decoders.decode(clazz: [ININUserAuthorization].self, source: source)
            }
            // Decoder for ININUserAuthorization
            Decoders.addDecoder(clazz: ININUserAuthorization.self) { (source: AnyObject) -> ININUserAuthorization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserAuthorization()
                instance.roles = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roles"])
                instance.permissions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissions"])
                instance.permissionPolicies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["permissionPolicies"])
                return instance
            }


            // Decoder for [ININUserConversationSummary]
            Decoders.addDecoder(clazz: [ININUserConversationSummary].self) { (source: AnyObject) -> [ININUserConversationSummary] in
                return Decoders.decode(clazz: [ININUserConversationSummary].self, source: source)
            }
            // Decoder for ININUserConversationSummary
            Decoders.addDecoder(clazz: ININUserConversationSummary.self) { (source: AnyObject) -> ININUserConversationSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserConversationSummary()
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.call = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["call"])
                instance.callback = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["callback"])
                instance.email = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["email"])
                instance.chat = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["chat"])
                instance.socialExpression = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["socialExpression"])
                instance.video = Decoders.decodeOptional(clazz: ININMediaSummary.self, source: sourceDictionary["video"])
                return instance
            }


            // Decoder for [ININUserEntityListing]
            Decoders.addDecoder(clazz: [ININUserEntityListing].self) { (source: AnyObject) -> [ININUserEntityListing] in
                return Decoders.decode(clazz: [ININUserEntityListing].self, source: source)
            }
            // Decoder for ININUserEntityListing
            Decoders.addDecoder(clazz: ININUserEntityListing.self) { (source: AnyObject) -> ININUserEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserImage]
            Decoders.addDecoder(clazz: [ININUserImage].self) { (source: AnyObject) -> [ININUserImage] in
                return Decoders.decode(clazz: [ININUserImage].self, source: source)
            }
            // Decoder for ININUserImage
            Decoders.addDecoder(clazz: ININUserImage.self) { (source: AnyObject) -> ININUserImage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserImage()
                instance.resolution = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resolution"])
                instance.imageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUri"])
                return instance
            }


            // Decoder for [ININUserLicenseAssignment]
            Decoders.addDecoder(clazz: [ININUserLicenseAssignment].self) { (source: AnyObject) -> [ININUserLicenseAssignment] in
                return Decoders.decode(clazz: [ININUserLicenseAssignment].self, source: source)
            }
            // Decoder for ININUserLicenseAssignment
            Decoders.addDecoder(clazz: ININUserLicenseAssignment.self) { (source: AnyObject) -> ININUserLicenseAssignment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserLicenseAssignment()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.licenseId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["licenseId"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserMe]
            Decoders.addDecoder(clazz: [ININUserMe].self) { (source: AnyObject) -> [ININUserMe] in
                return Decoders.decode(clazz: [ININUserMe].self, source: source)
            }
            // Decoder for ININUserMe
            Decoders.addDecoder(clazz: ININUserMe.self) { (source: AnyObject) -> ININUserMe in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserMe()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.chat = Decoders.decodeOptional(clazz: ININChat.self, source: sourceDictionary["chat"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.primaryContactInfo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["primaryContactInfo"])
                instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"])
                instance.state = ININUserMe.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.images = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["images"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.routingStatus = Decoders.decodeOptional(clazz: ININRoutingStatus.self, source: sourceDictionary["routingStatus"])
                instance.presence = Decoders.decodeOptional(clazz: ININUserPresence.self, source: sourceDictionary["presence"])
                instance.conversationSummary = Decoders.decodeOptional(clazz: ININUserConversationSummary.self, source: sourceDictionary["conversationSummary"])
                instance.outOfOffice = Decoders.decodeOptional(clazz: ININOutOfOffice.self, source: sourceDictionary["outOfOffice"])
                instance.geolocation = Decoders.decodeOptional(clazz: ININGeolocation.self, source: sourceDictionary["geolocation"])
                instance.station = Decoders.decodeOptional(clazz: ININUserStations.self, source: sourceDictionary["station"])
                instance.authorization = Decoders.decodeOptional(clazz: ININUserAuthorization.self, source: sourceDictionary["authorization"])
                instance.date = Decoders.decodeOptional(clazz: ININServerDate.self, source: sourceDictionary["date"])
                instance.geolocationSettings = Decoders.decodeOptional(clazz: ININGeolocationSettings.self, source: sourceDictionary["geolocationSettings"])
                instance.organization = Decoders.decodeOptional(clazz: ININOrganization.self, source: sourceDictionary["organization"])
                instance.presenceDefinitions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["presenceDefinitions"])
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserParam]
            Decoders.addDecoder(clazz: [ININUserParam].self) { (source: AnyObject) -> [ININUserParam] in
                return Decoders.decode(clazz: [ININUserParam].self, source: source)
            }
            // Decoder for ININUserParam
            Decoders.addDecoder(clazz: ININUserParam.self) { (source: AnyObject) -> ININUserParam in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserParam()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ININUserPresence]
            Decoders.addDecoder(clazz: [ININUserPresence].self) { (source: AnyObject) -> [ININUserPresence] in
                return Decoders.decode(clazz: [ININUserPresence].self, source: source)
            }
            // Decoder for ININUserPresence
            Decoders.addDecoder(clazz: ININUserPresence.self) { (source: AnyObject) -> ININUserPresence in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserPresence()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.primary = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["primary"])
                instance.presenceDefinition = Decoders.decodeOptional(clazz: ININOrganizationPresence.self, source: sourceDictionary["presenceDefinition"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserQueue]
            Decoders.addDecoder(clazz: [ININUserQueue].self) { (source: AnyObject) -> [ININUserQueue] in
                return Decoders.decode(clazz: [ININUserQueue].self, source: source)
            }
            // Decoder for ININUserQueue
            Decoders.addDecoder(clazz: ININUserQueue.self) { (source: AnyObject) -> ININUserQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserQueue()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.state = ININUserQueue.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.modifiedByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedByApp"])
                instance.createdByApp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdByApp"])
                instance.mediaSettings = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["mediaSettings"])
                instance.bullseye = Decoders.decodeOptional(clazz: ININBullseye.self, source: sourceDictionary["bullseye"])
                instance.acwSettings = Decoders.decodeOptional(clazz: ININAcwSettings.self, source: sourceDictionary["acwSettings"])
                instance.skillEvaluationMethod = ININUserQueue.ININSkillEvaluationMethod(rawValue: (sourceDictionary["skillEvaluationMethod"] as? String) ?? "") 
                instance.queueFlow = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queueFlow"])
                instance.callingPartyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callingPartyName"])
                instance.callingPartyNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callingPartyNumber"])
                instance.joined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["joined"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["memberCount"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserQueueEntityListing]
            Decoders.addDecoder(clazz: [ININUserQueueEntityListing].self) { (source: AnyObject) -> [ININUserQueueEntityListing] in
                return Decoders.decode(clazz: [ININUserQueueEntityListing].self, source: source)
            }
            // Decoder for ININUserQueueEntityListing
            Decoders.addDecoder(clazz: ININUserQueueEntityListing.self) { (source: AnyObject) -> ININUserQueueEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserQueueEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserRecording]
            Decoders.addDecoder(clazz: [ININUserRecording].self) { (source: AnyObject) -> [ININUserRecording] in
                return Decoders.decode(clazz: [ININUserRecording].self, source: source)
            }
            // Decoder for ININUserRecording
            Decoders.addDecoder(clazz: ININUserRecording.self) { (source: AnyObject) -> ININUserRecording in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserRecording()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.contentUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentUri"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.createdBy = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["createdBy"])
                instance.conversation = Decoders.decodeOptional(clazz: ININConversation.self, source: sourceDictionary["conversation"])
                instance.contentLength = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["contentLength"])
                instance.durationMilliseconds = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["durationMilliseconds"])
                instance.thumbnails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["thumbnails"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserRecordingEntityListing]
            Decoders.addDecoder(clazz: [ININUserRecordingEntityListing].self) { (source: AnyObject) -> [ININUserRecordingEntityListing] in
                return Decoders.decode(clazz: [ININUserRecordingEntityListing].self, source: source)
            }
            // Decoder for ININUserRecordingEntityListing
            Decoders.addDecoder(clazz: ININUserRecordingEntityListing.self) { (source: AnyObject) -> ININUserRecordingEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserRecordingEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserRoutingSkill]
            Decoders.addDecoder(clazz: [ININUserRoutingSkill].self) { (source: AnyObject) -> [ININUserRoutingSkill] in
                return Decoders.decode(clazz: [ININUserRoutingSkill].self, source: source)
            }
            // Decoder for ININUserRoutingSkill
            Decoders.addDecoder(clazz: ININUserRoutingSkill.self) { (source: AnyObject) -> ININUserRoutingSkill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserRoutingSkill()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.proficiency = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["proficiency"])
                instance.state = ININUserRoutingSkill.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.skillUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["skillUri"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININUserSearchCriteria]
            Decoders.addDecoder(clazz: [ININUserSearchCriteria].self) { (source: AnyObject) -> [ININUserSearchCriteria] in
                return Decoders.decode(clazz: [ININUserSearchCriteria].self, source: source)
            }
            // Decoder for ININUserSearchCriteria
            Decoders.addDecoder(clazz: ININUserSearchCriteria.self) { (source: AnyObject) -> ININUserSearchCriteria in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserSearchCriteria()
                instance.endValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endValue"])
                instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"])
                instance.startValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startValue"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                instance._operator = ININUserSearchCriteria.ININOperator(rawValue: (sourceDictionary["operator"] as? String) ?? "") 
                instance.group = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group"])
                instance.type = ININUserSearchCriteria.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [ININUserSearchRequest]
            Decoders.addDecoder(clazz: [ININUserSearchRequest].self) { (source: AnyObject) -> [ININUserSearchRequest] in
                return Decoders.decode(clazz: [ININUserSearchRequest].self, source: source)
            }
            // Decoder for ININUserSearchRequest
            Decoders.addDecoder(clazz: ININUserSearchRequest.self) { (source: AnyObject) -> ININUserSearchRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserSearchRequest()
                instance.sortOrder = ININUserSearchRequest.ININSortOrder(rawValue: (sourceDictionary["sortOrder"] as? String) ?? "") 
                instance.sortBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sortBy"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.returnFields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["returnFields"])
                instance.expand = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["expand"])
                instance.query = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [ININUserSkillEntityListing]
            Decoders.addDecoder(clazz: [ININUserSkillEntityListing].self) { (source: AnyObject) -> [ININUserSkillEntityListing] in
                return Decoders.decode(clazz: [ININUserSkillEntityListing].self, source: source)
            }
            // Decoder for ININUserSkillEntityListing
            Decoders.addDecoder(clazz: ININUserSkillEntityListing.self) { (source: AnyObject) -> ININUserSkillEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserSkillEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUserStation]
            Decoders.addDecoder(clazz: [ININUserStation].self) { (source: AnyObject) -> [ININUserStation] in
                return Decoders.decode(clazz: [ININUserStation].self, source: source)
            }
            // Decoder for ININUserStation
            Decoders.addDecoder(clazz: ININUserStation.self) { (source: AnyObject) -> ININUserStation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserStation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.associatedUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["associatedUser"])
                instance.associatedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["associatedDate"])
                instance.defaultUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["defaultUser"])
                instance.providerInfo = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["providerInfo"])
                return instance
            }


            // Decoder for [ININUserStations]
            Decoders.addDecoder(clazz: [ININUserStations].self) { (source: AnyObject) -> [ININUserStations] in
                return Decoders.decode(clazz: [ININUserStations].self, source: source)
            }
            // Decoder for ININUserStations
            Decoders.addDecoder(clazz: ININUserStations.self) { (source: AnyObject) -> ININUserStations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUserStations()
                instance.associatedStation = Decoders.decodeOptional(clazz: ININUserStation.self, source: sourceDictionary["associatedStation"])
                instance.effectiveStation = Decoders.decodeOptional(clazz: ININUserStation.self, source: sourceDictionary["effectiveStation"])
                instance.defaultStation = Decoders.decodeOptional(clazz: ININUserStation.self, source: sourceDictionary["defaultStation"])
                instance.lastAssociatedStation = Decoders.decodeOptional(clazz: ININUserStation.self, source: sourceDictionary["lastAssociatedStation"])
                return instance
            }


            // Decoder for [ININUsersEntityListing]
            Decoders.addDecoder(clazz: [ININUsersEntityListing].self) { (source: AnyObject) -> [ININUsersEntityListing] in
                return Decoders.decode(clazz: [ININUsersEntityListing].self, source: source)
            }
            // Decoder for ININUsersEntityListing
            Decoders.addDecoder(clazz: ININUsersEntityListing.self) { (source: AnyObject) -> ININUsersEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUsersEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININUsersSearchResponse]
            Decoders.addDecoder(clazz: [ININUsersSearchResponse].self) { (source: AnyObject) -> [ININUsersSearchResponse] in
                return Decoders.decode(clazz: [ININUsersSearchResponse].self, source: source)
            }
            // Decoder for ININUsersSearchResponse
            Decoders.addDecoder(clazz: ININUsersSearchResponse.self) { (source: AnyObject) -> ININUsersSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUsersSearchResponse()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.previousPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousPage"])
                instance.currentPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPage"])
                instance.nextPage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextPage"])
                instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"])
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                instance.aggregations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["aggregations"])
                return instance
            }


            // Decoder for [ININUtilization]
            Decoders.addDecoder(clazz: [ININUtilization].self) { (source: AnyObject) -> [ININUtilization] in
                return Decoders.decode(clazz: [ININUtilization].self, source: source)
            }
            // Decoder for ININUtilization
            Decoders.addDecoder(clazz: ININUtilization.self) { (source: AnyObject) -> ININUtilization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININUtilization()
                instance.utilization = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["utilization"])
                return instance
            }


            // Decoder for [ININValidateAddressRequest]
            Decoders.addDecoder(clazz: [ININValidateAddressRequest].self) { (source: AnyObject) -> [ININValidateAddressRequest] in
                return Decoders.decode(clazz: [ININValidateAddressRequest].self, source: source)
            }
            // Decoder for ININValidateAddressRequest
            Decoders.addDecoder(clazz: ININValidateAddressRequest.self) { (source: AnyObject) -> ININValidateAddressRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININValidateAddressRequest()
                instance.address = Decoders.decodeOptional(clazz: ININAddress.self, source: sourceDictionary["address"])
                return instance
            }


            // Decoder for [ININValidateAddressResponse]
            Decoders.addDecoder(clazz: [ININValidateAddressResponse].self) { (source: AnyObject) -> [ININValidateAddressResponse] in
                return Decoders.decode(clazz: [ININValidateAddressResponse].self, source: source)
            }
            // Decoder for ININValidateAddressResponse
            Decoders.addDecoder(clazz: ININValidateAddressResponse.self) { (source: AnyObject) -> ININValidateAddressResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININValidateAddressResponse()
                instance.valid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["valid"])
                instance.response = Decoders.decodeOptional(clazz: ININSubscriberResponse.self, source: sourceDictionary["response"])
                return instance
            }


            // Decoder for [ININValue]
            Decoders.addDecoder(clazz: [ININValue].self) { (source: AnyObject) -> [ININValue] in
                return Decoders.decode(clazz: [ININValue].self, source: source)
            }
            // Decoder for ININValue
            Decoders.addDecoder(clazz: ININValue.self) { (source: AnyObject) -> ININValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININValue()
                instance.stringItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["stringItems"])
                instance.integerItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["integerItems"])
                instance.realItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["realItems"])
                instance.dateItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dateItems"])
                instance.userItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userItems"])
                instance.queueItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["queueItems"])
                instance.dataItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dataItems"])
                return instance
            }


            // Decoder for [ININVendorConnectionRequest]
            Decoders.addDecoder(clazz: [ININVendorConnectionRequest].self) { (source: AnyObject) -> [ININVendorConnectionRequest] in
                return Decoders.decode(clazz: [ININVendorConnectionRequest].self, source: source)
            }
            // Decoder for ININVendorConnectionRequest
            Decoders.addDecoder(clazz: ININVendorConnectionRequest.self) { (source: AnyObject) -> ININVendorConnectionRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVendorConnectionRequest()
                instance.publisher = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["publisher"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [ININVideo]
            Decoders.addDecoder(clazz: [ININVideo].self) { (source: AnyObject) -> [ININVideo] in
                return Decoders.decode(clazz: [ININVideo].self, source: source)
            }
            // Decoder for ININVideo
            Decoders.addDecoder(clazz: ININVideo.self) { (source: AnyObject) -> ININVideo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVideo()
                instance.state = ININVideo.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                instance.audioMuted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["audioMuted"])
                instance.videoMuted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["videoMuted"])
                instance.sharingScreen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sharingScreen"])
                instance.peerCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["peerCount"])
                instance.disconnectType = ININVideo.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.disconnectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["disconnectedTime"])
                return instance
            }


            // Decoder for [ININVideoConversation]
            Decoders.addDecoder(clazz: [ININVideoConversation].self) { (source: AnyObject) -> [ININVideoConversation] in
                return Decoders.decode(clazz: [ININVideoConversation].self, source: source)
            }
            // Decoder for ININVideoConversation
            Decoders.addDecoder(clazz: ININVideoConversation.self) { (source: AnyObject) -> ININVideoConversation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVideoConversation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.otherMediaUris = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherMediaUris"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVideoConversationEntityListing]
            Decoders.addDecoder(clazz: [ININVideoConversationEntityListing].self) { (source: AnyObject) -> [ININVideoConversationEntityListing] in
                return Decoders.decode(clazz: [ININVideoConversationEntityListing].self, source: source)
            }
            // Decoder for ININVideoConversationEntityListing
            Decoders.addDecoder(clazz: ININVideoConversationEntityListing.self) { (source: AnyObject) -> ININVideoConversationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVideoConversationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININVideoMediaParticipant]
            Decoders.addDecoder(clazz: [ININVideoMediaParticipant].self) { (source: AnyObject) -> [ININVideoMediaParticipant] in
                return Decoders.decode(clazz: [ININVideoMediaParticipant].self, source: source)
            }
            // Decoder for ININVideoMediaParticipant
            Decoders.addDecoder(clazz: ININVideoMediaParticipant.self) { (source: AnyObject) -> ININVideoMediaParticipant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVideoMediaParticipant()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.address = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startTime"])
                instance.connectedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["connectedTime"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.startHoldTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startHoldTime"])
                instance.purpose = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["purpose"])
                instance.state = ININVideoMediaParticipant.ININState(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.direction = ININVideoMediaParticipant.ININDirection(rawValue: (sourceDictionary["direction"] as? String) ?? "") 
                instance.disconnectType = ININVideoMediaParticipant.ININDisconnectType(rawValue: (sourceDictionary["disconnectType"] as? String) ?? "") 
                instance.held = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["held"])
                instance.wrapupRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupRequired"])
                instance.wrapupPrompt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wrapupPrompt"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.queue = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["queue"])
                instance.attributes = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["attributes"])
                instance.errorInfo = Decoders.decodeOptional(clazz: ININErrorBody.self, source: sourceDictionary["errorInfo"])
                instance.script = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["script"])
                instance.wrapupTimeoutMs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wrapupTimeoutMs"])
                instance.wrapupSkipped = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["wrapupSkipped"])
                instance.audioMuted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["audioMuted"])
                instance.videoMuted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["videoMuted"])
                instance.sharingScreen = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sharingScreen"])
                instance.peerCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["peerCount"])
                instance.context = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["context"])
                return instance
            }


            // Decoder for [ININView]
            Decoders.addDecoder(clazz: [ININView].self) { (source: AnyObject) -> [ININView] in
                return Decoders.decode(clazz: [ININView].self, source: source)
            }
            // Decoder for ININView
            Decoders.addDecoder(clazz: ININView.self) { (source: AnyObject) -> ININView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININView()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [ININVoiceRate]
            Decoders.addDecoder(clazz: [ININVoiceRate].self) { (source: AnyObject) -> [ININVoiceRate] in
                return Decoders.decode(clazz: [ININVoiceRate].self, source: source)
            }
            // Decoder for ININVoiceRate
            Decoders.addDecoder(clazz: ININVoiceRate.self) { (source: AnyObject) -> ININVoiceRate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRate()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.amendmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amendmentId"])
                instance.type = ININVoiceRate.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveDate"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.durationMinimumSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationMinimumSeconds"])
                instance.durationIncrementSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationIncrementSeconds"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceRateExtended]
            Decoders.addDecoder(clazz: [ININVoiceRateExtended].self) { (source: AnyObject) -> [ININVoiceRateExtended] in
                return Decoders.decode(clazz: [ININVoiceRateExtended].self, source: source)
            }
            // Decoder for ININVoiceRateExtended
            Decoders.addDecoder(clazz: ININVoiceRateExtended.self) { (source: AnyObject) -> ININVoiceRateExtended in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRateExtended()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.amendmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amendmentId"])
                instance.type = ININVoiceRateExtended.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveDate"])
                instance.groupName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupName"])
                instance.areaCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["areaCode"])
                instance.deletionMarker = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["deletionMarker"])
                instance.outboundRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["outboundRate"])
                instance.outboundDurationMinimumSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outboundDurationMinimumSeconds"])
                instance.outboundDurationIncrementSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outboundDurationIncrementSeconds"])
                instance.inboundTolledRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inboundTolledRate"])
                instance.inboundTolledDurationMinimumSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inboundTolledDurationMinimumSeconds"])
                instance.inboundTolledDurationIncrementSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inboundTolledDurationIncrementSeconds"])
                instance.inboundTollFreeRate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["inboundTollFreeRate"])
                instance.inboundTollFreeDurationMinimumSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inboundTollFreeDurationMinimumSeconds"])
                instance.inboundTollFreeDurationIncrementSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inboundTollFreeDurationIncrementSeconds"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceRateInternational]
            Decoders.addDecoder(clazz: [ININVoiceRateInternational].self) { (source: AnyObject) -> [ININVoiceRateInternational] in
                return Decoders.decode(clazz: [ININVoiceRateInternational].self, source: source)
            }
            // Decoder for ININVoiceRateInternational
            Decoders.addDecoder(clazz: ININVoiceRateInternational.self) { (source: AnyObject) -> ININVoiceRateInternational in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRateInternational()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.amendmentId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["amendmentId"])
                instance.type = ININVoiceRateInternational.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveDate"])
                instance.rate = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rate"])
                instance.durationMinimumSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationMinimumSeconds"])
                instance.durationIncrementSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationIncrementSeconds"])
                instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"])
                instance.destination = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destination"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceRateInternationalEntityListing]
            Decoders.addDecoder(clazz: [ININVoiceRateInternationalEntityListing].self) { (source: AnyObject) -> [ININVoiceRateInternationalEntityListing] in
                return Decoders.decode(clazz: [ININVoiceRateInternationalEntityListing].self, source: source)
            }
            // Decoder for ININVoiceRateInternationalEntityListing
            Decoders.addDecoder(clazz: ININVoiceRateInternationalEntityListing.self) { (source: AnyObject) -> ININVoiceRateInternationalEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRateInternationalEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININVoiceRateUpdate]
            Decoders.addDecoder(clazz: [ININVoiceRateUpdate].self) { (source: AnyObject) -> [ININVoiceRateUpdate] in
                return Decoders.decode(clazz: [ININVoiceRateUpdate].self, source: source)
            }
            // Decoder for ININVoiceRateUpdate
            Decoders.addDecoder(clazz: ININVoiceRateUpdate.self) { (source: AnyObject) -> ININVoiceRateUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRateUpdate()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                instance.inboundTollFree = Decoders.decodeOptional(clazz: ININVoiceRate.self, source: sourceDictionary["inboundTollFree"])
                instance.extended = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["extended"])
                instance.inboundTolled = Decoders.decodeOptional(clazz: ININVoiceRate.self, source: sourceDictionary["inboundTolled"])
                instance.outboundLocal = Decoders.decodeOptional(clazz: ININVoiceRate.self, source: sourceDictionary["outboundLocal"])
                instance.outboundIntraState = Decoders.decodeOptional(clazz: ININVoiceRate.self, source: sourceDictionary["outboundIntraState"])
                instance.outboundInterState = Decoders.decodeOptional(clazz: ININVoiceRate.self, source: sourceDictionary["outboundInterState"])
                instance.outboundInternational = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["outboundInternational"])
                instance.amendmentDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["amendmentDate"])
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effectiveDate"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceRatesCsv]
            Decoders.addDecoder(clazz: [ININVoiceRatesCsv].self) { (source: AnyObject) -> [ININVoiceRatesCsv] in
                return Decoders.decode(clazz: [ININVoiceRatesCsv].self, source: source)
            }
            // Decoder for ININVoiceRatesCsv
            Decoders.addDecoder(clazz: ININVoiceRatesCsv.self) { (source: AnyObject) -> ININVoiceRatesCsv in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceRatesCsv()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceXmlOperation]
            Decoders.addDecoder(clazz: [ININVoiceXmlOperation].self) { (source: AnyObject) -> [ININVoiceXmlOperation] in
                return Decoders.decode(clazz: [ININVoiceXmlOperation].self, source: source)
            }
            // Decoder for ININVoiceXmlOperation
            Decoders.addDecoder(clazz: ININVoiceXmlOperation.self) { (source: AnyObject) -> ININVoiceXmlOperation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceXmlOperation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININVoiceXmlOperation.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.method = ININVoiceXmlOperation.ININMethod(rawValue: (sourceDictionary["method"] as? String) ?? "") 
                instance.encoding = ININVoiceXmlOperation.ININEncoding(rawValue: (sourceDictionary["encoding"] as? String) ?? "") 
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                instance.inputs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputs"])
                instance.outputs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outputs"])
                instance.fetchAudio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fetchAudio"])
                instance.timeoutMS = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeoutMS"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoiceXmlOperationEntityListing]
            Decoders.addDecoder(clazz: [ININVoiceXmlOperationEntityListing].self) { (source: AnyObject) -> [ININVoiceXmlOperationEntityListing] in
                return Decoders.decode(clazz: [ININVoiceXmlOperationEntityListing].self, source: source)
            }
            // Decoder for ININVoiceXmlOperationEntityListing
            Decoders.addDecoder(clazz: ININVoiceXmlOperationEntityListing.self) { (source: AnyObject) -> ININVoiceXmlOperationEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoiceXmlOperationEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININVoicemailMailboxInfo]
            Decoders.addDecoder(clazz: [ININVoicemailMailboxInfo].self) { (source: AnyObject) -> [ININVoicemailMailboxInfo] in
                return Decoders.decode(clazz: [ININVoicemailMailboxInfo].self, source: source)
            }
            // Decoder for ININVoicemailMailboxInfo
            Decoders.addDecoder(clazz: ININVoicemailMailboxInfo.self) { (source: AnyObject) -> ININVoicemailMailboxInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailMailboxInfo()
                instance.usageSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["usageSizeBytes"])
                instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalCount"])
                instance.unreadCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unreadCount"])
                instance.voicemailPolicy = Decoders.decodeOptional(clazz: ININVoicemailUserPolicy.self, source: sourceDictionary["voicemailPolicy"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                return instance
            }


            // Decoder for [ININVoicemailMediaInfo]
            Decoders.addDecoder(clazz: [ININVoicemailMediaInfo].self) { (source: AnyObject) -> [ININVoicemailMediaInfo] in
                return Decoders.decode(clazz: [ININVoicemailMediaInfo].self, source: source)
            }
            // Decoder for ININVoicemailMediaInfo
            Decoders.addDecoder(clazz: ININVoicemailMediaInfo.self) { (source: AnyObject) -> ININVoicemailMediaInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailMediaInfo()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.mediaFileUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaFileUri"])
                instance.mediaImageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mediaImageUri"])
                return instance
            }


            // Decoder for [ININVoicemailMessage]
            Decoders.addDecoder(clazz: [ININVoicemailMessage].self) { (source: AnyObject) -> [ININVoicemailMessage] in
                return Decoders.decode(clazz: [ININVoicemailMessage].self, source: source)
            }
            // Decoder for ININVoicemailMessage
            Decoders.addDecoder(clazz: ININVoicemailMessage.self) { (source: AnyObject) -> ININVoicemailMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailMessage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.conversation = Decoders.decodeOptional(clazz: ININConversation.self, source: sourceDictionary["conversation"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.audioRecordingDurationSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["audioRecordingDurationSeconds"])
                instance.audioRecordingSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["audioRecordingSizeBytes"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.callerAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerAddress"])
                instance.callerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callerName"])
                instance.callerUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["callerUser"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoicemailMessageEntityListing]
            Decoders.addDecoder(clazz: [ININVoicemailMessageEntityListing].self) { (source: AnyObject) -> [ININVoicemailMessageEntityListing] in
                return Decoders.decode(clazz: [ININVoicemailMessageEntityListing].self, source: source)
            }
            // Decoder for ININVoicemailMessageEntityListing
            Decoders.addDecoder(clazz: ININVoicemailMessageEntityListing.self) { (source: AnyObject) -> ININVoicemailMessageEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailMessageEntityListing()
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININVoicemailOrganizationPolicy]
            Decoders.addDecoder(clazz: [ININVoicemailOrganizationPolicy].self) { (source: AnyObject) -> [ININVoicemailOrganizationPolicy] in
                return Decoders.decode(clazz: [ININVoicemailOrganizationPolicy].self, source: source)
            }
            // Decoder for ININVoicemailOrganizationPolicy
            Decoders.addDecoder(clazz: ININVoicemailOrganizationPolicy.self) { (source: AnyObject) -> ININVoicemailOrganizationPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailOrganizationPolicy()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.retentionTimeDays = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["retentionTimeDays"])
                instance.alertTimeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alertTimeoutSeconds"])
                instance.minimumRecordingTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumRecordingTimeSeconds"])
                instance.maximumRecordingTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumRecordingTimeSeconds"])
                instance.unavailableMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unavailableMessageUri"])
                instance.namePromptMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["namePromptMessageUri"])
                instance.fullMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullMessageUri"])
                instance.compressSilence = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["compressSilence"])
                instance.pinConfiguration = Decoders.decodeOptional(clazz: ININPINConfiguration.self, source: sourceDictionary["pinConfiguration"])
                instance.quotaSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quotaSizeBytes"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                instance.voicemailExtension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemailExtension"])
                instance.pinRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pinRequired"])
                return instance
            }


            // Decoder for [ININVoicemailUserPolicy]
            Decoders.addDecoder(clazz: [ININVoicemailUserPolicy].self) { (source: AnyObject) -> [ININVoicemailUserPolicy] in
                return Decoders.decode(clazz: [ININVoicemailUserPolicy].self, source: source)
            }
            // Decoder for ININVoicemailUserPolicy
            Decoders.addDecoder(clazz: ININVoicemailUserPolicy.self) { (source: AnyObject) -> ININVoicemailUserPolicy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVoicemailUserPolicy()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.alertTimeoutSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alertTimeoutSeconds"])
                instance.minimumRecordingTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumRecordingTimeSeconds"])
                instance.maximumRecordingTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumRecordingTimeSeconds"])
                instance.unavailableMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unavailableMessageUri"])
                instance.namePromptMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["namePromptMessageUri"])
                instance.fullMessageUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullMessageUri"])
                instance.pin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pin"])
                instance.quotaSizeBytes = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quotaSizeBytes"])
                instance.createdDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdDate"])
                instance.modifiedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["modifiedDate"])
                return instance
            }


            // Decoder for [ININVpn]
            Decoders.addDecoder(clazz: [ININVpn].self) { (source: AnyObject) -> [ININVpn] in
                return Decoders.decode(clazz: [ININVpn].self, source: source)
            }
            // Decoder for ININVpn
            Decoders.addDecoder(clazz: ININVpn.self) { (source: AnyObject) -> ININVpn in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININVpn()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.ip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ip"])
                instance.psk = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["psk"])
                return instance
            }


            // Decoder for [ININWaypoint]
            Decoders.addDecoder(clazz: [ININWaypoint].self) { (source: AnyObject) -> [ININWaypoint] in
                return Decoders.decode(clazz: [ININWaypoint].self, source: source)
            }
            // Decoder for ININWaypoint
            Decoders.addDecoder(clazz: ININWaypoint.self) { (source: AnyObject) -> ININWaypoint in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWaypoint()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.targetScene = Decoders.decodeOptional(clazz: ININScene.self, source: sourceDictionary["targetScene"])
                instance.rotationY = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rotationY"])
                instance.rotationX = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rotationX"])
                instance.sceneRotationY = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sceneRotationY"])
                instance.distance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["distance"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWaypointEntityListing]
            Decoders.addDecoder(clazz: [ININWaypointEntityListing].self) { (source: AnyObject) -> [ININWaypointEntityListing] in
                return Decoders.decode(clazz: [ININWaypointEntityListing].self, source: source)
            }
            // Decoder for ININWaypointEntityListing
            Decoders.addDecoder(clazz: ININWaypointEntityListing.self) { (source: AnyObject) -> ININWaypointEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWaypointEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININWorkItem]
            Decoders.addDecoder(clazz: [ININWorkItem].self) { (source: AnyObject) -> [ININWorkItem] in
                return Decoders.decode(clazz: [ININWorkItem].self, source: source)
            }
            // Decoder for ININWorkItem
            Decoders.addDecoder(clazz: ININWorkItem.self) { (source: AnyObject) -> ININWorkItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItem()
                instance.workItemExecId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["workItemExecId"])
                instance.workItemConfigId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["workItemConfigId"])
                instance.workItemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["workItemName"])
                return instance
            }


            // Decoder for [ININWorkItemActions]
            Decoders.addDecoder(clazz: [ININWorkItemActions].self) { (source: AnyObject) -> [ININWorkItemActions] in
                return Decoders.decode(clazz: [ININWorkItemActions].self, source: source)
            }
            // Decoder for ININWorkItemActions
            Decoders.addDecoder(clazz: ININWorkItemActions.self) { (source: AnyObject) -> ININWorkItemActions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemActions()
                instance.canSubmit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["canSubmit"])
                return instance
            }


            // Decoder for [ININWorkItemCache]
            Decoders.addDecoder(clazz: [ININWorkItemCache].self) { (source: AnyObject) -> [ININWorkItemCache] in
                return Decoders.decode(clazz: [ININWorkItemCache].self, source: source)
            }
            // Decoder for ININWorkItemCache
            Decoders.addDecoder(clazz: ININWorkItemCache.self) { (source: AnyObject) -> ININWorkItemCache in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemCache()
                instance.workItemExecId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["workItemExecId"])
                instance.saveTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["saveTime"])
                instance.saveUser = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["saveUser"])
                instance.saveComment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["saveComment"])
                instance.dataItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dataItems"])
                return instance
            }


            // Decoder for [ININWorkItemCommand]
            Decoders.addDecoder(clazz: [ININWorkItemCommand].self) { (source: AnyObject) -> [ININWorkItemCommand] in
                return Decoders.decode(clazz: [ININWorkItemCommand].self, source: source)
            }
            // Decoder for ININWorkItemCommand
            Decoders.addDecoder(clazz: ININWorkItemCommand.self) { (source: AnyObject) -> ININWorkItemCommand in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemCommand()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                return instance
            }


            // Decoder for [ININWorkItemCommandGroup]
            Decoders.addDecoder(clazz: [ININWorkItemCommandGroup].self) { (source: AnyObject) -> [ININWorkItemCommandGroup] in
                return Decoders.decode(clazz: [ININWorkItemCommandGroup].self, source: source)
            }
            // Decoder for ININWorkItemCommandGroup
            Decoders.addDecoder(clazz: ININWorkItemCommandGroup.self) { (source: AnyObject) -> ININWorkItemCommandGroup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemCommandGroup()
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.defaultCommandId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultCommandId"])
                instance.commands = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commands"])
                return instance
            }


            // Decoder for [ININWorkItemDefinition]
            Decoders.addDecoder(clazz: [ININWorkItemDefinition].self) { (source: AnyObject) -> [ININWorkItemDefinition] in
                return Decoders.decode(clazz: [ININWorkItemDefinition].self, source: source)
            }
            // Decoder for ININWorkItemDefinition
            Decoders.addDecoder(clazz: ININWorkItemDefinition.self) { (source: AnyObject) -> ININWorkItemDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemDefinition()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.commandCategories = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commandCategories"])
                instance.form = Decoders.decodeOptional(clazz: ININForm.self, source: sourceDictionary["form"])
                return instance
            }


            // Decoder for [ININWorkItemDetails]
            Decoders.addDecoder(clazz: [ININWorkItemDetails].self) { (source: AnyObject) -> [ININWorkItemDetails] in
                return Decoders.decode(clazz: [ININWorkItemDetails].self, source: source)
            }
            // Decoder for ININWorkItemDetails
            Decoders.addDecoder(clazz: ININWorkItemDetails.self) { (source: AnyObject) -> ININWorkItemDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemDetails()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.workItemDefinition = Decoders.decodeOptional(clazz: ININWorkItemDefinition.self, source: sourceDictionary["workItemDefinition"])
                instance.flowExecId = Decoders.decodeOptional(clazz: ININFlowExecId.self, source: sourceDictionary["flowExecId"])
                instance.flowConfigId = Decoders.decodeOptional(clazz: ININFlowConfigId.self, source: sourceDictionary["flowConfigId"])
                instance.flowCreateTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["flowCreateTime"])
                instance.createTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createTime"])
                instance.owner = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["owner"])
                instance.offeredToUsers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["offeredToUsers"])
                instance.offeredToQueues = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["offeredToQueues"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.subtitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subtitle"])
                instance.associatedDocuments = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["associatedDocuments"])
                instance.availableActions = Decoders.decodeOptional(clazz: ININWorkItemActions.self, source: sourceDictionary["availableActions"])
                instance.dataValueInfo = Decoders.decodeOptional(clazz: ININDataValueInfo.self, source: sourceDictionary["dataValueInfo"])
                instance.workItemCache = Decoders.decodeOptional(clazz: ININWorkItemCache.self, source: sourceDictionary["workItemCache"])
                instance.lastOfferedTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastOfferedTime"])
                instance.lastOwnershipUpdateTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["lastOwnershipUpdateTime"])
                instance.currentTaskStartTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["currentTaskStartTime"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWorkItemSearchDetails]
            Decoders.addDecoder(clazz: [ININWorkItemSearchDetails].self) { (source: AnyObject) -> [ININWorkItemSearchDetails] in
                return Decoders.decode(clazz: [ININWorkItemSearchDetails].self, source: source)
            }
            // Decoder for ININWorkItemSearchDetails
            Decoders.addDecoder(clazz: ININWorkItemSearchDetails.self) { (source: AnyObject) -> ININWorkItemSearchDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemSearchDetails()
                instance.workItem = Decoders.decodeOptional(clazz: ININWorkItemDetails.self, source: sourceDictionary["workItem"])
                return instance
            }


            // Decoder for [ININWorkItemSearchDetailsSearchResult]
            Decoders.addDecoder(clazz: [ININWorkItemSearchDetailsSearchResult].self) { (source: AnyObject) -> [ININWorkItemSearchDetailsSearchResult] in
                return Decoders.decode(clazz: [ININWorkItemSearchDetailsSearchResult].self, source: source)
            }
            // Decoder for ININWorkItemSearchDetailsSearchResult
            Decoders.addDecoder(clazz: ININWorkItemSearchDetailsSearchResult.self) { (source: AnyObject) -> ININWorkItemSearchDetailsSearchResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemSearchDetailsSearchResult()
                instance.searchResults = Decoders.decodeOptional(clazz: ININLinkedEntityListingWorkItemSearchDetails.self, source: sourceDictionary["searchResults"])
                instance.facetResults = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["facetResults"])
                return instance
            }


            // Decoder for [ININWorkItemSubmitRequest]
            Decoders.addDecoder(clazz: [ININWorkItemSubmitRequest].self) { (source: AnyObject) -> [ININWorkItemSubmitRequest] in
                return Decoders.decode(clazz: [ININWorkItemSubmitRequest].self, source: source)
            }
            // Decoder for ININWorkItemSubmitRequest
            Decoders.addDecoder(clazz: ININWorkItemSubmitRequest.self) { (source: AnyObject) -> ININWorkItemSubmitRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemSubmitRequest()
                instance.commandId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commandId"])
                instance.dataItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dataItems"])
                return instance
            }


            // Decoder for [ININWorkItemTransferRequest]
            Decoders.addDecoder(clazz: [ININWorkItemTransferRequest].self) { (source: AnyObject) -> [ININWorkItemTransferRequest] in
                return Decoders.decode(clazz: [ININWorkItemTransferRequest].self, source: source)
            }
            // Decoder for ININWorkItemTransferRequest
            Decoders.addDecoder(clazz: ININWorkItemTransferRequest.self) { (source: AnyObject) -> ININWorkItemTransferRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkItemTransferRequest()
                instance.transferTargetType = ININWorkItemTransferRequest.ININTransferTargetType(rawValue: (sourceDictionary["transferTargetType"] as? String) ?? "") 
                instance.transferTarget = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transferTarget"])
                return instance
            }


            // Decoder for [ININWorkspace]
            Decoders.addDecoder(clazz: [ININWorkspace].self) { (source: AnyObject) -> [ININWorkspace] in
                return Decoders.decode(clazz: [ININWorkspace].self, source: source)
            }
            // Decoder for ININWorkspace
            Decoders.addDecoder(clazz: ININWorkspace.self) { (source: AnyObject) -> ININWorkspace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspace()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = ININWorkspace.ININType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.isCurrentUserWorkspace = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isCurrentUserWorkspace"])
                instance.user = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["user"])
                instance.bucket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bucket"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.summary = Decoders.decodeOptional(clazz: ININWorkspaceSummary.self, source: sourceDictionary["summary"])
                instance.acl = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["acl"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWorkspaceCreate]
            Decoders.addDecoder(clazz: [ININWorkspaceCreate].self) { (source: AnyObject) -> [ININWorkspaceCreate] in
                return Decoders.decode(clazz: [ININWorkspaceCreate].self, source: source)
            }
            // Decoder for ININWorkspaceCreate
            Decoders.addDecoder(clazz: ININWorkspaceCreate.self) { (source: AnyObject) -> ININWorkspaceCreate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspaceCreate()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.bucket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bucket"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ININWorkspaceEntityListing]
            Decoders.addDecoder(clazz: [ININWorkspaceEntityListing].self) { (source: AnyObject) -> [ININWorkspaceEntityListing] in
                return Decoders.decode(clazz: [ININWorkspaceEntityListing].self, source: source)
            }
            // Decoder for ININWorkspaceEntityListing
            Decoders.addDecoder(clazz: ININWorkspaceEntityListing.self) { (source: AnyObject) -> ININWorkspaceEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspaceEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININWorkspaceMember]
            Decoders.addDecoder(clazz: [ININWorkspaceMember].self) { (source: AnyObject) -> [ININWorkspaceMember] in
                return Decoders.decode(clazz: [ININWorkspaceMember].self, source: source)
            }
            // Decoder for ININWorkspaceMember
            Decoders.addDecoder(clazz: ININWorkspaceMember.self) { (source: AnyObject) -> ININWorkspaceMember in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspaceMember()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.workspace = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["workspace"])
                instance.memberType = ININWorkspaceMember.ININMemberType(rawValue: (sourceDictionary["memberType"] as? String) ?? "") 
                instance.member = Decoders.decodeOptional(clazz: ININUriReference.self, source: sourceDictionary["member"])
                instance.user = Decoders.decodeOptional(clazz: ININUser.self, source: sourceDictionary["user"])
                instance.group = Decoders.decodeOptional(clazz: ININGroup.self, source: sourceDictionary["group"])
                instance.securityProfile = Decoders.decodeOptional(clazz: ININSecurityProfile.self, source: sourceDictionary["securityProfile"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWorkspaceMemberEntityListing]
            Decoders.addDecoder(clazz: [ININWorkspaceMemberEntityListing].self) { (source: AnyObject) -> [ININWorkspaceMemberEntityListing] in
                return Decoders.decode(clazz: [ININWorkspaceMemberEntityListing].self, source: source)
            }
            // Decoder for ININWorkspaceMemberEntityListing
            Decoders.addDecoder(clazz: ININWorkspaceMemberEntityListing.self) { (source: AnyObject) -> ININWorkspaceMemberEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspaceMemberEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININWorkspaceSummary]
            Decoders.addDecoder(clazz: [ININWorkspaceSummary].self) { (source: AnyObject) -> [ININWorkspaceSummary] in
                return Decoders.decode(clazz: [ININWorkspaceSummary].self, source: source)
            }
            // Decoder for ININWorkspaceSummary
            Decoders.addDecoder(clazz: ININWorkspaceSummary.self) { (source: AnyObject) -> ININWorkspaceSummary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWorkspaceSummary()
                instance.totalDocumentCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalDocumentCount"])
                instance.totalDocumentByteCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["totalDocumentByteCount"])
                return instance
            }


            // Decoder for [ININWrapUpCodeMapping]
            Decoders.addDecoder(clazz: [ININWrapUpCodeMapping].self) { (source: AnyObject) -> [ININWrapUpCodeMapping] in
                return Decoders.decode(clazz: [ININWrapUpCodeMapping].self, source: source)
            }
            // Decoder for ININWrapUpCodeMapping
            Decoders.addDecoder(clazz: ININWrapUpCodeMapping.self) { (source: AnyObject) -> ININWrapUpCodeMapping in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWrapUpCodeMapping()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.version = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["version"])
                instance.defaultSet = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["defaultSet"])
                instance.mapping = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["mapping"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWrapup]
            Decoders.addDecoder(clazz: [ININWrapup].self) { (source: AnyObject) -> [ININWrapup] in
                return Decoders.decode(clazz: [ININWrapup].self, source: source)
            }
            // Decoder for ININWrapup
            Decoders.addDecoder(clazz: ININWrapup.self) { (source: AnyObject) -> ININWrapup in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWrapup()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                instance.durationSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationSeconds"])
                instance.endTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endTime"])
                instance.provisional = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["provisional"])
                return instance
            }


            // Decoder for [ININWrapupCode]
            Decoders.addDecoder(clazz: [ININWrapupCode].self) { (source: AnyObject) -> [ININWrapupCode] in
                return Decoders.decode(clazz: [ININWrapupCode].self, source: source)
            }
            // Decoder for ININWrapupCode
            Decoders.addDecoder(clazz: ININWrapupCode.self) { (source: AnyObject) -> ININWrapupCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWrapupCode()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.dateCreated = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateCreated"])
                instance.dateModified = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dateModified"])
                instance.modifiedBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["modifiedBy"])
                instance.createdBy = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdBy"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                return instance
            }


            // Decoder for [ININWrapupCodeEntityListing]
            Decoders.addDecoder(clazz: [ININWrapupCodeEntityListing].self) { (source: AnyObject) -> [ININWrapupCodeEntityListing] in
                return Decoders.decode(clazz: [ININWrapupCodeEntityListing].self, source: source)
            }
            // Decoder for ININWrapupCodeEntityListing
            Decoders.addDecoder(clazz: ININWrapupCodeEntityListing.self) { (source: AnyObject) -> ININWrapupCodeEntityListing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININWrapupCodeEntityListing()
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                instance.pageNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageNumber"])
                instance.total = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total"])
                instance.entities = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["entities"])
                instance.selfUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfUri"])
                instance.previousUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previousUri"])
                instance.firstUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstUri"])
                instance.nextUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nextUri"])
                instance.lastUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUri"])
                instance.pageCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageCount"])
                return instance
            }


            // Decoder for [ININXlsxSchema]
            Decoders.addDecoder(clazz: [ININXlsxSchema].self) { (source: AnyObject) -> [ININXlsxSchema] in
                return Decoders.decode(clazz: [ININXlsxSchema].self, source: source)
            }
            // Decoder for ININXlsxSchema
            Decoders.addDecoder(clazz: ININXlsxSchema.self) { (source: AnyObject) -> ININXlsxSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ININXlsxSchema()
                instance.sheetSchemas = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["SheetSchemas"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"])
                instance.carrierId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["CarrierId"])
                return instance
            }
        }
    }
}
