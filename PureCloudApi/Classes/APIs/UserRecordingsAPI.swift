//
// UserRecordingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UserRecordingsAPI: APIBase {
    /**
     Delete a user recording.
     
     - parameter recordingId: (path) User Recording ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUserrecordingsRecordingId(recordingId recordingId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteUserrecordingsRecordingIdWithRequestBuilder(recordingId: recordingId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a user recording.
     - DELETE /api/v2/userrecordings/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter recordingId: (path) User Recording ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUserrecordingsRecordingIdWithRequestBuilder(recordingId recordingId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/userrecordings/{recordingId}"
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a list of user recordings.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserrecordings(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, expand: String? = nil, completion: ((data: ININUserRecordingEntityListing?, error: ErrorType?) -> Void)) {
        getUserrecordingsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a list of user recordings.
     - GET /api/v2/userrecordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "workspace" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "read" : true,
    "selfUri" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "durationMilliseconds" : 123456789,
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "",
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123456789,
    "id" : "aeiou",
    "thumbnails" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "conversation" : {
      "address" : "aeiou",
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "callbackUserName" : "aeiou",
          "disconnectType" : "aeiou",
          "timeoutSeconds" : 123,
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou"
        } ],
        "videos" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "videoMuted" : true,
          "peerCount" : 123,
          "context" : "aeiou",
          "audioMuted" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "sharingScreen" : true,
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "locale" : "aeiou",
        "emails" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "subject" : "aeiou",
          "messagesSent" : 123,
          "errorInfo" : "",
          "segments" : [ "" ],
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "redacted" : true,
          "selfUri" : "aeiou",
          "answers" : {
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "neverRelease" : true,
          "agentHasRead" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "calibration" : {
            "agent" : "",
            "evaluations" : [ "" ],
            "selfUri" : "aeiou",
            "evaluators" : [ "" ],
            "contextId" : "aeiou",
            "averageScore" : 123,
            "calibrator" : "",
            "highScore" : 123,
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "scoringIndex" : "",
            "expertEvaluator" : "",
            "name" : "aeiou",
            "id" : "aeiou",
            "lowScore" : 123,
            "conversation" : "",
            "evaluationForm" : ""
          },
          "conversation" : "",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : "",
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          },
          "isScoringIndex" : true,
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "consultParticipantId" : "aeiou",
        "queueName" : "aeiou",
        "calls" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "confined" : true,
          "held" : true,
          "recording" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "recordingState" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "documentId" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "direction" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "segments" : [ "" ],
          "socialMediaHub" : "aeiou",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000"
      } ],
      "maxParticipants" : 123
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter expand: (query) conversation (optional)

     - returns: RequestBuilder<ININUserRecordingEntityListing> 
     */
    public class func getUserrecordingsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, expand: String? = nil) -> RequestBuilder<ININUserRecordingEntityListing> {
        let path = "/api/v2/userrecordings"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRecordingEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a user recording.
     
     - parameter recordingId: (path) User Recording ID 
     - parameter expand: (query) conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserrecordingsRecordingId(recordingId recordingId: String, expand: String? = nil, completion: ((data: ININUserRecording?, error: ErrorType?) -> Void)) {
        getUserrecordingsRecordingIdWithRequestBuilder(recordingId: recordingId, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user recording.
     - GET /api/v2/userrecordings/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "read" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "durationMilliseconds" : 123456789,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "contentUri" : "aeiou",
  "name" : "aeiou",
  "contentLength" : 123456789,
  "id" : "aeiou",
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  }
}}]
     
     - parameter recordingId: (path) User Recording ID 
     - parameter expand: (query) conversation (optional)

     - returns: RequestBuilder<ININUserRecording> 
     */
    public class func getUserrecordingsRecordingIdWithRequestBuilder(recordingId recordingId: String, expand: String? = nil) -> RequestBuilder<ININUserRecording> {
        var path = "/api/v2/userrecordings/{recordingId}"
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRecording>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

    enum for parameter formatId
    */
    public enum ININFormatId_getUserrecordingsRecordingIdMedia: String { 
        case Wav = "WAV"
        case Webm = "WEBM"
        case WavUlaw = "WAV_ULAW"
        case OggVorbis = "OGG_VORBIS"
        case OggOpus = "OGG_OPUS"
        case None = "NONE"
    }

    /**
     Download a user recording.
     
     - parameter recordingId: (path) User Recording ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserrecordingsRecordingIdMedia(recordingId recordingId: String, formatId: ININFormatId_getUserrecordingsRecordingIdMedia? = nil, completion: ((data: ININDownloadResponse?, error: ErrorType?) -> Void)) {
        getUserrecordingsRecordingIdMediaWithRequestBuilder(recordingId: recordingId, formatId: formatId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Download a user recording.
     - GET /api/v2/userrecordings/{recordingId}/media
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "contentLocationUri" : "aeiou",
  "imageUri" : "aeiou"
}}]
     
     - parameter recordingId: (path) User Recording ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)

     - returns: RequestBuilder<ININDownloadResponse> 
     */
    public class func getUserrecordingsRecordingIdMediaWithRequestBuilder(recordingId recordingId: String, formatId: ININFormatId_getUserrecordingsRecordingIdMedia? = nil) -> RequestBuilder<ININDownloadResponse> {
        var path = "/api/v2/userrecordings/{recordingId}/media"
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "formatId": formatId?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDownloadResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get user recording summary
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUserrecordingsSummary(completion: ((data: ININFaxSummary?, error: ErrorType?) -> Void)) {
        getUserrecordingsSummaryWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user recording summary
     - GET /api/v2/userrecordings/summary
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "unreadCount" : 123,
  "readCount" : 123,
  "totalCount" : 123
}}]

     - returns: RequestBuilder<ININFaxSummary> 
     */
    public class func getUserrecordingsSummaryWithRequestBuilder() -> RequestBuilder<ININFaxSummary> {
        let path = "/api/v2/userrecordings/summary"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININFaxSummary>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a user recording.
     
     - parameter recordingId: (path) User Recording ID 
     - parameter body: (body) UserRecording (optional)
     - parameter expand: (query) conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUserrecordingsRecordingId(recordingId recordingId: String, body: ININUserRecording? = nil, expand: String? = nil, completion: ((data: ININUserRecording?, error: ErrorType?) -> Void)) {
        putUserrecordingsRecordingIdWithRequestBuilder(recordingId: recordingId, body: body, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a user recording.
     - PUT /api/v2/userrecordings/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "workspace" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "read" : true,
  "selfUri" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "durationMilliseconds" : 123456789,
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "",
  "contentUri" : "aeiou",
  "name" : "aeiou",
  "contentLength" : 123456789,
  "id" : "aeiou",
  "thumbnails" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : "",
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  }
}}]
     
     - parameter recordingId: (path) User Recording ID 
     - parameter body: (body) UserRecording (optional)
     - parameter expand: (query) conversation (optional)

     - returns: RequestBuilder<ININUserRecording> 
     */
    public class func putUserrecordingsRecordingIdWithRequestBuilder(recordingId recordingId: String, body: ININUserRecording? = nil, expand: String? = nil) -> RequestBuilder<ININUserRecording> {
        var path = "/api/v2/userrecordings/{recordingId}"
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRecording>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
