//
// ININEvaluation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ININEvaluation: JSONEncodable {
    public enum ININStatus: String { 
        case Pending = "PENDING"
        case Inprogress = "INPROGRESS"
        case Finished = "FINISHED"
    }
    public enum ININResourceType: String { 
        case Email = "Email"
    }
    /** The globally unique identifier for the object. */
    public var id: String?
    public var name: String?
    public var conversation: ININConversation?
    /** Evaluation form used for evaluation. */
    public var evaluationForm: ININEvaluationForm?
    public var evaluator: ININUser?
    public var agent: ININUser?
    public var calibration: ININCalibration?
    public var status: ININStatus?
    public var answers: ININEvaluationScoringSet?
    public var agentHasRead: Bool?
    /** Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var releaseDate: NSDate?
    /** Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var assignedDate: NSDate?
    /** Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var changedDate: NSDate?
    public var queue: ININQueue?
    /** Signifies if the evaluation is never to be released. This cannot be set true if release date is also set. */
    public var neverRelease: Bool?
    /** Only used for email evaluations. Will be null for all other evaluations. */
    public var resourceId: String?
    /** The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources. */
    public var resourceType: ININResourceType?
    /** Is only true when the user making the request does not have sufficient permissions to see evaluation */
    public var redacted: Bool?
    public var isScoringIndex: Bool?
    /** The URI for this object */
    public var selfUri: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["name"] = self.name
        nillableDictionary["conversation"] = self.conversation?.encodeToJSON()
        nillableDictionary["evaluationForm"] = self.evaluationForm?.encodeToJSON()
        nillableDictionary["evaluator"] = self.evaluator?.encodeToJSON()
        nillableDictionary["agent"] = self.agent?.encodeToJSON()
        nillableDictionary["calibration"] = self.calibration?.encodeToJSON()
        nillableDictionary["status"] = self.status?.rawValue
        nillableDictionary["answers"] = self.answers?.encodeToJSON()
        nillableDictionary["agentHasRead"] = self.agentHasRead
        nillableDictionary["releaseDate"] = self.releaseDate?.encodeToJSON()
        nillableDictionary["assignedDate"] = self.assignedDate?.encodeToJSON()
        nillableDictionary["changedDate"] = self.changedDate?.encodeToJSON()
        nillableDictionary["queue"] = self.queue?.encodeToJSON()
        nillableDictionary["neverRelease"] = self.neverRelease
        nillableDictionary["resourceId"] = self.resourceId
        nillableDictionary["resourceType"] = self.resourceType?.rawValue
        nillableDictionary["redacted"] = self.redacted
        nillableDictionary["isScoringIndex"] = self.isScoringIndex
        nillableDictionary["selfUri"] = self.selfUri
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
