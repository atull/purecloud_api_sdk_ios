//
// ININAggregateMetricData.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ININAggregateMetricData: JSONEncodable {
    public enum ININMetric: String { 
        case Tsegmentduration = "tSegmentDuration"
        case Ototalcriticalscore = "oTotalCriticalScore"
        case Ototalscore = "oTotalScore"
        case Nevaluations = "nEvaluations"
        case Tabandon = "tAbandon"
        case Tivr = "tIvr"
        case Tanswered = "tAnswered"
        case Tacd = "tAcd"
        case Ttalk = "tTalk"
        case Theld = "tHeld"
        case Ttalkcomplete = "tTalkComplete"
        case Theldcomplete = "tHeldComplete"
        case Tacw = "tAcw"
        case Thandle = "tHandle"
        case Twait = "tWait"
        case Tagentroutingstatus = "tAgentRoutingStatus"
        case Torganizationpresence = "tOrganizationPresence"
        case Tsystempresence = "tSystemPresence"
        case Tuserresponsetime = "tUserResponseTime"
        case Tagentresponsetime = "tAgentResponseTime"
        case Noffered = "nOffered"
        case Noversla = "nOverSla"
        case Ntransferred = "nTransferred"
        case Noutboundattempted = "nOutboundAttempted"
        case Noutboundconnected = "nOutboundConnected"
        case Noutboundabandoned = "nOutboundAbandoned"
        case Nerror = "nError"
        case Oservicetarget = "oServiceTarget"
        case Oservicelevel = "oServiceLevel"
        case Tactive = "tActive"
        case Tinactive = "tInactive"
        case Oactiveusers = "oActiveUsers"
        case Omemberusers = "oMemberUsers"
        case Oactivequeues = "oActiveQueues"
        case Omemberqueues = "oMemberQueues"
        case Ointeracting = "oInteracting"
        case Owaiting = "oWaiting"
    }
    public var metric: ININMetric?
    public var qualifier: String?
    public var stats: ININStatisticalSummary?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["metric"] = self.metric?.rawValue
        nillableDictionary["qualifier"] = self.qualifier
        nillableDictionary["stats"] = self.stats?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
