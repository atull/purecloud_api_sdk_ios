//
// RecordingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class RecordingAPI: APIBase {
    /**
     Delete annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId conversationId: String, recordingId: String, annotationId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete annotation
     - DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId conversationId: String, recordingId: String, annotationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{annotationId}", withString: "\(annotationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
      deletes a single orphan recording
     
     - parameter orphanId: (path) Orphan ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteOrphanrecordingsOrphanId(orphanId orphanId: String, completion: ((data: ININOrphanRecording?, error: ErrorType?) -> Void)) {
        deleteOrphanrecordingsOrphanIdWithRequestBuilder(orphanId: orphanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
      deletes a single orphan recording
     - DELETE /api/v2/orphanrecordings/{orphanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "recoveredTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mediaSizeBytes" : 123456789,
  "createdTime" : "2000-01-23T04:56:07.000+0000",
  "recording" : {
    "actualTranscodeTimeMs" : 123456789,
    "maxAllowedRestorationsForOrg" : 123,
    "conversationId" : "aeiou",
    "emailTranscript" : [ {
      "cc" : [ "" ],
      "htmlBody" : "aeiou",
      "bcc" : [ "" ],
      "attachments" : [ {
        "contentPath" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "textBody" : "aeiou",
      "from" : "",
      "id" : "aeiou",
      "to" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "time" : "2000-01-23T04:56:07.000+0000"
    } ],
    "selfUri" : "aeiou",
    "annotations" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "location" : 123456789,
      "id" : "aeiou",
      "type" : "aeiou",
      "durationMs" : 123456789,
      "user" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      }
    } ],
    "archiveMedium" : "aeiou",
    "media" : "aeiou",
    "sessionId" : "aeiou",
    "path" : "aeiou",
    "transcript" : [ {
      "utc" : "aeiou",
      "chat" : "aeiou",
      "from" : "aeiou",
      "id" : "aeiou",
      "to" : "aeiou",
      "body" : "aeiou",
      "message" : "aeiou",
      "type" : "aeiou",
      "user" : {
        "images" : [ "" ],
        "displayName" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "username" : "aeiou"
      }
    } ],
    "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
    "fileState" : "aeiou",
    "archiveDate" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "estimatedTranscodeTimeMs" : 123456789,
    "startTime" : "aeiou",
    "id" : "aeiou",
    "endTime" : "aeiou",
    "remainingRestorationsAllowedForOrg" : 123,
    "mediaUris" : {
      "key" : {
        "mediaUri" : "aeiou",
        "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
      }
    },
    "deleteDate" : "2000-01-23T04:56:07.000+0000"
  },
  "mediaType" : "aeiou",
  "id" : "aeiou",
  "providerEndpoint" : {
    "schema" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "count" : 123,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "enabled" : true,
    "site" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "dids" : [ "aeiou" ],
    "properties" : {
      "key" : "{}"
    }
  },
  "providerType" : "aeiou"
}}]
     
     - parameter orphanId: (path) Orphan ID 

     - returns: RequestBuilder<ININOrphanRecording> 
     */
    public class func deleteOrphanrecordingsOrphanIdWithRequestBuilder(orphanId orphanId: String) -> RequestBuilder<ININOrphanRecording> {
        var path = "/api/v2/orphanrecordings/{orphanId}"
        path = path.stringByReplacingOccurrencesOfString("{orphanId}", withString: "\(orphanId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrphanRecording>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete media retention policies
     
     - parameter ids: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRecordingMediaretentionpolicies(ids ids: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRecordingMediaretentionpoliciesWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete media retention policies
     - DELETE /api/v2/recording/mediaretentionpolicies
     - Bulk delete of media retention policies, this will only delete the polices that match the ids specified in the query param.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter ids: (query)  

     - returns: RequestBuilder<String> 
     */
    public class func deleteRecordingMediaretentionpoliciesWithRequestBuilder(ids ids: String) -> RequestBuilder<String> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ids": ids
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRecordingMediaretentionpoliciesPolicyId(policyId policyId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId: policyId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a media retention policy
     - DELETE /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId policyId: String) -> RequestBuilder<String> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        path = path.stringByReplacingOccurrencesOfString("{policyId}", withString: "\(policyId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

    enum for parameter formatId
    */
    public enum ININFormatId_getConversationsConversationIdRecordings: String { 
        case Wav = "WAV"
        case Webm = "WEBM"
        case WavUlaw = "WAV_ULAW"
        case OggVorbis = "OGG_VORBIS"
        case OggOpus = "OGG_OPUS"
        case None = "NONE"
    }

    /**
     Get all of a Conversation's Recordings.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter maxWaitMs: (query) The maximum number of milliseconds to wait for the recording to be ready. (optional, default to 5000)
     - parameter formatId: (query) The desired media format (optional, default to WEBM)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdRecordings(conversationId conversationId: String, maxWaitMs: Int32? = nil, formatId: ININFormatId_getConversationsConversationIdRecordings? = nil, completion: ((data: [ININRecording]?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdRecordingsWithRequestBuilder(conversationId: conversationId, maxWaitMs: maxWaitMs, formatId: formatId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all of a Conversation's Recordings.
     - GET /api/v2/conversations/{conversationId}/recordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example=[ {
  "actualTranscodeTimeMs" : 123456789,
  "maxAllowedRestorationsForOrg" : 123,
  "conversationId" : "aeiou",
  "emailTranscript" : [ {
    "cc" : [ "" ],
    "htmlBody" : "aeiou",
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentPath" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "subject" : "aeiou",
    "textBody" : "aeiou",
    "from" : "",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "selfUri" : "aeiou",
  "annotations" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "location" : 123456789,
    "id" : "aeiou",
    "type" : "aeiou",
    "durationMs" : 123456789,
    "user" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    }
  } ],
  "archiveMedium" : "aeiou",
  "media" : "aeiou",
  "sessionId" : "aeiou",
  "path" : "aeiou",
  "transcript" : [ {
    "utc" : "aeiou",
    "chat" : "aeiou",
    "from" : "aeiou",
    "id" : "aeiou",
    "to" : "aeiou",
    "body" : "aeiou",
    "message" : "aeiou",
    "type" : "aeiou",
    "user" : {
      "images" : [ "" ],
      "displayName" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "username" : "aeiou"
    }
  } ],
  "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "archiveDate" : "2000-01-23T04:56:07.000+0000",
  "name" : "aeiou",
  "estimatedTranscodeTimeMs" : 123456789,
  "startTime" : "aeiou",
  "id" : "aeiou",
  "endTime" : "aeiou",
  "remainingRestorationsAllowedForOrg" : 123,
  "mediaUris" : {
    "key" : {
      "mediaUri" : "aeiou",
      "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
    }
  },
  "deleteDate" : "2000-01-23T04:56:07.000+0000"
} ]}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter maxWaitMs: (query) The maximum number of milliseconds to wait for the recording to be ready. (optional, default to 5000)
     - parameter formatId: (query) The desired media format (optional, default to WEBM)

     - returns: RequestBuilder<[ININRecording]> 
     */
    public class func getConversationsConversationIdRecordingsWithRequestBuilder(conversationId conversationId: String, maxWaitMs: Int32? = nil, formatId: ININFormatId_getConversationsConversationIdRecordings? = nil) -> RequestBuilder<[ININRecording]> {
        var path = "/api/v2/conversations/{conversationId}/recordings"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "maxWaitMs": maxWaitMs?.encodeToJSON(),
            "formatId": formatId?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ININRecording]>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

    enum for parameter formatId
    */
    public enum ININFormatId_getConversationsConversationIdRecordingsRecordingId: String { 
        case Wav = "WAV"
        case Webm = "WEBM"
        case WavUlaw = "WAV_ULAW"
        case OggVorbis = "OGG_VORBIS"
        case OggOpus = "OGG_OPUS"
        case None = "NONE"
    }

    /**
     Gets a specific recording.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)
     - parameter download: (query) requesting a download format of the recording (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdRecordingsRecordingId(conversationId conversationId: String, recordingId: String, formatId: ININFormatId_getConversationsConversationIdRecordingsRecordingId? = nil, download: Bool? = nil, fileName: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        getConversationsConversationIdRecordingsRecordingIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, formatId: formatId, download: download, fileName: fileName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets a specific recording.
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter formatId: (query) The desired media format. (optional, default to WEBM)
     - parameter download: (query) requesting a download format of the recording (optional, default to false)
     - parameter fileName: (query) the name of the downloaded fileName (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getConversationsConversationIdRecordingsRecordingIdWithRequestBuilder(conversationId conversationId: String, recordingId: String, formatId: ININFormatId_getConversationsConversationIdRecordingsRecordingId? = nil, download: Bool? = nil, fileName: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "formatId": formatId?.rawValue,
            "download": download,
            "fileName": fileName
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get annotations for recording
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdRecordingsRecordingIdAnnotations(conversationId conversationId: String, recordingId: String, completion: ((data: [ININAnnotation]?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdRecordingsRecordingIdAnnotationsWithRequestBuilder(conversationId: conversationId, recordingId: recordingId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get annotations for recording
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example=[ {
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  }
} ]}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 

     - returns: RequestBuilder<[ININAnnotation]> 
     */
    public class func getConversationsConversationIdRecordingsRecordingIdAnnotationsWithRequestBuilder(conversationId conversationId: String, recordingId: String) -> RequestBuilder<[ININAnnotation]> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ININAnnotation]>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId conversationId: String, recordingId: String, annotationId: String, completion: ((data: ININAnnotation?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get annotation
     - GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  }
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 

     - returns: RequestBuilder<ININAnnotation> 
     */
    public class func getConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId conversationId: String, recordingId: String, annotationId: String) -> RequestBuilder<ININAnnotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{annotationId}", withString: "\(annotationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAnnotation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets all orphan recordings
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrphanrecordings(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, completion: ((data: ININOrphanRecordingListing?, error: ErrorType?) -> Void)) {
        getOrphanrecordingsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets all orphan recordings
     - GET /api/v2/orphanrecordings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "recoveredTime" : "2000-01-23T04:56:07.000+0000",
    "fileState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "mediaSizeBytes" : 123456789,
    "createdTime" : "2000-01-23T04:56:07.000+0000",
    "recording" : {
      "actualTranscodeTimeMs" : 123456789,
      "maxAllowedRestorationsForOrg" : 123,
      "conversationId" : "aeiou",
      "emailTranscript" : [ {
        "cc" : [ "" ],
        "htmlBody" : "aeiou",
        "bcc" : [ "" ],
        "attachments" : [ {
          "contentPath" : "aeiou",
          "name" : "aeiou",
          "contentLength" : 123,
          "attachmentId" : "aeiou",
          "contentType" : "aeiou"
        } ],
        "subject" : "aeiou",
        "textBody" : "aeiou",
        "from" : "",
        "id" : "aeiou",
        "to" : [ {
          "name" : "aeiou",
          "email" : "aeiou"
        } ],
        "time" : "2000-01-23T04:56:07.000+0000"
      } ],
      "selfUri" : "aeiou",
      "annotations" : [ {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "location" : 123456789,
        "id" : "aeiou",
        "type" : "aeiou",
        "durationMs" : 123456789,
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        }
      } ],
      "archiveMedium" : "aeiou",
      "media" : "aeiou",
      "sessionId" : "aeiou",
      "path" : "aeiou",
      "transcript" : [ {
        "utc" : "aeiou",
        "chat" : "aeiou",
        "from" : "aeiou",
        "id" : "aeiou",
        "to" : "aeiou",
        "body" : "aeiou",
        "message" : "aeiou",
        "type" : "aeiou",
        "user" : {
          "images" : [ "" ],
          "displayName" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "username" : "aeiou"
        }
      } ],
      "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
      "fileState" : "aeiou",
      "archiveDate" : "2000-01-23T04:56:07.000+0000",
      "name" : "aeiou",
      "estimatedTranscodeTimeMs" : 123456789,
      "startTime" : "aeiou",
      "id" : "aeiou",
      "endTime" : "aeiou",
      "remainingRestorationsAllowedForOrg" : 123,
      "mediaUris" : {
        "key" : {
          "mediaUri" : "aeiou",
          "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
        }
      },
      "deleteDate" : "2000-01-23T04:56:07.000+0000"
    },
    "mediaType" : "aeiou",
    "id" : "aeiou",
    "providerEndpoint" : {
      "schema" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "selfUri" : "aeiou",
      "count" : 123,
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "createdByApp" : "aeiou",
      "version" : 123,
      "enabled" : true,
      "site" : "",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "aeiou",
      "name" : "aeiou",
      "modifiedByApp" : "aeiou",
      "modifiedBy" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou",
      "dids" : [ "aeiou" ],
      "properties" : {
        "key" : "{}"
      }
    },
    "providerType" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)

     - returns: RequestBuilder<ININOrphanRecordingListing> 
     */
    public class func getOrphanrecordingsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil) -> RequestBuilder<ININOrphanRecordingListing> {
        let path = "/api/v2/orphanrecordings"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrphanRecordingListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets a single orphan recording
     
     - parameter orphanId: (path) Orphan ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOrphanrecordingsOrphanId(orphanId orphanId: String, completion: ((data: ININOrphanRecording?, error: ErrorType?) -> Void)) {
        getOrphanrecordingsOrphanIdWithRequestBuilder(orphanId: orphanId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets a single orphan recording
     - GET /api/v2/orphanrecordings/{orphanId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "recoveredTime" : "2000-01-23T04:56:07.000+0000",
  "fileState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mediaSizeBytes" : 123456789,
  "createdTime" : "2000-01-23T04:56:07.000+0000",
  "recording" : {
    "actualTranscodeTimeMs" : 123456789,
    "maxAllowedRestorationsForOrg" : 123,
    "conversationId" : "aeiou",
    "emailTranscript" : [ {
      "cc" : [ "" ],
      "htmlBody" : "aeiou",
      "bcc" : [ "" ],
      "attachments" : [ {
        "contentPath" : "aeiou",
        "name" : "aeiou",
        "contentLength" : 123,
        "attachmentId" : "aeiou",
        "contentType" : "aeiou"
      } ],
      "subject" : "aeiou",
      "textBody" : "aeiou",
      "from" : "",
      "id" : "aeiou",
      "to" : [ {
        "name" : "aeiou",
        "email" : "aeiou"
      } ],
      "time" : "2000-01-23T04:56:07.000+0000"
    } ],
    "selfUri" : "aeiou",
    "annotations" : [ {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "location" : 123456789,
      "id" : "aeiou",
      "type" : "aeiou",
      "durationMs" : 123456789,
      "user" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      }
    } ],
    "archiveMedium" : "aeiou",
    "media" : "aeiou",
    "sessionId" : "aeiou",
    "path" : "aeiou",
    "transcript" : [ {
      "utc" : "aeiou",
      "chat" : "aeiou",
      "from" : "aeiou",
      "id" : "aeiou",
      "to" : "aeiou",
      "body" : "aeiou",
      "message" : "aeiou",
      "type" : "aeiou",
      "user" : {
        "images" : [ "" ],
        "displayName" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "username" : "aeiou"
      }
    } ],
    "restoreExpirationTime" : "2000-01-23T04:56:07.000+0000",
    "fileState" : "aeiou",
    "archiveDate" : "2000-01-23T04:56:07.000+0000",
    "name" : "aeiou",
    "estimatedTranscodeTimeMs" : 123456789,
    "startTime" : "aeiou",
    "id" : "aeiou",
    "endTime" : "aeiou",
    "remainingRestorationsAllowedForOrg" : 123,
    "mediaUris" : {
      "key" : {
        "mediaUri" : "aeiou",
        "waveformData" : [ 1.3579000000000001069366817318950779736042022705078125 ]
      }
    },
    "deleteDate" : "2000-01-23T04:56:07.000+0000"
  },
  "mediaType" : "aeiou",
  "id" : "aeiou",
  "providerEndpoint" : {
    "schema" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "selfUri" : "aeiou",
    "count" : 123,
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "enabled" : true,
    "site" : "",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "dids" : [ "aeiou" ],
    "properties" : {
      "key" : "{}"
    }
  },
  "providerType" : "aeiou"
}}]
     
     - parameter orphanId: (path) Orphan ID 

     - returns: RequestBuilder<ININOrphanRecording> 
     */
    public class func getOrphanrecordingsOrphanIdWithRequestBuilder(orphanId orphanId: String) -> RequestBuilder<ININOrphanRecording> {
        var path = "/api/v2/orphanrecordings/{orphanId}"
        path = path.stringByReplacingOccurrencesOfString("{orphanId}", withString: "\(orphanId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrphanRecording>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets media retention policy list with query options to filter on name and enabled.
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled &#x3D; true or enabled &#x3D; false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRecordingMediaretentionpolicies(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil, completion: ((data: ININPolicyEntityListing?, error: ErrorType?) -> Void)) {
        getRecordingMediaretentionpoliciesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name, enabled: enabled, summary: summary, hasErrors: hasErrors).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets media retention policy list with query options to filter on name and enabled.
     - GET /api/v2/recording/mediaretentionpolicies
     - for a less verbose response, add summary=true to this endpoint
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "mediaPolicies" : {
      "chatPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "duration" : "",
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "emailPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ "" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : "",
          "forQueues" : [ "" ]
        },
        "actions" : ""
      },
      "callPolicy" : {
        "conditions" : {
          "wrapupCodes" : [ {
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "aeiou",
            "id" : "aeiou"
          } ],
          "duration" : {
            "durationTarget" : "aeiou",
            "durationOperator" : "aeiou",
            "durationRange" : "aeiou"
          },
          "directions" : [ "aeiou" ],
          "dateRanges" : [ "aeiou" ],
          "forUsers" : [ "" ],
          "timeAllowed" : {
            "timeZoneId" : "aeiou",
            "timeSlots" : [ {
              "startTime" : "aeiou",
              "stopTime" : "aeiou",
              "day" : 123
            } ],
            "empty" : true
          },
          "forQueues" : [ {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          } ]
        },
        "actions" : {
          "assignCalibrations" : [ {
            "calibrator" : "",
            "expertEvaluator" : "",
            "evaluators" : [ "" ],
            "evaluationForm" : ""
          } ],
          "initiateScreenRecording" : {
            "archiveRetention" : "",
            "recordACW" : true,
            "deleteRetention" : ""
          },
          "retainRecording" : true,
          "assignMeteredEvaluations" : [ {
            "assignToActiveUser" : true,
            "evaluators" : [ "" ],
            "timeInterval" : {
              "hours" : 123,
              "days" : 123
            },
            "evaluationContextId" : "aeiou",
            "maxNumberEvaluations" : 123,
            "evaluationForm" : ""
          } ],
          "retentionDuration" : {
            "archiveRetention" : {
              "storageMedium" : "aeiou",
              "days" : 123
            },
            "deleteRetention" : {
              "days" : 123
            }
          },
          "alwaysDelete" : true,
          "deleteRecording" : true,
          "assignEvaluations" : [ {
            "user" : {
              "addresses" : [ "" ],
              "images" : [ {
                "imageUri" : "aeiou",
                "resolution" : "aeiou"
              } ],
              "selfUri" : "aeiou",
              "conversationSummary" : {
                "call" : {
                  "enterprise" : "",
                  "contactCenter" : {
                    "acw" : 123,
                    "active" : 123
                  }
                },
                "socialExpression" : "",
                "chat" : "",
                "callback" : "",
                "video" : "",
                "userId" : "aeiou",
                "email" : ""
              },
              "primaryContactInfo" : [ {
                "address" : "aeiou",
                "display" : "aeiou",
                "mediaType" : "aeiou",
                "type" : "aeiou"
              } ],
              "routingStatus" : {
                "startTime" : "2000-01-23T04:56:07.000+0000",
                "userId" : "aeiou",
                "status" : "aeiou"
              },
              "title" : "aeiou",
              "version" : 123,
              "outOfOffice" : {
                "endDate" : "2000-01-23T04:56:07.000+0000",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "active" : true,
                "id" : "aeiou",
                "user" : "",
                "startDate" : "2000-01-23T04:56:07.000+0000"
              },
              "authorization" : {
                "permissions" : [ "aeiou" ],
                "permissionPolicies" : [ {
                  "policyDescription" : "aeiou",
                  "resourceConditionNode" : {
                    "operands" : [ {
                      "type" : "aeiou",
                      "value" : "aeiou"
                    } ],
                    "variableName" : "aeiou",
                    "conjunction" : "aeiou",
                    "terms" : [ "" ],
                    "operator" : "aeiou"
                  },
                  "actionSetKey" : "aeiou",
                  "namedResources" : [ "aeiou" ],
                  "policyName" : "aeiou",
                  "entityName" : "aeiou",
                  "domain" : "aeiou",
                  "id" : "aeiou",
                  "resourceCondition" : "aeiou",
                  "actionSet" : [ "aeiou" ]
                } ],
                "roles" : [ {
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              },
              "chat" : {
                "jabberId" : "aeiou"
              },
              "name" : "aeiou",
              "station" : {
                "defaultStation" : "",
                "lastAssociatedStation" : "",
                "associatedStation" : {
                  "associatedDate" : "2000-01-23T04:56:07.000+0000",
                  "defaultUser" : "",
                  "id" : "aeiou",
                  "associatedUser" : "",
                  "providerInfo" : {
                    "key" : "aeiou"
                  }
                },
                "effectiveStation" : ""
              },
              "id" : "aeiou",
              "state" : "aeiou",
              "department" : "aeiou",
              "presence" : {
                "presenceDefinition" : {
                  "createdDate" : "2000-01-23T04:56:07.000+0000",
                  "createdBy" : "",
                  "languageLabels" : {
                    "key" : "aeiou"
                  },
                  "systemPresence" : "aeiou",
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                  "modifiedBy" : "",
                  "id" : "aeiou",
                  "deactivated" : true,
                  "primary" : true
                },
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "id" : "aeiou",
                "source" : "aeiou",
                "message" : "aeiou",
                "primary" : true
              },
              "email" : "aeiou",
              "username" : "aeiou",
              "geolocation" : {
                "country" : "aeiou",
                "city" : "aeiou",
                "latitude" : 1.3579000000000001069366817318950779736042022705078125,
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou",
                "type" : "aeiou",
                "region" : "aeiou",
                "primary" : true,
                "longitude" : 1.3579000000000001069366817318950779736042022705078125
              }
            },
            "evaluationForm" : {
              "publishedVersions" : {
                "total" : 123456789,
                "pageCount" : 123,
                "pageNumber" : 123,
                "entities" : [ "" ],
                "firstUri" : "aeiou",
                "selfUri" : "aeiou",
                "lastUri" : "aeiou",
                "pageSize" : 123,
                "previousUri" : "aeiou",
                "nextUri" : "aeiou"
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "contextId" : "aeiou",
              "id" : "aeiou",
              "published" : true,
              "type" : "aeiou",
              "questionGroups" : [ {
                "defaultAnswersToHighest" : true,
                "manualWeight" : true,
                "name" : "aeiou",
                "questions" : [ {
                  "key" : "{}"
                } ],
                "weight" : 1.3579000000000001069366817318950779736042022705078125,
                "id" : "aeiou",
                "defaultAnswersToNA" : true,
                "type" : "aeiou",
                "naEnabled" : true
              } ]
            }
          } ]
        }
      }
    },
    "policyErrors" : {
      "policyErrorMessages" : [ {
        "userMessage" : "{}",
        "insertDate" : "2000-01-23T04:56:07.000+0000",
        "errorCode" : "aeiou",
        "correlationId" : "aeiou",
        "userParams" : [ {
          "value" : "aeiou",
          "key" : "aeiou"
        } ],
        "statusCode" : 123,
        "userParamsMessage" : "aeiou"
      } ]
    },
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "description" : "aeiou",
    "id" : "aeiou",
    "conditions" : {
      "duration" : "",
      "wrapupCodes" : [ "" ],
      "mediaTypes" : [ "aeiou" ],
      "directions" : [ "aeiou" ],
      "dateRanges" : [ "aeiou" ],
      "forUsers" : [ "" ],
      "timeAllowed" : "",
      "forQueues" : [ "" ]
    },
    "actions" : "",
    "enabled" : true,
    "order" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the policy name - used for filtering results in searches. (optional)
     - parameter enabled: (query) checks to see if policy is enabled - use enabled &#x3D; true or enabled &#x3D; false (optional)
     - parameter summary: (query) provides a less verbose response of policy lists. (optional, default to false)
     - parameter hasErrors: (query) provides a way to fetch all policies with errors or policies that do not have errors (optional)

     - returns: RequestBuilder<ININPolicyEntityListing> 
     */
    public class func getRecordingMediaretentionpoliciesWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, enabled: Bool? = nil, summary: Bool? = nil, hasErrors: Bool? = nil) -> RequestBuilder<ININPolicyEntityListing> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "name": name,
            "enabled": enabled,
            "summary": summary,
            "hasErrors": hasErrors
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPolicyEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRecordingMediaretentionpoliciesPolicyId(policyId policyId: String, completion: ((data: ININPolicy?, error: ErrorType?) -> Void)) {
        getRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId: policyId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a media retention policy
     - GET /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationRange" : "aeiou"
        },
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ]
      },
      "actions" : {
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ]
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 

     - returns: RequestBuilder<ININPolicy> 
     */
    public class func getRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId policyId: String) -> RequestBuilder<ININPolicy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        path = path.stringByReplacingOccurrencesOfString("{policyId}", withString: "\(policyId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPolicy>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the Recording Settings for the Organization
     
     - parameter createDefault: (query) If no settings are found, a new one is created with default values (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRecordingSettings(createDefault createDefault: Bool? = nil, completion: ((data: ININRecordingSettings?, error: ErrorType?) -> Void)) {
        getRecordingSettingsWithRequestBuilder(createDefault: createDefault).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the Recording Settings for the Organization
     - GET /api/v2/recording/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "maxSimultaneousStreams" : 123
}}]
     
     - parameter createDefault: (query) If no settings are found, a new one is created with default values (optional, default to false)

     - returns: RequestBuilder<ININRecordingSettings> 
     */
    public class func getRecordingSettingsWithRequestBuilder(createDefault createDefault: Bool? = nil) -> RequestBuilder<ININRecordingSettings> {
        let path = "/api/v2/recording/settings"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "createDefault": createDefault
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRecordingSettings>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Patch a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchRecordingMediaretentionpoliciesPolicyId(policyId policyId: String, body: ININPolicy? = nil, completion: ((data: ININPolicy?, error: ErrorType?) -> Void)) {
        patchRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId: policyId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch a media retention policy
     - PATCH /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationRange" : "aeiou"
        },
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ]
      },
      "actions" : {
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ]
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy (optional)

     - returns: RequestBuilder<ININPolicy> 
     */
    public class func patchRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId policyId: String, body: ININPolicy? = nil) -> RequestBuilder<ININPolicy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        path = path.stringByReplacingOccurrencesOfString("{policyId}", withString: "\(policyId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPolicy>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) annotation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsConversationIdRecordingsRecordingIdAnnotations(conversationId conversationId: String, recordingId: String, body: ININAnnotation? = nil, completion: ((data: ININAnnotation?, error: ErrorType?) -> Void)) {
        postConversationsConversationIdRecordingsRecordingIdAnnotationsWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create annotation
     - POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  }
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) annotation (optional)

     - returns: RequestBuilder<ININAnnotation> 
     */
    public class func postConversationsConversationIdRecordingsRecordingIdAnnotationsWithRequestBuilder(conversationId conversationId: String, recordingId: String, body: ININAnnotation? = nil) -> RequestBuilder<ININAnnotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAnnotation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create media retention policy
     
     - parameter body: (body) Policy (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRecordingMediaretentionpolicies(body body: ININPolicy? = nil, completion: ((data: ININPolicy?, error: ErrorType?) -> Void)) {
        postRecordingMediaretentionpoliciesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create media retention policy
     - POST /api/v2/recording/mediaretentionpolicies
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationRange" : "aeiou"
        },
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ]
      },
      "actions" : {
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ]
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter body: (body) Policy (optional)

     - returns: RequestBuilder<ININPolicy> 
     */
    public class func postRecordingMediaretentionpoliciesWithRequestBuilder(body body: ININPolicy? = nil) -> RequestBuilder<ININPolicy> {
        let path = "/api/v2/recording/mediaretentionpolicies"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPolicy>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates the retention records on a recording.
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) recording 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putConversationsConversationIdRecordingsRecordingId(conversationId conversationId: String, recordingId: String, body: ININRecording, completion: ((error: ErrorType?) -> Void)) {
        putConversationsConversationIdRecordingsRecordingIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates the retention records on a recording.
     - PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}
     - Currently supports updating and removing both archive and delete dates for eligible recordings. A request to change the archival date of an archived recording will result in a restoration of the recording until the new date set. Use of the query parameter 'restoreDays' is deprecated and will be removed in the next major version release. If 'restoreDays' is provided, no attempt at updating other retention data will be made. To migrate to the new usage, issuing a request with restoreDays=10 would instead set the archiveDate's time stamp in the PUT body to 10 days in the future.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter body: (body) recording 

     - returns: RequestBuilder<Void> 
     */
    public class func putConversationsConversationIdRecordingsRecordingIdWithRequestBuilder(conversationId conversationId: String, recordingId: String, body: ININRecording) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update annotation
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter body: (body) annotation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId conversationId: String, recordingId: String, annotationId: String, body: ININAnnotation? = nil, completion: ((data: ININAnnotation?, error: ErrorType?) -> Void)) {
        putConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId: conversationId, recordingId: recordingId, annotationId: annotationId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update annotation
     - PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "location" : 123456789,
  "id" : "aeiou",
  "type" : "aeiou",
  "durationMs" : 123456789,
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  }
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter recordingId: (path) Recording ID 
     - parameter annotationId: (path) Annotation ID 
     - parameter body: (body) annotation (optional)

     - returns: RequestBuilder<ININAnnotation> 
     */
    public class func putConversationsConversationIdRecordingsRecordingIdAnnotationsAnnotationIdWithRequestBuilder(conversationId conversationId: String, recordingId: String, annotationId: String, body: ININAnnotation? = nil) -> RequestBuilder<ININAnnotation> {
        var path = "/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{recordingId}", withString: "\(recordingId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{annotationId}", withString: "\(annotationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAnnotation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a media retention policy
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRecordingMediaretentionpoliciesPolicyId(policyId policyId: String, body: ININPolicy? = nil, completion: ((data: ININPolicy?, error: ErrorType?) -> Void)) {
        putRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId: policyId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a media retention policy
     - PUT /api/v2/recording/mediaretentionpolicies/{policyId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "mediaPolicies" : {
    "chatPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "duration" : "",
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "emailPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ "" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : "",
        "forQueues" : [ "" ]
      },
      "actions" : ""
    },
    "callPolicy" : {
      "conditions" : {
        "wrapupCodes" : [ {
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "aeiou",
          "id" : "aeiou"
        } ],
        "duration" : {
          "durationTarget" : "aeiou",
          "durationOperator" : "aeiou",
          "durationRange" : "aeiou"
        },
        "directions" : [ "aeiou" ],
        "dateRanges" : [ "aeiou" ],
        "forUsers" : [ "" ],
        "timeAllowed" : {
          "timeZoneId" : "aeiou",
          "timeSlots" : [ {
            "startTime" : "aeiou",
            "stopTime" : "aeiou",
            "day" : 123
          } ],
          "empty" : true
        },
        "forQueues" : [ {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        } ]
      },
      "actions" : {
        "assignCalibrations" : [ {
          "calibrator" : "",
          "expertEvaluator" : "",
          "evaluators" : [ "" ],
          "evaluationForm" : ""
        } ],
        "initiateScreenRecording" : {
          "archiveRetention" : "",
          "recordACW" : true,
          "deleteRetention" : ""
        },
        "retainRecording" : true,
        "assignMeteredEvaluations" : [ {
          "assignToActiveUser" : true,
          "evaluators" : [ "" ],
          "timeInterval" : {
            "hours" : 123,
            "days" : 123
          },
          "evaluationContextId" : "aeiou",
          "maxNumberEvaluations" : 123,
          "evaluationForm" : ""
        } ],
        "retentionDuration" : {
          "archiveRetention" : {
            "storageMedium" : "aeiou",
            "days" : 123
          },
          "deleteRetention" : {
            "days" : 123
          }
        },
        "alwaysDelete" : true,
        "deleteRecording" : true,
        "assignEvaluations" : [ {
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          }
        } ]
      }
    }
  },
  "policyErrors" : {
    "policyErrorMessages" : [ {
      "userMessage" : "{}",
      "insertDate" : "2000-01-23T04:56:07.000+0000",
      "errorCode" : "aeiou",
      "correlationId" : "aeiou",
      "userParams" : [ {
        "value" : "aeiou",
        "key" : "aeiou"
      } ],
      "statusCode" : 123,
      "userParamsMessage" : "aeiou"
    } ]
  },
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "description" : "aeiou",
  "id" : "aeiou",
  "conditions" : {
    "duration" : "",
    "wrapupCodes" : [ "" ],
    "mediaTypes" : [ "aeiou" ],
    "directions" : [ "aeiou" ],
    "dateRanges" : [ "aeiou" ],
    "forUsers" : [ "" ],
    "timeAllowed" : "",
    "forQueues" : [ "" ]
  },
  "actions" : "",
  "enabled" : true,
  "order" : 123
}}]
     
     - parameter policyId: (path) Policy ID 
     - parameter body: (body) Policy (optional)

     - returns: RequestBuilder<ININPolicy> 
     */
    public class func putRecordingMediaretentionpoliciesPolicyIdWithRequestBuilder(policyId policyId: String, body: ININPolicy? = nil) -> RequestBuilder<ININPolicy> {
        var path = "/api/v2/recording/mediaretentionpolicies/{policyId}"
        path = path.stringByReplacingOccurrencesOfString("{policyId}", withString: "\(policyId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPolicy>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the Recording Settings for the Organization
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRecordingSettings(body body: ININRecordingSettings? = nil, completion: ((data: ININRecordingSettings?, error: ErrorType?) -> Void)) {
        putRecordingSettingsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update the Recording Settings for the Organization
     - PUT /api/v2/recording/settings
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "maxSimultaneousStreams" : 123
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININRecordingSettings> 
     */
    public class func putRecordingSettingsWithRequestBuilder(body body: ININRecordingSettings? = nil) -> RequestBuilder<ININRecordingSettings> {
        let path = "/api/v2/recording/settings"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRecordingSettings>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
