//
// ININTwitterExpression.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ININTwitterExpression: JSONEncodable {
    /** The globally unique identifier for the object. */
    public var id: String?
    public var name: String?
    /** Creation date for the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var dateCreated: NSDate?
    /** Date the entity was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var dateModified: NSDate?
    /** True once the expression has been dispositioned by an agent through the ACD process */
    public var isDispositioned: Bool?
    /** Indicates if a user/agent found this expression to be undesirable */
    public var isNoise: Bool?
    /** The Gistener that generated this expression */
    public var gistener: ININGistener?
    /** Twitter: the tweet&#39;s unique id */
    public var tweetId: String?
    /** Twitter: the tweets full text */
    public var text: String?
    /** Twitter: the date the tweet was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var tweetCreated: NSDate?
    /** Twitter: indicates this tweet as a reply to another tweet */
    public var isReply: Bool?
    /** Twitter: indicates this tweet as a &#39;retweet&#39; of another tweet */
    public var isRetweet: Bool?
    /** Twitter: when the expression is a retweet, this is Twitter&#39;s id of the original tweet */
    public var retweetParentId: String?
    /** Twitter: the number of times the parent tweet was retweeted - at the time this expression was created */
    public var retweetCount: Int32?
    /** Twitter: indicates this expression as a quoted tweet (a tweet with an addendum as the primary text) */
    public var isQuotedTweet: Bool?
    /** Twitter: when the expression is a quoted tweet, this is Twitter&#39;s id of the original tweet (may not be immediately functional) */
    public var quotedParentId: String?
    /** Twitter: the expressing user&#39;s Twitter id */
    public var userId: String?
    /** Twitter: the user&#39;s account name for the core service */
    public var userName: String?
    /** Twitter: the user&#39;s custom &#39;branding&#39; name (allowed to change over time) */
    public var userScreenName: String?
    /** Twitter: the number of times this user has tweeted (includes all forms of expression replies/quotes/retweets) */
    public var userTweetCount: Int32?
    /** Twitter: the number of followers this user has at the time of this expression */
    public var userFollowersCount: Int32?
    /** The Group Tags applied by the generating Gistener */
    public var groupTags: [ININGroupTag]?
    public var routed: Bool?
    /** The URI for this object */
    public var selfUri: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["name"] = self.name
        nillableDictionary["dateCreated"] = self.dateCreated?.encodeToJSON()
        nillableDictionary["dateModified"] = self.dateModified?.encodeToJSON()
        nillableDictionary["isDispositioned"] = self.isDispositioned
        nillableDictionary["isNoise"] = self.isNoise
        nillableDictionary["gistener"] = self.gistener?.encodeToJSON()
        nillableDictionary["tweetId"] = self.tweetId
        nillableDictionary["text"] = self.text
        nillableDictionary["tweetCreated"] = self.tweetCreated?.encodeToJSON()
        nillableDictionary["isReply"] = self.isReply
        nillableDictionary["isRetweet"] = self.isRetweet
        nillableDictionary["retweetParentId"] = self.retweetParentId
        nillableDictionary["retweetCount"] = self.retweetCount?.encodeToJSON()
        nillableDictionary["isQuotedTweet"] = self.isQuotedTweet
        nillableDictionary["quotedParentId"] = self.quotedParentId
        nillableDictionary["userId"] = self.userId
        nillableDictionary["userName"] = self.userName
        nillableDictionary["userScreenName"] = self.userScreenName
        nillableDictionary["userTweetCount"] = self.userTweetCount?.encodeToJSON()
        nillableDictionary["userFollowersCount"] = self.userFollowersCount?.encodeToJSON()
        nillableDictionary["groupTags"] = self.groupTags?.encodeToJSON()
        nillableDictionary["routed"] = self.routed
        nillableDictionary["selfUri"] = self.selfUri
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
