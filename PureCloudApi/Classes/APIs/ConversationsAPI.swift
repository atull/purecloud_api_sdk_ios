//
// ConversationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConversationsAPI: APIBase {
    /**
     Cancel the transfer
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConversationsCallsCallIdParticipantsParticipantIdConsult(callId callId: String, participantId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId: callId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Cancel the transfer
     - DELETE /api/v2/conversations/calls/{callId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter callId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<String> 
     */
    public class func deleteConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId callId: String, participantId: String) -> RequestBuilder<String> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/consult"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a code used to add a communication to this participant
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter addCommunicationCode: (path) addCommunicationCode 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConversationsConversationIdParticipantsParticipantIdCodesAddcommunicationcode(conversationId conversationId: String, participantId: String, addCommunicationCode: String, completion: ((error: ErrorType?) -> Void)) {
        deleteConversationsConversationIdParticipantsParticipantIdCodesAddcommunicationcodeWithRequestBuilder(conversationId: conversationId, participantId: participantId, addCommunicationCode: addCommunicationCode).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a code used to add a communication to this participant
     - DELETE /api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter addCommunicationCode: (path) addCommunicationCode 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteConversationsConversationIdParticipantsParticipantIdCodesAddcommunicationcodeWithRequestBuilder(conversationId conversationId: String, participantId: String, addCommunicationCode: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{addCommunicationCode}", withString: "\(addCommunicationCode)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete attachment from draft
     
     - parameter emailId: (path)  
     - parameter attachmentId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConversationsEmailsEmailIdMessagesDraftAttachmentsAttachmentId(emailId emailId: String, attachmentId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteConversationsEmailsEmailIdMessagesDraftAttachmentsAttachmentIdWithRequestBuilder(emailId: emailId, attachmentId: attachmentId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete attachment from draft
     - DELETE /api/v2/conversations/emails/{emailId}/messages/draft/attachments/{attachmentId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter emailId: (path)  
     - parameter attachmentId: (path)  

     - returns: RequestBuilder<String> 
     */
    public class func deleteConversationsEmailsEmailIdMessagesDraftAttachmentsAttachmentIdWithRequestBuilder(emailId emailId: String, attachmentId: String) -> RequestBuilder<String> {
        var path = "/api/v2/conversations/emails/{emailId}/messages/draft/attachments/{attachmentId}"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{attachmentId}", withString: "\(attachmentId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a conversation by id
     
     - parameter conversationId: (path) conversationId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAnalyticsConversationsConversationIdDetails(conversationId conversationId: String, completion: ((data: ININAnalyticsConversation?, error: ErrorType?) -> Void)) {
        getAnalyticsConversationsConversationIdDetailsWithRequestBuilder(conversationId: conversationId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a conversation by id
     - GET /api/v2/analytics/conversations/{conversationId}/details
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "conversationStart" : "2000-01-23T04:56:07.000+0000",
  "evaluations" : [ {
    "evaluationId" : "aeiou",
    "formId" : "aeiou",
    "queueId" : "aeiou",
    "formName" : "aeiou",
    "eventTime" : "aeiou",
    "contextId" : "aeiou",
    "getoTotalScore" : 123456789,
    "evaluatorId" : "aeiou",
    "userId" : "aeiou",
    "getoTotalCriticalScore" : 123456789
  } ],
  "conversationId" : "aeiou",
  "participants" : [ {
    "participantId" : "aeiou",
    "sessions" : [ {
      "outboundContactId" : "aeiou",
      "dispositionAnalyzer" : "aeiou",
      "remoteNameDisplayable" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "addressOther" : "aeiou",
      "addressSelf" : "aeiou",
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "mediaType" : "aeiou",
      "monitoredSessionId" : "aeiou",
      "sessionId" : "aeiou",
      "outboundCampaignId" : "aeiou",
      "roomId" : "aeiou",
      "dispositionName" : "aeiou",
      "segments" : [ {
        "queueId" : "aeiou",
        "conference" : true,
        "subject" : "aeiou",
        "sourceConversationId" : "aeiou",
        "groupId" : "aeiou",
        "errorCode" : "aeiou",
        "q850ResponseCodes" : [ 123456789 ],
        "requestedRoutingSkillIds" : [ "aeiou" ],
        "wrapUpCode" : "aeiou",
        "destinationConversationId" : "aeiou",
        "segmentEnd" : "2000-01-23T04:56:07.000+0000",
        "wrapUpNote" : "aeiou",
        "destinationSessionId" : "aeiou",
        "wrapUpTags" : [ "aeiou" ],
        "disconnectType" : "aeiou",
        "sourceSessionId" : "aeiou",
        "segmentStart" : "2000-01-23T04:56:07.000+0000",
        "requestedRoutingUserIds" : [ "aeiou" ],
        "sipResponseCodes" : [ 123456789 ],
        "requestedLanguageId" : "aeiou",
        "segmentType" : "aeiou",
        "properties" : [ {
          "propertyType" : "aeiou",
          "property" : "aeiou",
          "value" : "aeiou"
        } ]
      } ],
      "edgeId" : "aeiou",
      "scriptId" : "aeiou",
      "callbackUserName" : "aeiou",
      "timeoutSeconds" : 123,
      "outboundContactListId" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "direction" : "aeiou"
    } ],
    "purpose" : "aeiou",
    "participantName" : "aeiou",
    "userId" : "aeiou"
  } ]
}}]
     
     - parameter conversationId: (path) conversationId 

     - returns: RequestBuilder<ININAnalyticsConversation> 
     */
    public class func getAnalyticsConversationsConversationIdDetailsWithRequestBuilder(conversationId conversationId: String) -> RequestBuilder<ININAnalyticsConversation> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAnalyticsConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get conversations
     
     - parameter communicationType: (query) Call or Chat communication filtering (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversations(communicationType communicationType: String? = nil, completion: ((data: ININConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsWithRequestBuilder(communicationType: communicationType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get conversations
     - GET /api/v2/conversations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : {
          "agent" : "",
          "evaluations" : [ "" ],
          "selfUri" : "aeiou",
          "evaluators" : [ "" ],
          "contextId" : "aeiou",
          "averageScore" : 123,
          "calibrator" : "",
          "highScore" : 123,
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "scoringIndex" : "",
          "expertEvaluator" : "",
          "name" : "aeiou",
          "id" : "aeiou",
          "lowScore" : 123,
          "conversation" : "",
          "evaluationForm" : ""
        },
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter communicationType: (query) Call or Chat communication filtering (optional)

     - returns: RequestBuilder<ININConversationEntityListing> 
     */
    public class func getConversationsWithRequestBuilder(communicationType communicationType: String? = nil) -> RequestBuilder<ININConversationEntityListing> {
        let path = "/api/v2/conversations"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "communicationType": communicationType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get callback conversations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallbacks(completion: ((data: ININCallbackConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsCallbacksWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get callback conversations
     - GET /api/v2/conversations/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "outboundPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "wrapupRequired" : true,
      "callbackUserName" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "direction" : "aeiou",
      "address" : "aeiou",
      "script" : "",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "timeoutSeconds" : 123,
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININCallbackConversationEntityListing> 
     */
    public class func getConversationsCallbacksWithRequestBuilder() -> RequestBuilder<ININCallbackConversationEntityListing> {
        let path = "/api/v2/conversations/callbacks"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallbackConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get callback conversation
     
     - parameter callbackId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallbacksCallbackId(callbackId callbackId: String, completion: ((data: ININCallbackConversation?, error: ErrorType?) -> Void)) {
        getConversationsCallbacksCallbackIdWithRequestBuilder(callbackId: callbackId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get callback conversation
     - GET /api/v2/conversations/callbacks/{callbackId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "outboundPreview" : {
      "contactId" : "aeiou",
      "campaignId" : "aeiou",
      "phoneNumberColumns" : [ {
        "type" : "aeiou",
        "columnName" : "aeiou"
      } ],
      "contactListId" : "aeiou",
      "id" : "aeiou"
    },
    "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "callbackNumbers" : [ "aeiou" ],
    "skipEnabled" : true,
    "wrapupRequired" : true,
    "callbackUserName" : "aeiou",
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "direction" : "aeiou",
    "address" : "aeiou",
    "script" : "",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "timeoutSeconds" : 123,
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter callbackId: (path)  

     - returns: RequestBuilder<ININCallbackConversation> 
     */
    public class func getConversationsCallbacksCallbackIdWithRequestBuilder(callbackId callbackId: String) -> RequestBuilder<ININCallbackConversation> {
        var path = "/api/v2/conversations/callbacks/{callbackId}"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallbackConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the wrap-up for this conversation participant. 
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapup(callbackId callbackId: String, participantId: String, provisional: Bool? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapupWithRequestBuilder(callbackId: callbackId, participantId: participantId, provisional: provisional).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up for this conversation participant. 
     - GET /api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapupWithRequestBuilder(callbackId callbackId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapup"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "provisional": provisional
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of wrapup codes for this conversation participant
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapupcodes(callbackId callbackId: String, participantId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(callbackId: callbackId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes for this conversation participant
     - GET /api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsCallbacksCallbackIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(callbackId callbackId: String, participantId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get recent conversations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCalls(completion: ((data: ININCallConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsCallsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get recent conversations
     - GET /api/v2/conversations/calls
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "monitoredParticipantId" : "aeiou",
      "confined" : true,
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "recording" : true,
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "dnis" : "aeiou",
      "muted" : true,
      "ani" : "aeiou",
      "direction" : "aeiou",
      "group" : "",
      "address" : "aeiou",
      "script" : "",
      "consultParticipantId" : "aeiou",
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "documentId" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININCallConversationEntityListing> 
     */
    public class func getConversationsCallsWithRequestBuilder() -> RequestBuilder<ININCallConversationEntityListing> {
        let path = "/api/v2/conversations/calls"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get call conversation
     
     - parameter callId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallsCallId(callId callId: String, completion: ((data: ININCallConversation?, error: ErrorType?) -> Void)) {
        getConversationsCallsCallIdWithRequestBuilder(callId: callId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get call conversation
     - GET /api/v2/conversations/calls/{callId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "monitoredParticipantId" : "aeiou",
    "confined" : true,
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "recording" : true,
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "dnis" : "aeiou",
    "muted" : true,
    "ani" : "aeiou",
    "direction" : "aeiou",
    "group" : "",
    "address" : "aeiou",
    "script" : "",
    "consultParticipantId" : "aeiou",
    "recordingState" : "aeiou",
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "attributes" : {
      "key" : "aeiou"
    },
    "documentId" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : ""
  } ]
}}]
     
     - parameter callId: (path)  

     - returns: RequestBuilder<ININCallConversation> 
     */
    public class func getConversationsCallsCallIdWithRequestBuilder(callId callId: String) -> RequestBuilder<ININCallConversation> {
        var path = "/api/v2/conversations/calls/{callId}"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the wrap-up for this conversation participant. 
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallsCallIdParticipantsParticipantIdWrapup(callId callId: String, participantId: String, provisional: Bool? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsCallsCallIdParticipantsParticipantIdWrapupWithRequestBuilder(callId: callId, participantId: participantId, provisional: provisional).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up for this conversation participant. 
     - GET /api/v2/conversations/calls/{callId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsCallsCallIdParticipantsParticipantIdWrapupWithRequestBuilder(callId callId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/wrapup"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "provisional": provisional
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of wrapup codes for this conversation participant
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallsCallIdParticipantsParticipantIdWrapupcodes(callId callId: String, participantId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsCallsCallIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(callId: callId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes for this conversation participant
     - GET /api/v2/conversations/calls/{callId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter callId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsCallsCallIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(callId callId: String, participantId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get call history
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallsHistory(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, interval: String? = nil, completion: ((data: ININCallConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsCallsHistoryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, interval: interval).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get call history
     - GET /api/v2/conversations/calls/history
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "monitoredParticipantId" : "aeiou",
      "confined" : true,
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "recording" : true,
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "state" : "aeiou",
      "dnis" : "aeiou",
      "muted" : true,
      "ani" : "aeiou",
      "direction" : "aeiou",
      "group" : "",
      "address" : "aeiou",
      "script" : "",
      "consultParticipantId" : "aeiou",
      "recordingState" : "aeiou",
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "attributes" : {
        "key" : "aeiou"
      },
      "documentId" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : ""
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter interval: (query) Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39; (optional)

     - returns: RequestBuilder<ININCallConversationEntityListing> 
     */
    public class func getConversationsCallsHistoryWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, interval: String? = nil) -> RequestBuilder<ININCallConversationEntityListing> {
        let path = "/api/v2/conversations/calls/history"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "interval": interval
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the maximum number of participants that this user can have on a conference
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsCallsMaximumconferenceparties(completion: ((data: ININMaxParticipants?, error: ErrorType?) -> Void)) {
        getConversationsCallsMaximumconferencepartiesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the maximum number of participants that this user can have on a conference
     - GET /api/v2/conversations/calls/maximumconferenceparties
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "maxParticipants" : 123
}}]

     - returns: RequestBuilder<ININMaxParticipants> 
     */
    public class func getConversationsCallsMaximumconferencepartiesWithRequestBuilder() -> RequestBuilder<ININMaxParticipants> {
        let path = "/api/v2/conversations/calls/maximumconferenceparties"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININMaxParticipants>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get recent chat conversations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsChats(completion: ((data: ININChatConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsChatsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get recent chat conversations
     - GET /api/v2/conversations/chats
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "address" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "script" : "",
      "roomId" : "aeiou",
      "name" : "aeiou",
      "wrapupRequired" : true,
      "wrapupPrompt" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "attributes" : {
        "key" : "aeiou"
      },
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : "",
      "direction" : "aeiou"
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININChatConversationEntityListing> 
     */
    public class func getConversationsChatsWithRequestBuilder() -> RequestBuilder<ININChatConversationEntityListing> {
        let path = "/api/v2/conversations/chats"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChatConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get chat conversation
     
     - parameter chatId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsChatsChatId(chatId chatId: String, completion: ((data: ININChatConversation?, error: ErrorType?) -> Void)) {
        getConversationsChatsChatIdWithRequestBuilder(chatId: chatId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get chat conversation
     - GET /api/v2/conversations/chats/{chatId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "address" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "script" : "",
    "roomId" : "aeiou",
    "name" : "aeiou",
    "wrapupRequired" : true,
    "wrapupPrompt" : "aeiou",
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "attributes" : {
      "key" : "aeiou"
    },
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : "",
    "direction" : "aeiou"
  } ]
}}]
     
     - parameter chatId: (path)  

     - returns: RequestBuilder<ININChatConversation> 
     */
    public class func getConversationsChatsChatIdWithRequestBuilder(chatId chatId: String) -> RequestBuilder<ININChatConversation> {
        var path = "/api/v2/conversations/chats/{chatId}"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChatConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the wrap-up for this conversation participant. 
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsChatsChatIdParticipantsParticipantIdWrapup(chatId chatId: String, participantId: String, provisional: Bool? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsChatsChatIdParticipantsParticipantIdWrapupWithRequestBuilder(chatId: chatId, participantId: participantId, provisional: provisional).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up for this conversation participant. 
     - GET /api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsChatsChatIdParticipantsParticipantIdWrapupWithRequestBuilder(chatId chatId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapup"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "provisional": provisional
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of wrapup codes for this conversation participant
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsChatsChatIdParticipantsParticipantIdWrapupcodes(chatId chatId: String, participantId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsChatsChatIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(chatId: chatId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes for this conversation participant
     - GET /api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsChatsChatIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(chatId chatId: String, participantId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get conversation
     
     - parameter conversationId: (path) conversation ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationId(conversationId conversationId: String, completion: ((data: ININConversation?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdWithRequestBuilder(conversationId: conversationId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get conversation
     - GET /api/v2/conversations/{conversationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "callbackUserName" : "aeiou",
      "disconnectType" : "aeiou",
      "timeoutSeconds" : 123,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou"
    } ],
    "videos" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "videoMuted" : true,
      "peerCount" : 123,
      "context" : "aeiou",
      "audioMuted" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "sharingScreen" : true,
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "locale" : "aeiou",
    "emails" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "subject" : "aeiou",
      "messagesSent" : 123,
      "errorInfo" : "",
      "segments" : [ "" ],
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "createdByApp" : "aeiou",
        "version" : 123,
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "skillEvaluationMethod" : "aeiou",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "createdBy" : "aeiou",
        "callingPartyNumber" : "aeiou",
        "name" : "aeiou",
        "modifiedByApp" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "previousUri" : "aeiou",
          "nextUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "type" : "aeiou",
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "name" : "aeiou",
          "questions" : [ {
            "key" : "{}"
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "consultParticipantId" : "aeiou",
    "queueName" : "aeiou",
    "calls" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "confined" : true,
      "held" : true,
      "recording" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "recordingState" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "documentId" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "direction" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "segments" : [ "" ],
      "socialMediaHub" : "aeiou",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000"
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter conversationId: (path) conversation ID 

     - returns: RequestBuilder<ININConversation> 
     */
    public class func getConversationsConversationIdWithRequestBuilder(conversationId conversationId: String) -> RequestBuilder<ININConversation> {
        var path = "/api/v2/conversations/{conversationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the wrap-up for this conversation participant. 
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdParticipantsParticipantIdWrapup(conversationId conversationId: String, participantId: String, provisional: Bool? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdParticipantsParticipantIdWrapupWithRequestBuilder(conversationId: conversationId, participantId: participantId, provisional: provisional).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up for this conversation participant. 
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsConversationIdParticipantsParticipantIdWrapupWithRequestBuilder(conversationId conversationId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapup"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "provisional": provisional
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of wrapup codes for this conversation participant
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsConversationIdParticipantsParticipantIdWrapupcodes(conversationId conversationId: String, participantId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsConversationIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(conversationId: conversationId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes for this conversation participant
     - GET /api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsConversationIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(conversationId conversationId: String, participantId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get recent email conversations
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmails(completion: ((data: ININEmailConversationEntityListing?, error: ErrorType?) -> Void)) {
        getConversationsEmailsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get recent email conversations
     - GET /api/v2/conversations/emails
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "otherMediaUris" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "participants" : [ {
      "address" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "held" : true,
      "subject" : "aeiou",
      "messagesSent" : 123,
      "wrapupTimeoutMs" : 123,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "script" : "",
      "name" : "aeiou",
      "wrapupRequired" : true,
      "wrapupPrompt" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "disconnectType" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "attributes" : {
        "key" : "aeiou"
      },
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "user" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "queue" : "",
      "direction" : "aeiou"
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININEmailConversationEntityListing> 
     */
    public class func getConversationsEmailsWithRequestBuilder() -> RequestBuilder<ININEmailConversationEntityListing> {
        let path = "/api/v2/conversations/emails"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailConversationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get email conversation
     
     - parameter emailId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailId(emailId emailId: String, completion: ((data: ININEmailConversation?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get email conversation
     - GET /api/v2/conversations/emails/{emailId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "otherMediaUris" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "participants" : [ {
    "address" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "held" : true,
    "subject" : "aeiou",
    "messagesSent" : 123,
    "wrapupTimeoutMs" : 123,
    "errorInfo" : {
      "messageWithParams" : "aeiou",
      "code" : "aeiou",
      "entityName" : "aeiou",
      "entityId" : "aeiou",
      "contextId" : "aeiou",
      "details" : [ {
        "fieldName" : "aeiou",
        "entityName" : "aeiou",
        "errorCode" : "aeiou",
        "entityId" : "aeiou"
      } ],
      "messageParams" : {
        "key" : "aeiou"
      },
      "message" : "aeiou",
      "errors" : [ "" ],
      "status" : 123
    },
    "script" : "",
    "name" : "aeiou",
    "wrapupRequired" : true,
    "wrapupPrompt" : "aeiou",
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "disconnectType" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "attributes" : {
      "key" : "aeiou"
    },
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "startHoldTime" : "2000-01-23T04:56:07.000+0000",
    "state" : "aeiou",
    "user" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "queue" : "",
    "direction" : "aeiou"
  } ]
}}]
     
     - parameter emailId: (path)  

     - returns: RequestBuilder<ININEmailConversation> 
     */
    public class func getConversationsEmailsEmailIdWithRequestBuilder(emailId emailId: String) -> RequestBuilder<ININEmailConversation> {
        var path = "/api/v2/conversations/emails/{emailId}"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get conversation messages
     
     - parameter emailId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailIdMessages(emailId emailId: String, completion: ((data: ININEmailMessageListing?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdMessagesWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get conversation messages
     - GET /api/v2/conversations/emails/{emailId}/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "cc" : [ "" ],
    "bcc" : [ "" ],
    "attachments" : [ {
      "contentUri" : "aeiou",
      "name" : "aeiou",
      "contentLength" : 123,
      "attachmentId" : "aeiou",
      "contentType" : "aeiou"
    } ],
    "htmlBody" : "aeiou",
    "subject" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "from" : "",
    "textBody" : "aeiou",
    "id" : "aeiou",
    "to" : [ {
      "name" : "aeiou",
      "email" : "aeiou"
    } ],
    "time" : "2000-01-23T04:56:07.000+0000"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter emailId: (path)  

     - returns: RequestBuilder<ININEmailMessageListing> 
     */
    public class func getConversationsEmailsEmailIdMessagesWithRequestBuilder(emailId emailId: String) -> RequestBuilder<ININEmailMessageListing> {
        var path = "/api/v2/conversations/emails/{emailId}/messages"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailMessageListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get conversation draft reply
     
     - parameter emailId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailIdMessagesDraft(emailId emailId: String, completion: ((data: ININEmailMessage?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdMessagesDraftWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get conversation draft reply
     - GET /api/v2/conversations/emails/{emailId}/messages/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "htmlBody" : "aeiou",
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "from" : "",
  "textBody" : "aeiou",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter emailId: (path)  

     - returns: RequestBuilder<ININEmailMessage> 
     */
    public class func getConversationsEmailsEmailIdMessagesDraftWithRequestBuilder(emailId emailId: String) -> RequestBuilder<ININEmailMessage> {
        var path = "/api/v2/conversations/emails/{emailId}/messages/draft"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailMessage>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get conversation message
     
     - parameter emailId: (path)  
     - parameter messageId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailIdMessagesMessageId(emailId emailId: String, messageId: String, completion: ((data: ININEmailMessage?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdMessagesMessageIdWithRequestBuilder(emailId: emailId, messageId: messageId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get conversation message
     - GET /api/v2/conversations/emails/{emailId}/messages/{messageId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "htmlBody" : "aeiou",
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "from" : "",
  "textBody" : "aeiou",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter emailId: (path)  
     - parameter messageId: (path)  

     - returns: RequestBuilder<ININEmailMessage> 
     */
    public class func getConversationsEmailsEmailIdMessagesMessageIdWithRequestBuilder(emailId emailId: String, messageId: String) -> RequestBuilder<ININEmailMessage> {
        var path = "/api/v2/conversations/emails/{emailId}/messages/{messageId}"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{messageId}", withString: "\(messageId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailMessage>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the wrap-up for this conversation participant. 
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailIdParticipantsParticipantIdWrapup(emailId emailId: String, participantId: String, provisional: Bool? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdParticipantsParticipantIdWrapupWithRequestBuilder(emailId: emailId, participantId: participantId, provisional: provisional).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up for this conversation participant. 
     - GET /api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter provisional: (query) Indicates if the wrap-up code is provisional. (optional, default to false)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsEmailsEmailIdParticipantsParticipantIdWrapupWithRequestBuilder(emailId emailId: String, participantId: String, provisional: Bool? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapup"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "provisional": provisional
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get list of wrapup codes for this conversation participant
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConversationsEmailsEmailIdParticipantsParticipantIdWrapupcodes(emailId emailId: String, participantId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getConversationsEmailsEmailIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(emailId: emailId, participantId: participantId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes for this conversation participant
     - GET /api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getConversationsEmailsEmailIdParticipantsParticipantIdWrapupcodesWithRequestBuilder(emailId emailId: String, participantId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation participant
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallbacksCallbackIdParticipantsParticipantId(callbackId callbackId: String, participantId: String, body: ININMediaParticipantRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsCallbacksCallbackIdParticipantsParticipantIdWithRequestBuilder(callbackId: callbackId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update conversation participant
     - PATCH /api/v2/conversations/callbacks/{callbackId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsCallbacksCallbackIdParticipantsParticipantIdWithRequestBuilder(callbackId callbackId: String, participantId: String, body: ININMediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the attributes on a conversation participant.
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallbacksCallbackIdParticipantsParticipantIdAttributes(callbackId callbackId: String, participantId: String, body: ININParticipantAttributes? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsCallbacksCallbackIdParticipantsParticipantIdAttributesWithRequestBuilder(callbackId: callbackId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the attributes on a conversation participant.
     - PATCH /api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsCallbacksCallbackIdParticipantsParticipantIdAttributesWithRequestBuilder(callbackId callbackId: String, participantId: String, body: ININParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/attributes"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallsCallId(callId callId: String, body: ININConversation? = nil, completion: ((data: ININConversation?, error: ErrorType?) -> Void)) {
        patchConversationsCallsCallIdWithRequestBuilder(callId: callId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update conversation
     - PATCH /api/v2/conversations/calls/{callId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "callbackUserName" : "aeiou",
      "disconnectType" : "aeiou",
      "timeoutSeconds" : 123,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou"
    } ],
    "videos" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "videoMuted" : true,
      "peerCount" : 123,
      "context" : "aeiou",
      "audioMuted" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "sharingScreen" : true,
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "locale" : "aeiou",
    "emails" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "subject" : "aeiou",
      "messagesSent" : 123,
      "errorInfo" : "",
      "segments" : [ "" ],
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "createdByApp" : "aeiou",
        "version" : 123,
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "skillEvaluationMethod" : "aeiou",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "createdBy" : "aeiou",
        "callingPartyNumber" : "aeiou",
        "name" : "aeiou",
        "modifiedByApp" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "previousUri" : "aeiou",
          "nextUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "type" : "aeiou",
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "name" : "aeiou",
          "questions" : [ {
            "key" : "{}"
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "consultParticipantId" : "aeiou",
    "queueName" : "aeiou",
    "calls" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "confined" : true,
      "held" : true,
      "recording" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "recordingState" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "documentId" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "direction" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "segments" : [ "" ],
      "socialMediaHub" : "aeiou",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000"
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)

     - returns: RequestBuilder<ININConversation> 
     */
    public class func patchConversationsCallsCallIdWithRequestBuilder(callId callId: String, body: ININConversation? = nil) -> RequestBuilder<ININConversation> {
        var path = "/api/v2/conversations/calls/{callId}"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation participant
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantId(callId callId: String, participantId: String, body: ININMediaParticipantRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsCallsCallIdParticipantsParticipantIdWithRequestBuilder(callId: callId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update conversation participant
     - PATCH /api/v2/conversations/calls/{callId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantIdWithRequestBuilder(callId callId: String, participantId: String, body: ININMediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the attributes on a conversation participant.
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantIdAttributes(callId callId: String, participantId: String, body: ININParticipantAttributes? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsCallsCallIdParticipantsParticipantIdAttributesWithRequestBuilder(callId: callId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the attributes on a conversation participant.
     - PATCH /api/v2/conversations/calls/{callId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantIdAttributesWithRequestBuilder(callId callId: String, participantId: String, body: ININParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/attributes"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Change who can speak
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body) new speak to (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantIdConsult(callId callId: String, participantId: String, body: ININConsultTransferUpdate? = nil, completion: ((data: ININConsultTransferResponse?, error: ErrorType?) -> Void)) {
        patchConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId: callId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Change who can speak
     - PATCH /api/v2/conversations/calls/{callId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "destinationParticipantId" : "aeiou"
}}]
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body) new speak to (optional)

     - returns: RequestBuilder<ININConsultTransferResponse> 
     */
    public class func patchConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId callId: String, participantId: String, body: ININConsultTransferUpdate? = nil) -> RequestBuilder<ININConsultTransferResponse> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/consult"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConsultTransferResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation participant
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsChatsChatIdParticipantsParticipantId(chatId chatId: String, participantId: String, body: ININMediaParticipantRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsChatsChatIdParticipantsParticipantIdWithRequestBuilder(chatId: chatId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update conversation participant
     - PATCH /api/v2/conversations/chats/{chatId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsChatsChatIdParticipantsParticipantIdWithRequestBuilder(chatId chatId: String, participantId: String, body: ININMediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{chatId}/participants/{participantId}"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the attributes on a conversation participant.
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsChatsChatIdParticipantsParticipantIdAttributes(chatId chatId: String, participantId: String, body: ININParticipantAttributes? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsChatsChatIdParticipantsParticipantIdAttributesWithRequestBuilder(chatId: chatId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the attributes on a conversation participant.
     - PATCH /api/v2/conversations/chats/{chatId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsChatsChatIdParticipantsParticipantIdAttributesWithRequestBuilder(chatId chatId: String, participantId: String, body: ININParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{chatId}/participants/{participantId}/attributes"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsConversationIdParticipantsParticipantId(conversationId conversationId: String, participantId: String, body: ININMediaParticipantRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsConversationIdParticipantsParticipantIdWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update a participant.
     - PATCH /api/v2/conversations/{conversationId}/participants/{participantId}
     - Update conversation participant.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsConversationIdParticipantsParticipantIdWithRequestBuilder(conversationId conversationId: String, participantId: String, body: ININMediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the attributes on a conversation participant.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsConversationIdParticipantsParticipantIdAttributes(conversationId conversationId: String, participantId: String, body: ININParticipantAttributes? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsConversationIdParticipantsParticipantIdAttributesWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the attributes on a conversation participant.
     - PATCH /api/v2/conversations/{conversationId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsConversationIdParticipantsParticipantIdAttributesWithRequestBuilder(conversationId conversationId: String, participantId: String, body: ININParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/attributes"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation participant
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsEmailsEmailIdParticipantsParticipantId(emailId emailId: String, participantId: String, body: ININMediaParticipantRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsEmailsEmailIdParticipantsParticipantIdWithRequestBuilder(emailId: emailId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update conversation participant
     - PATCH /api/v2/conversations/emails/{emailId}/participants/{participantId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsEmailsEmailIdParticipantsParticipantIdWithRequestBuilder(emailId emailId: String, participantId: String, body: ININMediaParticipantRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{emailId}/participants/{participantId}"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the attributes on a conversation participant.
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchConversationsEmailsEmailIdParticipantsParticipantIdAttributes(emailId emailId: String, participantId: String, body: ININParticipantAttributes? = nil, completion: ((error: ErrorType?) -> Void)) {
        patchConversationsEmailsEmailIdParticipantsParticipantIdAttributesWithRequestBuilder(emailId: emailId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update the attributes on a conversation participant.
     - PATCH /api/v2/conversations/emails/{emailId}/participants/{participantId}/attributes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func patchConversationsEmailsEmailIdParticipantsParticipantIdAttributesWithRequestBuilder(emailId emailId: String, participantId: String, body: ININParticipantAttributes? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{emailId}/participants/{participantId}/attributes"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for conversation aggregates
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsConversationsAggregatesQuery(body body: ININAggregationQuery? = nil, completion: ((data: ININAggregateQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for conversation aggregates
     - POST /api/v2/analytics/conversations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININAggregateQueryResponse> 
     */
    public class func postAnalyticsConversationsAggregatesQueryWithRequestBuilder(body body: ININAggregationQuery? = nil) -> RequestBuilder<ININAggregateQueryResponse> {
        let path = "/api/v2/analytics/conversations/aggregates/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAggregateQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Index conversation properties
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsConversationsConversationIdDetailsProperties(conversationId conversationId: String, body: ININPropertyIndexRequest? = nil, completion: ((data: ININPropertyIndexRequest?, error: ErrorType?) -> Void)) {
        postAnalyticsConversationsConversationIdDetailsPropertiesWithRequestBuilder(conversationId: conversationId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Index conversation properties
     - POST /api/v2/analytics/conversations/{conversationId}/details/properties
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "sessionId" : "aeiou",
  "properties" : [ {
    "propertyType" : "aeiou",
    "property" : "aeiou",
    "value" : "aeiou"
  } ],
  "timestamp" : 123456789
}}]
     
     - parameter conversationId: (path) conversationId 
     - parameter body: (body) request (optional)

     - returns: RequestBuilder<ININPropertyIndexRequest> 
     */
    public class func postAnalyticsConversationsConversationIdDetailsPropertiesWithRequestBuilder(conversationId conversationId: String, body: ININPropertyIndexRequest? = nil) -> RequestBuilder<ININPropertyIndexRequest> {
        var path = "/api/v2/analytics/conversations/{conversationId}/details/properties"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPropertyIndexRequest>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for conversation details
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsConversationsDetailsQuery(body body: ININConversationQuery? = nil, completion: ((data: ININAnalyticsConversationQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsConversationsDetailsQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for conversation details
     - POST /api/v2/analytics/conversations/details/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "conversations" : [ {
    "conversationStart" : "2000-01-23T04:56:07.000+0000",
    "evaluations" : [ {
      "evaluationId" : "aeiou",
      "formId" : "aeiou",
      "queueId" : "aeiou",
      "formName" : "aeiou",
      "eventTime" : "aeiou",
      "contextId" : "aeiou",
      "getoTotalScore" : 123456789,
      "evaluatorId" : "aeiou",
      "userId" : "aeiou",
      "getoTotalCriticalScore" : 123456789
    } ],
    "conversationId" : "aeiou",
    "participants" : [ {
      "participantId" : "aeiou",
      "sessions" : [ {
        "outboundContactId" : "aeiou",
        "dispositionAnalyzer" : "aeiou",
        "remoteNameDisplayable" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "addressOther" : "aeiou",
        "addressSelf" : "aeiou",
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "mediaType" : "aeiou",
        "monitoredSessionId" : "aeiou",
        "sessionId" : "aeiou",
        "outboundCampaignId" : "aeiou",
        "roomId" : "aeiou",
        "dispositionName" : "aeiou",
        "segments" : [ {
          "queueId" : "aeiou",
          "conference" : true,
          "subject" : "aeiou",
          "sourceConversationId" : "aeiou",
          "groupId" : "aeiou",
          "errorCode" : "aeiou",
          "q850ResponseCodes" : [ 123456789 ],
          "requestedRoutingSkillIds" : [ "aeiou" ],
          "wrapUpCode" : "aeiou",
          "destinationConversationId" : "aeiou",
          "segmentEnd" : "2000-01-23T04:56:07.000+0000",
          "wrapUpNote" : "aeiou",
          "destinationSessionId" : "aeiou",
          "wrapUpTags" : [ "aeiou" ],
          "disconnectType" : "aeiou",
          "sourceSessionId" : "aeiou",
          "segmentStart" : "2000-01-23T04:56:07.000+0000",
          "requestedRoutingUserIds" : [ "aeiou" ],
          "sipResponseCodes" : [ 123456789 ],
          "requestedLanguageId" : "aeiou",
          "segmentType" : "aeiou",
          "properties" : [ {
            "propertyType" : "aeiou",
            "property" : "aeiou",
            "value" : "aeiou"
          } ]
        } ],
        "edgeId" : "aeiou",
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "timeoutSeconds" : 123,
        "outboundContactListId" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "direction" : "aeiou"
      } ],
      "purpose" : "aeiou",
      "participantName" : "aeiou",
      "userId" : "aeiou"
    } ]
  } ],
  "aggregations" : [ {
    "metric" : "aeiou",
    "count" : 123456789,
    "type" : "aeiou",
    "dimension" : "aeiou",
    "results" : [ {
      "count" : 123456789,
      "lt" : 1.3579000000000001069366817318950779736042022705078125,
      "gte" : 1.3579000000000001069366817318950779736042022705078125,
      "value" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININAnalyticsConversationQueryResponse> 
     */
    public class func postAnalyticsConversationsDetailsQueryWithRequestBuilder(body body: ININConversationQuery? = nil) -> RequestBuilder<ININAnalyticsConversationQueryResponse> {
        let path = "/api/v2/analytics/conversations/details/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAnalyticsConversationQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a Callback
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallbacks(body body: ININCreateCallbackCommand? = nil, completion: ((data: ININCreateCallbackResponse?, error: ErrorType?) -> Void)) {
        postConversationsCallbacksWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a Callback
     - POST /api/v2/conversations/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callbackIdentifiers" : [ {
    "id" : "aeiou",
    "type" : "aeiou"
  } ],
  "conversation" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  }
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININCreateCallbackResponse> 
     */
    public class func postConversationsCallbacksWithRequestBuilder(body body: ININCreateCallbackCommand? = nil) -> RequestBuilder<ININCreateCallbackResponse> {
        let path = "/api/v2/conversations/callbacks"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCreateCallbackResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace this participant with the specified user and/or address
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallbacksCallbackIdParticipantsParticipantIdReplace(callbackId callbackId: String, participantId: String, body: ININTransferRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsCallbacksCallbackIdParticipantsParticipantIdReplaceWithRequestBuilder(callbackId: callbackId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Replace this participant with the specified user and/or address
     - POST /api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callbackId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsCallbacksCallbackIdParticipantsParticipantIdReplaceWithRequestBuilder(callbackId callbackId: String, participantId: String, body: ININTransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/replace"
        path = path.stringByReplacingOccurrencesOfString("{callbackId}", withString: "\(callbackId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a call conversation
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCalls(body body: ININCreateCallRequest? = nil, completion: ((data: ININCreateCallResponse?, error: ErrorType?) -> Void)) {
        postConversationsCallsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a call conversation
     - POST /api/v2/conversations/calls
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININCreateCallResponse> 
     */
    public class func postConversationsCallsWithRequestBuilder(body body: ININCreateCallRequest? = nil) -> RequestBuilder<ININCreateCallResponse> {
        let path = "/api/v2/conversations/calls"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCreateCallResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new call to a conversation
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallsCallId(callId callId: String, body: ININCallCommand? = nil, completion: ((data: ININConversation?, error: ErrorType?) -> Void)) {
        postConversationsCallsCallIdWithRequestBuilder(callId: callId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a new call to a conversation
     - POST /api/v2/conversations/calls/{callId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "callbackUserName" : "aeiou",
      "disconnectType" : "aeiou",
      "timeoutSeconds" : 123,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou"
    } ],
    "videos" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "videoMuted" : true,
      "peerCount" : 123,
      "context" : "aeiou",
      "audioMuted" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "sharingScreen" : true,
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "locale" : "aeiou",
    "emails" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "subject" : "aeiou",
      "messagesSent" : 123,
      "errorInfo" : "",
      "segments" : [ "" ],
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "createdByApp" : "aeiou",
        "version" : 123,
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "skillEvaluationMethod" : "aeiou",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "createdBy" : "aeiou",
        "callingPartyNumber" : "aeiou",
        "name" : "aeiou",
        "modifiedByApp" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "previousUri" : "aeiou",
          "nextUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "type" : "aeiou",
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "name" : "aeiou",
          "questions" : [ {
            "key" : "{}"
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "consultParticipantId" : "aeiou",
    "queueName" : "aeiou",
    "calls" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "confined" : true,
      "held" : true,
      "recording" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "recordingState" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "documentId" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "direction" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "segments" : [ "" ],
      "socialMediaHub" : "aeiou",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000"
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)

     - returns: RequestBuilder<ININConversation> 
     */
    public class func postConversationsCallsCallIdWithRequestBuilder(callId callId: String, body: ININCallCommand? = nil) -> RequestBuilder<ININConversation> {
        var path = "/api/v2/conversations/calls/{callId}"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add participants to a conversation
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallsCallIdParticipants(callId callId: String, body: ININConversation? = nil, completion: ((data: ININConversation?, error: ErrorType?) -> Void)) {
        postConversationsCallsCallIdParticipantsWithRequestBuilder(callId: callId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add participants to a conversation
     - POST /api/v2/conversations/calls/{callId}/participants
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "address" : "aeiou",
  "conversationIds" : [ "aeiou" ],
  "recordingState" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "endTime" : "2000-01-23T04:56:07.000+0000",
  "participants" : [ {
    "queueId" : "aeiou",
    "monitoredParticipantId" : "aeiou",
    "externalContactId" : "aeiou",
    "wrapupSkipped" : true,
    "purpose" : "aeiou",
    "groupId" : "aeiou",
    "wrapupTimeoutMs" : 123,
    "callbacks" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "callbackNumbers" : [ "aeiou" ],
      "skipEnabled" : true,
      "segments" : [ "" ],
      "scriptId" : "aeiou",
      "callbackUserName" : "aeiou",
      "disconnectType" : "aeiou",
      "timeoutSeconds" : 123,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "dialerPreview" : {
        "contactId" : "aeiou",
        "campaignId" : "aeiou",
        "phoneNumberColumns" : [ {
          "type" : "aeiou",
          "columnName" : "aeiou"
        } ],
        "contactListId" : "aeiou",
        "id" : "aeiou"
      },
      "direction" : "aeiou"
    } ],
    "videos" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "videoMuted" : true,
      "peerCount" : 123,
      "context" : "aeiou",
      "audioMuted" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "sharingScreen" : true,
      "state" : "aeiou",
      "id" : "aeiou"
    } ],
    "locale" : "aeiou",
    "emails" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "subject" : "aeiou",
      "messagesSent" : 123,
      "errorInfo" : "",
      "segments" : [ "" ],
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "direction" : "aeiou"
    } ],
    "wrapupRequired" : true,
    "connectedTime" : "2000-01-23T04:56:07.000+0000",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "userUri" : "aeiou",
    "dnis" : "aeiou",
    "ani" : "aeiou",
    "wrapup" : {
      "provisional" : true,
      "code" : "aeiou",
      "notes" : "aeiou",
      "durationSeconds" : 123,
      "name" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "tags" : [ "aeiou" ]
    },
    "address" : "aeiou",
    "evaluations" : [ {
      "assignedDate" : "2000-01-23T04:56:07.000+0000",
      "agent" : "",
      "resourceId" : "aeiou",
      "releaseDate" : "2000-01-23T04:56:07.000+0000",
      "redacted" : true,
      "selfUri" : "aeiou",
      "answers" : {
        "comments" : "aeiou",
        "agentComments" : "aeiou",
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "questionGroupScores" : [ {
          "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "markedNA" : true,
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
          "questionScores" : [ {
            "answerId" : "aeiou",
            "failedKillQuestion" : true,
            "score" : 123,
            "questionId" : "aeiou",
            "comments" : "aeiou",
            "markedNA" : true
          } ],
          "questionGroupId" : "aeiou",
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
        } ],
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "anyFailedKillQuestions" : true
      },
      "changedDate" : "2000-01-23T04:56:07.000+0000",
      "neverRelease" : true,
      "agentHasRead" : true,
      "name" : "aeiou",
      "id" : "aeiou",
      "calibration" : {
        "agent" : "",
        "evaluations" : [ "" ],
        "selfUri" : "aeiou",
        "evaluators" : [ "" ],
        "contextId" : "aeiou",
        "averageScore" : 123,
        "calibrator" : "",
        "highScore" : 123,
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "scoringIndex" : "",
        "expertEvaluator" : "",
        "name" : "aeiou",
        "id" : "aeiou",
        "lowScore" : 123,
        "conversation" : "",
        "evaluationForm" : ""
      },
      "conversation" : "",
      "queue" : {
        "callingPartyName" : "aeiou",
        "acwSettings" : {
          "timeoutMs" : 123,
          "wrapupPrompt" : "aeiou"
        },
        "mediaSettings" : {
          "key" : {
            "alertingTimeoutSeconds" : 123,
            "serviceLevel" : {
              "percentage" : 1.3579000000000001069366817318950779736042022705078125,
              "durationMs" : 123456789
            }
          }
        },
        "memberCount" : 123,
        "selfUri" : "aeiou",
        "description" : "aeiou",
        "dateModified" : "2000-01-23T04:56:07.000+0000",
        "createdByApp" : "aeiou",
        "version" : 123,
        "bullseye" : {
          "rings" : [ {
            "expansionCriteria" : [ {
              "threshold" : 1.3579000000000001069366817318950779736042022705078125,
              "type" : "aeiou"
            } ],
            "actions" : {
              "skillsToRemove" : [ {
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            }
          } ]
        },
        "skillEvaluationMethod" : "aeiou",
        "dateCreated" : "2000-01-23T04:56:07.000+0000",
        "queueFlow" : {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        },
        "createdBy" : "aeiou",
        "callingPartyNumber" : "aeiou",
        "name" : "aeiou",
        "modifiedByApp" : "aeiou",
        "modifiedBy" : "aeiou",
        "id" : "aeiou",
        "state" : "aeiou"
      },
      "isScoringIndex" : true,
      "evaluationForm" : {
        "publishedVersions" : {
          "total" : 123456789,
          "pageCount" : 123,
          "pageNumber" : 123,
          "entities" : [ "" ],
          "firstUri" : "aeiou",
          "selfUri" : "aeiou",
          "lastUri" : "aeiou",
          "pageSize" : 123,
          "previousUri" : "aeiou",
          "nextUri" : "aeiou"
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "contextId" : "aeiou",
        "id" : "aeiou",
        "published" : true,
        "type" : "aeiou",
        "questionGroups" : [ {
          "defaultAnswersToHighest" : true,
          "manualWeight" : true,
          "name" : "aeiou",
          "questions" : [ {
            "key" : "{}"
          } ],
          "weight" : 1.3579000000000001069366817318950779736042022705078125,
          "id" : "aeiou",
          "defaultAnswersToNA" : true,
          "type" : "aeiou",
          "naEnabled" : true
        } ]
      },
      "evaluator" : {
        "addresses" : [ "" ],
        "images" : [ {
          "imageUri" : "aeiou",
          "resolution" : "aeiou"
        } ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ {
          "address" : "aeiou",
          "display" : "aeiou",
          "mediaType" : "aeiou",
          "type" : "aeiou"
        } ],
        "routingStatus" : {
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "userId" : "aeiou",
          "status" : "aeiou"
        },
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : {
          "jabberId" : "aeiou"
        },
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : {
          "presenceDefinition" : {
            "createdDate" : "2000-01-23T04:56:07.000+0000",
            "createdBy" : "",
            "languageLabels" : {
              "key" : "aeiou"
            },
            "systemPresence" : "aeiou",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "modifiedBy" : "",
            "id" : "aeiou",
            "deactivated" : true,
            "primary" : true
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "id" : "aeiou",
          "source" : "aeiou",
          "message" : "aeiou",
          "primary" : true
        },
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "status" : "aeiou",
      "resourceType" : "aeiou"
    } ],
    "participantType" : "aeiou",
    "userId" : "aeiou",
    "consultParticipantId" : "aeiou",
    "queueName" : "aeiou",
    "calls" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "confined" : true,
      "held" : true,
      "recording" : true,
      "errorInfo" : {
        "messageWithParams" : "aeiou",
        "code" : "aeiou",
        "entityName" : "aeiou",
        "entityId" : "aeiou",
        "contextId" : "aeiou",
        "details" : [ {
          "fieldName" : "aeiou",
          "entityName" : "aeiou",
          "errorCode" : "aeiou",
          "entityId" : "aeiou"
        } ],
        "messageParams" : {
          "key" : "aeiou"
        },
        "message" : "aeiou",
        "errors" : [ "" ],
        "status" : 123
      },
      "segments" : [ {
        "howEnded" : "aeiou",
        "disconnectType" : "aeiou",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "type" : "aeiou"
      } ],
      "recordingState" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "documentId" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "muted" : true,
      "direction" : "aeiou",
      "disconnectReasons" : [ {
        "code" : 123,
        "phrase" : "aeiou",
        "type" : "aeiou"
      } ]
    } ],
    "name" : "aeiou",
    "wrapupPrompt" : "aeiou",
    "chats" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "recordingId" : "aeiou",
      "roomId" : "aeiou",
      "segments" : [ "" ],
      "direction" : "aeiou"
    } ],
    "socialExpressions" : [ {
      "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
      "held" : true,
      "segments" : [ "" ],
      "socialMediaHub" : "aeiou",
      "socialMediaId" : "aeiou",
      "disconnectType" : "aeiou",
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "socialUserName" : "aeiou",
      "state" : "aeiou",
      "id" : "aeiou",
      "startHoldTime" : "2000-01-23T04:56:07.000+0000",
      "previewText" : "aeiou",
      "recordingId" : "aeiou"
    } ],
    "attributes" : {
      "key" : "aeiou"
    },
    "endTime" : "2000-01-23T04:56:07.000+0000"
  } ],
  "maxParticipants" : 123
}}]
     
     - parameter callId: (path)  
     - parameter body: (body) Conversation (optional)

     - returns: RequestBuilder<ININConversation> 
     */
    public class func postConversationsCallsCallIdParticipantsWithRequestBuilder(callId callId: String, body: ININConversation? = nil) -> RequestBuilder<ININConversation> {
        var path = "/api/v2/conversations/calls/{callId}/participants"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConversation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Initiate and update consult transfer
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body) Destination address &amp; initial speak to (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdConsult(callId callId: String, participantId: String, body: ININConsultTransfer? = nil, completion: ((data: ININConsultTransferResponse?, error: ErrorType?) -> Void)) {
        postConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId: callId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Initiate and update consult transfer
     - POST /api/v2/conversations/calls/{callId}/participants/{participantId}/consult
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "destinationParticipantId" : "aeiou"
}}]
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body) Destination address &amp; initial speak to (optional)

     - returns: RequestBuilder<ININConsultTransferResponse> 
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdConsultWithRequestBuilder(callId callId: String, participantId: String, body: ININConsultTransfer? = nil) -> RequestBuilder<ININConsultTransferResponse> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/consult"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININConsultTransferResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Listen in on the conversation from the point of view of a given participant.
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdMonitor(callId callId: String, participantId: String, completion: ((error: ErrorType?) -> Void)) {
        postConversationsCallsCallIdParticipantsParticipantIdMonitorWithRequestBuilder(callId: callId, participantId: participantId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Listen in on the conversation from the point of view of a given participant.
     - POST /api/v2/conversations/calls/{callId}/participants/{participantId}/monitor
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callId: (path)  
     - parameter participantId: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdMonitorWithRequestBuilder(callId callId: String, participantId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/monitor"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace this participant with the specified user and/or address
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdReplace(callId callId: String, participantId: String, body: ININTransferRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsCallsCallIdParticipantsParticipantIdReplaceWithRequestBuilder(callId: callId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Replace this participant with the specified user and/or address
     - POST /api/v2/conversations/calls/{callId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter callId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsCallsCallIdParticipantsParticipantIdReplaceWithRequestBuilder(callId callId: String, participantId: String, body: ININTransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/calls/{callId}/participants/{participantId}/replace"
        path = path.stringByReplacingOccurrencesOfString("{callId}", withString: "\(callId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace this participant with the specified user and/or address
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsChatsChatIdParticipantsParticipantIdReplace(chatId chatId: String, participantId: String, body: ININTransferRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsChatsChatIdParticipantsParticipantIdReplaceWithRequestBuilder(chatId: chatId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Replace this participant with the specified user and/or address
     - POST /api/v2/conversations/chats/{chatId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter chatId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsChatsChatIdParticipantsParticipantIdReplaceWithRequestBuilder(chatId chatId: String, participantId: String, body: ININTransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/chats/{chatId}/participants/{participantId}/replace"
        path = path.stringByReplacingOccurrencesOfString("{chatId}", withString: "\(chatId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a new callback for the specified participant on the conversation.
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsConversationIdParticipantsParticipantIdCallbacks(conversationId conversationId: String, participantId: String, body: ININCreateCallbackCommand? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsConversationIdParticipantsParticipantIdCallbacksWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Create a new callback for the specified participant on the conversation.
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/callbacks
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsConversationIdParticipantsParticipantIdCallbacksWithRequestBuilder(conversationId conversationId: String, participantId: String, body: ININCreateCallbackCommand? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/callbacks"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace this participant with the specified user and/or address
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsConversationIdParticipantsParticipantIdReplace(conversationId conversationId: String, participantId: String, body: ININTransferRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsConversationIdParticipantsParticipantIdReplaceWithRequestBuilder(conversationId: conversationId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Replace this participant with the specified user and/or address
     - POST /api/v2/conversations/{conversationId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter conversationId: (path) conversation ID 
     - parameter participantId: (path) participant ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsConversationIdParticipantsParticipantIdReplaceWithRequestBuilder(conversationId conversationId: String, participantId: String, body: ININTransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/{conversationId}/participants/{participantId}/replace"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send an email reply
     
     - parameter emailId: (path)  
     - parameter body: (body) Reply (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsEmailsEmailIdMessages(emailId emailId: String, body: ININEmailMessage? = nil, completion: ((data: ININEmailMessage?, error: ErrorType?) -> Void)) {
        postConversationsEmailsEmailIdMessagesWithRequestBuilder(emailId: emailId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Send an email reply
     - POST /api/v2/conversations/emails/{emailId}/messages
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "htmlBody" : "aeiou",
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "from" : "",
  "textBody" : "aeiou",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter emailId: (path)  
     - parameter body: (body) Reply (optional)

     - returns: RequestBuilder<ININEmailMessage> 
     */
    public class func postConversationsEmailsEmailIdMessagesWithRequestBuilder(emailId emailId: String, body: ININEmailMessage? = nil) -> RequestBuilder<ININEmailMessage> {
        var path = "/api/v2/conversations/emails/{emailId}/messages"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailMessage>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace this participant with the specified user and/or address
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsEmailsEmailIdParticipantsParticipantIdReplace(emailId emailId: String, participantId: String, body: ININTransferRequest? = nil, completion: ((error: ErrorType?) -> Void)) {
        postConversationsEmailsEmailIdParticipantsParticipantIdReplaceWithRequestBuilder(emailId: emailId, participantId: participantId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Replace this participant with the specified user and/or address
     - POST /api/v2/conversations/emails/{emailId}/participants/{participantId}/replace
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter emailId: (path)  
     - parameter participantId: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postConversationsEmailsEmailIdParticipantsParticipantIdReplaceWithRequestBuilder(emailId emailId: String, participantId: String, body: ININTransferRequest? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/conversations/emails/{emailId}/participants/{participantId}/replace"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{participantId}", withString: "\(participantId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create Fax Conversation
     
     - parameter body: (body) Fax (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postConversationsFaxes(body body: ININFaxSendRequest? = nil, completion: ((data: ININFaxSendResponse?, error: ErrorType?) -> Void)) {
        postConversationsFaxesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create Fax Conversation
     - POST /api/v2/conversations/faxes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "uploadMethodType" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "uploadDestinationUri" : "aeiou"
}}]
     
     - parameter body: (body) Fax (optional)

     - returns: RequestBuilder<ININFaxSendResponse> 
     */
    public class func postConversationsFaxesWithRequestBuilder(body body: ININFaxSendRequest? = nil) -> RequestBuilder<ININFaxSendResponse> {
        let path = "/api/v2/conversations/faxes"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININFaxSendResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update conversation draft reply
     
     - parameter emailId: (path)  
     - parameter body: (body) Draft (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putConversationsEmailsEmailIdMessagesDraft(emailId emailId: String, body: ININEmailMessage? = nil, completion: ((data: ININEmailMessage?, error: ErrorType?) -> Void)) {
        putConversationsEmailsEmailIdMessagesDraftWithRequestBuilder(emailId: emailId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update conversation draft reply
     - PUT /api/v2/conversations/emails/{emailId}/messages/draft
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "cc" : [ "" ],
  "bcc" : [ "" ],
  "attachments" : [ {
    "contentUri" : "aeiou",
    "name" : "aeiou",
    "contentLength" : 123,
    "attachmentId" : "aeiou",
    "contentType" : "aeiou"
  } ],
  "htmlBody" : "aeiou",
  "subject" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "from" : "",
  "textBody" : "aeiou",
  "id" : "aeiou",
  "to" : [ {
    "name" : "aeiou",
    "email" : "aeiou"
  } ],
  "time" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter emailId: (path)  
     - parameter body: (body) Draft (optional)

     - returns: RequestBuilder<ININEmailMessage> 
     */
    public class func putConversationsEmailsEmailIdMessagesDraftWithRequestBuilder(emailId emailId: String, body: ININEmailMessage? = nil) -> RequestBuilder<ININEmailMessage> {
        var path = "/api/v2/conversations/emails/{emailId}/messages/draft"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailMessage>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
