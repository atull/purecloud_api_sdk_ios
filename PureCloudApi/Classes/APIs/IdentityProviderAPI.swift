//
// IdentityProviderAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class IdentityProviderAPI: APIBase {
    /**
     Delete ADFS Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersAdfs(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersAdfsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete ADFS Identity Provider
     - DELETE /api/v2/identityproviders/adfs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersAdfsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Customer Interaction Center (CIC) Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersCic(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersCicWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete Customer Interaction Center (CIC) Identity Provider
     - DELETE /api/v2/identityproviders/cic
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersCicWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Okta Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersOkta(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersOktaWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete Okta Identity Provider
     - DELETE /api/v2/identityproviders/okta
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersOktaWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete OneLogin Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersOnelogin(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersOneloginWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete OneLogin Identity Provider
     - DELETE /api/v2/identityproviders/onelogin
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersOneloginWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an identity provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersProviderId(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersProviderIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an identity provider
     - DELETE /api/v2/identityproviders/{providerId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersProviderIdWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/{providerId}"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete PureCloud Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersPurecloud(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersPurecloudWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete PureCloud Identity Provider
     - DELETE /api/v2/identityproviders/purecloud
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersPurecloudWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Salesforce Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteIdentityprovidersSalesforce(completion: ((error: ErrorType?) -> Void)) {
        deleteIdentityprovidersSalesforceWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete Salesforce Identity Provider
     - DELETE /api/v2/identityproviders/salesforce
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth

     - returns: RequestBuilder<Void> 
     */
    public class func deleteIdentityprovidersSalesforceWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     The list of identity providers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityproviders(completion: ((data: ININOAuthProviderEntityListing?, error: ErrorType?) -> Void)) {
        getIdentityprovidersWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     The list of identity providers
     - GET /api/v2/identityproviders
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "disabled" : true,
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININOAuthProviderEntityListing> 
     */
    public class func getIdentityprovidersWithRequestBuilder() -> RequestBuilder<ININOAuthProviderEntityListing> {
        let path = "/api/v2/identityproviders"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOAuthProviderEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get ADFS Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersAdfs(completion: ((data: ININADFS?, error: ErrorType?) -> Void)) {
        getIdentityprovidersAdfsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get ADFS Identity Provider
     - GET /api/v2/identityproviders/adfs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "relyingPartyIdentifier" : "aeiou",
  "issuerURI" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "certificate" : "aeiou",
  "ssoTargetURI" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININADFS> 
     */
    public class func getIdentityprovidersAdfsWithRequestBuilder() -> RequestBuilder<ININADFS> {
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININADFS>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Customer Interaction Center (CIC) Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersCic(completion: ((data: ININCustomerInteractionCenter?, error: ErrorType?) -> Void)) {
        getIdentityprovidersCicWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Customer Interaction Center (CIC) Identity Provider
     - GET /api/v2/identityproviders/cic
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "certificate" : "aeiou",
  "ssoTargetURI" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININCustomerInteractionCenter> 
     */
    public class func getIdentityprovidersCicWithRequestBuilder() -> RequestBuilder<ININCustomerInteractionCenter> {
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCustomerInteractionCenter>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Okta Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersOkta(completion: ((data: ININOkta?, error: ErrorType?) -> Void)) {
        getIdentityprovidersOktaWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Okta Identity Provider
     - GET /api/v2/identityproviders/okta
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "certificate" : "aeiou",
  "ssoTargetURI" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININOkta> 
     */
    public class func getIdentityprovidersOktaWithRequestBuilder() -> RequestBuilder<ININOkta> {
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOkta>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get OneLogin Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersOnelogin(completion: ((data: ININOneLogin?, error: ErrorType?) -> Void)) {
        getIdentityprovidersOneloginWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get OneLogin Identity Provider
     - GET /api/v2/identityproviders/onelogin
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "certificate" : "aeiou",
  "ssoTargetURI" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININOneLogin> 
     */
    public class func getIdentityprovidersOneloginWithRequestBuilder() -> RequestBuilder<ININOneLogin> {
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOneLogin>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an identity provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersProviderId(completion: ((data: ININOAuthProvider?, error: ErrorType?) -> Void)) {
        getIdentityprovidersProviderIdWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an identity provider
     - GET /api/v2/identityproviders/{providerId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININOAuthProvider> 
     */
    public class func getIdentityprovidersProviderIdWithRequestBuilder() -> RequestBuilder<ININOAuthProvider> {
        let path = "/api/v2/identityproviders/{providerId}"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOAuthProvider>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get PureCloud Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersPurecloud(completion: ((data: ININPureCloud?, error: ErrorType?) -> Void)) {
        getIdentityprovidersPurecloudWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get PureCloud Identity Provider
     - GET /api/v2/identityproviders/purecloud
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININPureCloud> 
     */
    public class func getIdentityprovidersPurecloudWithRequestBuilder() -> RequestBuilder<ININPureCloud> {
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPureCloud>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Salesforce Identity Provider
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIdentityprovidersSalesforce(completion: ((data: ININSalesforce?, error: ErrorType?) -> Void)) {
        getIdentityprovidersSalesforceWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Salesforce Identity Provider
     - GET /api/v2/identityproviders/salesforce
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "issuerURI" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "certificate" : "aeiou",
  "ssoTargetURI" : "aeiou",
  "disabled" : true,
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININSalesforce> 
     */
    public class func getIdentityprovidersSalesforceWithRequestBuilder() -> RequestBuilder<ININSalesforce> {
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININSalesforce>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create ADFS Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersAdfs(body body: ININADFS? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersAdfsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create ADFS Identity Provider
     - PUT /api/v2/identityproviders/adfs
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersAdfsWithRequestBuilder(body body: ININADFS? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/adfs"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create Customer Interaction Center (CIC) Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersCic(body body: ININCustomerInteractionCenter? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersCicWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create Customer Interaction Center (CIC) Identity Provider
     - PUT /api/v2/identityproviders/cic
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersCicWithRequestBuilder(body body: ININCustomerInteractionCenter? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/cic"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create Okta Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersOkta(body body: ININOkta? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersOktaWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create Okta Identity Provider
     - PUT /api/v2/identityproviders/okta
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersOktaWithRequestBuilder(body body: ININOkta? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/okta"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create OneLogin Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersOnelogin(body body: ININOneLogin? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersOneloginWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create OneLogin Identity Provider
     - PUT /api/v2/identityproviders/onelogin
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersOneloginWithRequestBuilder(body body: ININOneLogin? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/onelogin"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an identity provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersProviderId(body body: ININOAuthProvider? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersProviderIdWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update an identity provider
     - PUT /api/v2/identityproviders/{providerId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersProviderIdWithRequestBuilder(body body: ININOAuthProvider? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/{providerId}"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create PureCloud Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersPurecloud(body body: ININPureCloud? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersPurecloudWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create PureCloud Identity Provider
     - PUT /api/v2/identityproviders/purecloud
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersPurecloudWithRequestBuilder(body body: ININPureCloud? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/purecloud"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update/Create Salesforce Identity Provider
     
     - parameter body: (body) Provider (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putIdentityprovidersSalesforce(body body: ININSalesforce? = nil, completion: ((error: ErrorType?) -> Void)) {
        putIdentityprovidersSalesforceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update/Create Salesforce Identity Provider
     - PUT /api/v2/identityproviders/salesforce
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter body: (body) Provider (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func putIdentityprovidersSalesforceWithRequestBuilder(body body: ININSalesforce? = nil) -> RequestBuilder<Void> {
        let path = "/api/v2/identityproviders/salesforce"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
