//
// ININAnalyticsQueryPredicate.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class ININAnalyticsQueryPredicate: JSONEncodable {
    public enum ININType: String { 
        case Dimension = "dimension"
        case Property = "property"
        case Metric = "metric"
    }
    public enum ININDimension: String { 
        case Conversationid = "conversationId"
        case Sessionid = "sessionId"
        case Mediatype = "mediaType"
        case Queueid = "queueId"
        case Userid = "userId"
        case Participantid = "participantId"
        case Participantname = "participantName"
        case Direction = "direction"
        case Wrapupcode = "wrapUpCode"
        case Wrapupnote = "wrapUpNote"
        case Interactiontype = "interactionType"
        case Requestedroutingskillid = "requestedRoutingSkillId"
        case Requestedlanguageid = "requestedLanguageId"
        case Purpose = "purpose"
        case Participanttype = "participantType"
        case Segmenttype = "segmentType"
        case Disconnecttype = "disconnectType"
        case Errorcode = "errorCode"
        case Stationid = "stationId"
        case Edgeid = "edgeId"
        case Dnis = "dnis"
        case Ani = "ani"
        case Outboundcampaignid = "outboundCampaignId"
        case Outboundcontactid = "outboundContactId"
        case Outboundcontactlistid = "outboundContactListId"
        case Monitoredparticipantid = "monitoredParticipantId"
        case Sourcesessionid = "sourceSessionId"
        case Destinationsessionid = "destinationSessionId"
        case Sourceconversationid = "sourceConversationId"
        case Destinationconversationid = "destinationConversationId"
        case Remotenamedisplayable = "remoteNameDisplayable"
        case Sipresponsecode = "sipResponseCode"
        case Q850responsecode = "q850ResponseCode"
        case Conference = "conference"
        case Groupid = "groupId"
        case Roomid = "roomId"
        case Addressfrom = "addressFrom"
        case Addressto = "addressTo"
        case Peerid = "peerId"
        case Scriptid = "scriptId"
        case Evaluationid = "evaluationId"
        case Evaluatorid = "evaluatorId"
        case Contextid = "contextId"
        case Formid = "formId"
        case Formname = "formName"
        case Eventtime = "eventTime"
    }
    public enum ININPropertyType: String { 
        case Bool = "bool"
        case Integer = "integer"
        case Real = "real"
        case Date = "date"
        case String = "string"
        case Uuid = "uuid"
    }
    public enum ININMetric: String { 
        case Tsegmentduration = "tSegmentDuration"
        case Ototalcriticalscore = "oTotalCriticalScore"
        case Ototalscore = "oTotalScore"
        case Nevaluations = "nEvaluations"
        case Tabandon = "tAbandon"
        case Tivr = "tIvr"
        case Tanswered = "tAnswered"
        case Tacd = "tAcd"
        case Ttalk = "tTalk"
        case Theld = "tHeld"
        case Ttalkcomplete = "tTalkComplete"
        case Theldcomplete = "tHeldComplete"
        case Tacw = "tAcw"
        case Thandle = "tHandle"
        case Twait = "tWait"
        case Tagentroutingstatus = "tAgentRoutingStatus"
        case Torganizationpresence = "tOrganizationPresence"
        case Tsystempresence = "tSystemPresence"
        case Tuserresponsetime = "tUserResponseTime"
        case Tagentresponsetime = "tAgentResponseTime"
        case Noffered = "nOffered"
        case Noversla = "nOverSla"
        case Ntransferred = "nTransferred"
        case Noutboundattempted = "nOutboundAttempted"
        case Noutboundconnected = "nOutboundConnected"
        case Noutboundabandoned = "nOutboundAbandoned"
        case Nerror = "nError"
        case Oservicetarget = "oServiceTarget"
        case Oservicelevel = "oServiceLevel"
        case Tactive = "tActive"
        case Tinactive = "tInactive"
        case Oactiveusers = "oActiveUsers"
        case Omemberusers = "oMemberUsers"
        case Oactivequeues = "oActiveQueues"
        case Omemberqueues = "oMemberQueues"
        case Ointeracting = "oInteracting"
        case Owaiting = "oWaiting"
    }
    public enum ININOperator: String { 
        case Matches = "matches"
        case Exists = "exists"
        case Notexists = "notExists"
    }
    /** Optional type, can usually be inferred */
    public var type: ININType?
    /** Left hand side for dimension predicates */
    public var dimension: ININDimension?
    /** Left hand side for property predicates */
    public var propertyType: ININPropertyType?
    /** Left hand side for property predicates */
    public var property: String?
    /** Left hand side for metric predicates */
    public var metric: ININMetric?
    /** Optional operator, default is matches */
    public var _operator: ININOperator?
    /** Right hand side for dimension, property, or metric predicates */
    public var value: String?
    /** Right hand side for property or metric predicates */
    public var range: ININNumericRange?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["type"] = self.type?.rawValue
        nillableDictionary["dimension"] = self.dimension?.rawValue
        nillableDictionary["propertyType"] = self.propertyType?.rawValue
        nillableDictionary["property"] = self.property
        nillableDictionary["metric"] = self.metric?.rawValue
        nillableDictionary["operator"] = self._operator?.rawValue
        nillableDictionary["value"] = self.value
        nillableDictionary["range"] = self.range?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
