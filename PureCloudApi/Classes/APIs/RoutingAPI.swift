//
// RoutingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class RoutingAPI: APIBase {
    /**
     Delete a domain
     
     - parameter domainId: (path) domain ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingEmailDomainsDomainId(domainId domainId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingEmailDomainsDomainIdWithRequestBuilder(domainId: domainId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a domain
     - DELETE /api/v2/routing/email/domains/{domainId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter domainId: (path) domain ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingEmailDomainsDomainIdWithRequestBuilder(domainId domainId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/email/domains/{domainId}"
        path = path.stringByReplacingOccurrencesOfString("{domainId}", withString: "\(domainId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingEmailDomainsDomainnameRoutesRouteId(domainName domainName: String, routeId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName: domainName, routeId: routeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a route
     - DELETE /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName domainName: String, routeId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{domainName}", withString: "\(domainName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{routeId}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingQueuesQueueId(queueId queueId: String, forceDelete: Bool? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingQueuesQueueIdWithRequestBuilder(queueId: queueId, forceDelete: forceDelete).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a queue
     - DELETE /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter queueId: (path) Queue ID 
     - parameter forceDelete: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingQueuesQueueIdWithRequestBuilder(queueId queueId: String, forceDelete: Bool? = nil) -> RequestBuilder<String> {
        var path = "/api/v2/routing/queues/{queueId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "forceDelete": forceDelete
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete queue member
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingQueuesQueueIdUsersMemberId(queueId queueId: String, memberId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingQueuesQueueIdUsersMemberIdWithRequestBuilder(queueId: queueId, memberId: memberId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete queue member
     - DELETE /api/v2/routing/queues/{queueId}/users/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingQueuesQueueIdUsersMemberIdWithRequestBuilder(queueId queueId: String, memberId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{memberId}", withString: "\(memberId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete a wrap-up code from a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingQueuesQueueIdWrapupcodesCodeId(queueId queueId: String, codeId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingQueuesQueueIdWrapupcodesCodeIdWithRequestBuilder(queueId: queueId, codeId: codeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a wrap-up code from a queue
     - DELETE /api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingQueuesQueueIdWrapupcodesCodeIdWithRequestBuilder(queueId queueId: String, codeId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingSkillsSkillId(skillId skillId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingSkillsSkillIdWithRequestBuilder(skillId: skillId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete Routing Skill
     - DELETE /api/v2/routing/skills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingSkillsSkillIdWithRequestBuilder(skillId skillId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/skills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete utilization settings and revert to system defaults.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingUtilization(completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingUtilizationWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete utilization settings and revert to system defaults.
     - DELETE /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingUtilizationWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteRoutingWrapupcodesCodeId(codeId codeId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteRoutingWrapupcodesCodeIdWithRequestBuilder(codeId: codeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete wrap-up code
     - DELETE /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteRoutingWrapupcodesCodeIdWithRequestBuilder(codeId codeId: String) -> RequestBuilder<String> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdRoutingskillsSkillId(userId userId: String, skillId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId: userId, skillId: skillId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove routing skill from user
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  

     - returns: RequestBuilder<String> 
     */
    public class func deleteUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId userId: String, skillId: String) -> RequestBuilder<String> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get domains
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingEmailDomains(completion: ((data: ININInboundDomainEntityListing?, error: ErrorType?) -> Void)) {
        getRoutingEmailDomainsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get domains
     - GET /api/v2/routing/email/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "subDomain" : true,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "mxRecordStatus" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININInboundDomainEntityListing> 
     */
    public class func getRoutingEmailDomainsWithRequestBuilder() -> RequestBuilder<ININInboundDomainEntityListing> {
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundDomainEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get routes
     
     - parameter domainName: (path) email domain 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingEmailDomainsDomainnameRoutes(domainName domainName: String, completion: ((data: ININInboundRouteEntityListing?, error: ErrorType?) -> Void)) {
        getRoutingEmailDomainsDomainnameRoutesWithRequestBuilder(domainName: domainName).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get routes
     - GET /api/v2/routing/email/domains/{domainName}/routes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "skills" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "pattern" : "aeiou",
    "fromName" : "aeiou",
    "language" : "",
    "id" : "aeiou",
    "priority" : 123,
    "queue" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "fromEmail" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter domainName: (path) email domain 

     - returns: RequestBuilder<ININInboundRouteEntityListing> 
     */
    public class func getRoutingEmailDomainsDomainnameRoutesWithRequestBuilder(domainName domainName: String) -> RequestBuilder<ININInboundRouteEntityListing> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        path = path.stringByReplacingOccurrencesOfString("{domainName}", withString: "\(domainName)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundRouteEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingEmailDomainsDomainnameRoutesRouteId(domainName domainName: String, routeId: String, completion: ((data: ININInboundRoute?, error: ErrorType?) -> Void)) {
        getRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName: domainName, routeId: routeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a route
     - GET /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "skills" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : "aeiou",
  "fromName" : "aeiou",
  "language" : "",
  "id" : "aeiou",
  "priority" : 123,
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "fromEmail" : "aeiou"
}}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 

     - returns: RequestBuilder<ININInboundRoute> 
     */
    public class func getRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName domainName: String, routeId: String) -> RequestBuilder<ININInboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{domainName}", withString: "\(domainName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{routeId}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundRoute>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get email setup
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingEmailSetup(completion: ((data: ININEmailSetup?, error: ErrorType?) -> Void)) {
        getRoutingEmailSetupWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get email setup
     - GET /api/v2/routing/email/setup
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "rootDomain" : "aeiou"
}}]

     - returns: RequestBuilder<ININEmailSetup> 
     */
    public class func getRoutingEmailSetupWithRequestBuilder() -> RequestBuilder<ININEmailSetup> {
        let path = "/api/v2/routing/email/setup"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEmailSetup>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get list of queues.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)
     - parameter active: (query) Active (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingQueues(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, name: String? = nil, active: Bool? = nil, completion: ((data: ININQueueEntityListing?, error: ErrorType?) -> Void)) {
        getRoutingQueuesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, name: name, active: active).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of queues.
     - GET /api/v2/routing/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter name: (query) Name (optional)
     - parameter active: (query) Active (optional)

     - returns: RequestBuilder<ININQueueEntityListing> 
     */
    public class func getRoutingQueuesWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, name: String? = nil, active: Bool? = nil) -> RequestBuilder<ININQueueEntityListing> {
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "name": name,
            "active": active
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueueEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get details about this queue.
     
     - parameter queueId: (path) Queue ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingQueuesQueueId(queueId queueId: String, completion: ((data: ININQueue?, error: ErrorType?) -> Void)) {
        getRoutingQueuesQueueIdWithRequestBuilder(queueId: queueId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get details about this queue.
     - GET /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createdByApp" : "aeiou",
  "version" : 123,
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedByApp" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 

     - returns: RequestBuilder<ININQueue> 
     */
    public class func getRoutingQueuesQueueIdWithRequestBuilder(queueId queueId: String) -> RequestBuilder<ININQueue> {
        var path = "/api/v2/routing/queues/{queueId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueue>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Estimated Wait Time
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingQueuesQueueIdEstimatedwaittime(queueId queueId: String, conversationId: String? = nil, completion: ((data: ININEstimatedWaitTimePredictions?, error: ErrorType?) -> Void)) {
        getRoutingQueuesQueueIdEstimatedwaittimeWithRequestBuilder(queueId: queueId, conversationId: conversationId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Estimated Wait Time
     - GET /api/v2/routing/queues/{queueId}/estimatedwaittime
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "formula" : "aeiou",
    "estimatedWaitTimeSeconds" : 123
  } ]
}}]
     
     - parameter queueId: (path) queueId 
     - parameter conversationId: (query) conversationId (optional)

     - returns: RequestBuilder<ININEstimatedWaitTimePredictions> 
     */
    public class func getRoutingQueuesQueueIdEstimatedwaittimeWithRequestBuilder(queueId queueId: String, conversationId: String? = nil) -> RequestBuilder<ININEstimatedWaitTimePredictions> {
        var path = "/api/v2/routing/queues/{queueId}/estimatedwaittime"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "conversationId": conversationId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEstimatedWaitTimePredictions>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the members of this queue
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter expand: (query) expand (optional)
     - parameter directMembers: (query) Only get users that are direct members of the queue (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingQueuesQueueIdUsers(queueId queueId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: String? = nil, directMembers: Bool? = nil, completion: ((data: ININQueueMember?, error: ErrorType?) -> Void)) {
        getRoutingQueuesQueueIdUsersWithRequestBuilder(queueId: queueId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, directMembers: directMembers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the members of this queue
     - GET /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "joined" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "memberBy" : "aeiou",
  "routingStatus" : "",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "ringNumber" : 123
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter expand: (query) expand (optional)
     - parameter directMembers: (query) Only get users that are direct members of the queue (optional, default to false)

     - returns: RequestBuilder<ININQueueMember> 
     */
    public class func getRoutingQueuesQueueIdUsersWithRequestBuilder(queueId queueId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: String? = nil, directMembers: Bool? = nil) -> RequestBuilder<ININQueueMember> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "directMembers": directMembers
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueueMember>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the wrap-up codes for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingQueuesQueueIdWrapupcodes(queueId queueId: String, codeId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getRoutingQueuesQueueIdWrapupcodesWithRequestBuilder(queueId: queueId, codeId: codeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the wrap-up codes for a queue
     - GET /api/v2/routing/queues/{queueId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getRoutingQueuesQueueIdWrapupcodesWithRequestBuilder(queueId queueId: String, codeId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the list of routing skills.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingSkills(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, completion: ((data: ININSkillEntityListing?, error: ErrorType?) -> Void)) {
        getRoutingSkillsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of routing skills.
     - GET /api/v2/routing/skills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "state" : "aeiou",
    "version" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ININSkillEntityListing> 
     */
    public class func getRoutingSkillsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil) -> RequestBuilder<ININSkillEntityListing> {
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININSkillEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get Routing Skill
     
     - parameter skillId: (path) Skill ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingSkillsSkillId(skillId skillId: String, completion: ((data: ININRoutingSkill?, error: ErrorType?) -> Void)) {
        getRoutingSkillsSkillIdWithRequestBuilder(skillId: skillId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Routing Skill
     - GET /api/v2/routing/skills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou"
}}]
     
     - parameter skillId: (path) Skill ID 

     - returns: RequestBuilder<ININRoutingSkill> 
     */
    public class func getRoutingSkillsSkillIdWithRequestBuilder(skillId skillId: String) -> RequestBuilder<ININRoutingSkill> {
        var path = "/api/v2/routing/skills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the utilization settings.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingUtilization(completion: ((data: ININUtilization?, error: ErrorType?) -> Void)) {
        getRoutingUtilizationWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the utilization settings.
     - GET /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]

     - returns: RequestBuilder<ININUtilization> 
     */
    public class func getRoutingUtilizationWithRequestBuilder() -> RequestBuilder<ININUtilization> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUtilization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get list of wrapup codes.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingWrapupcodes(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, completion: ((data: ININWrapupCodeEntityListing?, error: ErrorType?) -> Void)) {
        getRoutingWrapupcodesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get list of wrapup codes.
     - GET /api/v2/routing/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "createdBy" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "modifiedBy" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortBy: (query) Sort by (optional, default to name)

     - returns: RequestBuilder<ININWrapupCodeEntityListing> 
     */
    public class func getRoutingWrapupcodesWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil) -> RequestBuilder<ININWrapupCodeEntityListing> {
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCodeEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get details about this wrap-up code.
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRoutingWrapupcodesCodeId(codeId codeId: String, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        getRoutingWrapupcodesCodeIdWithRequestBuilder(codeId: codeId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get details about this wrap-up code.
     - GET /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter codeId: (path) Wrapup Code ID 

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func getRoutingWrapupcodesCodeIdWithRequestBuilder(codeId codeId: String) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

    enum for parameter sortOrder
    */
    public enum ININSortOrder_getUsersUserIdRoutingskills: String { 
        case Ascending = "ascending"
        case Descending = "descending"
    }

    /**
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdRoutingskills(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getUsersUserIdRoutingskills? = nil, completion: ((data: ININUserSkillEntityListing?, error: ErrorType?) -> Void)) {
        getUsersUserIdRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List routing skills for user
     - GET /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<ININUserSkillEntityListing> 
     */
    public class func getUsersUserIdRoutingskillsWithRequestBuilder(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getUsersUserIdRoutingskills? = nil) -> RequestBuilder<ININUserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortOrder": sortOrder?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserSkillEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Join or unjoin a set of users for a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchRoutingQueuesQueueIdUsers(queueId queueId: String, body: [ININQueueMember]? = nil, completion: ((data: ININQueueMember?, error: ErrorType?) -> Void)) {
        patchRoutingQueuesQueueIdUsersWithRequestBuilder(queueId: queueId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Join or unjoin a set of users for a queue
     - PATCH /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "joined" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "memberBy" : "aeiou",
  "routingStatus" : "",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "ringNumber" : 123
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members (optional)

     - returns: RequestBuilder<ININQueueMember> 
     */
    public class func patchRoutingQueuesQueueIdUsersWithRequestBuilder(queueId queueId: String, body: [ININQueueMember]? = nil) -> RequestBuilder<ININQueueMember> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueueMember>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the ring number of joined status for a User in a Queue
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchRoutingQueuesQueueIdUsersMemberId(queueId queueId: String, memberId: String, body: ININQueueMember? = nil, completion: ((data: ININQueueMember?, error: ErrorType?) -> Void)) {
        patchRoutingQueuesQueueIdUsersMemberIdWithRequestBuilder(queueId: queueId, memberId: memberId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update the ring number of joined status for a User in a Queue
     - PATCH /api/v2/routing/queues/{queueId}/users/{memberId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "joined" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "memberBy" : "aeiou",
  "routingStatus" : "",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "ringNumber" : 123
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter memberId: (path) Member ID 
     - parameter body: (body) Queue Member (optional)

     - returns: RequestBuilder<ININQueueMember> 
     */
    public class func patchRoutingQueuesQueueIdUsersMemberIdWithRequestBuilder(queueId queueId: String, memberId: String, body: ININQueueMember? = nil) -> RequestBuilder<ININQueueMember> {
        var path = "/api/v2/routing/queues/{queueId}/users/{memberId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{memberId}", withString: "\(memberId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueueMember>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for queue observations
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsQueuesObservationsQuery(body body: ININObservationQuery? = nil, completion: ((data: ININObservationQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsQueuesObservationsQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for queue observations
     - POST /api/v2/analytics/queues/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou"
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININObservationQueryResponse> 
     */
    public class func postAnalyticsQueuesObservationsQueryWithRequestBuilder(body body: ININObservationQuery? = nil) -> RequestBuilder<ININObservationQueryResponse> {
        let path = "/api/v2/analytics/queues/observations/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININObservationQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a domain
     
     - parameter body: (body) Domain (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingEmailDomains(body body: ININInboundDomain? = nil, completion: ((data: ININInboundDomain?, error: ErrorType?) -> Void)) {
        postRoutingEmailDomainsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a domain
     - POST /api/v2/routing/email/domains
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "subDomain" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "mxRecordStatus" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter body: (body) Domain (optional)

     - returns: RequestBuilder<ININInboundDomain> 
     */
    public class func postRoutingEmailDomainsWithRequestBuilder(body body: ININInboundDomain? = nil) -> RequestBuilder<ININInboundDomain> {
        let path = "/api/v2/routing/email/domains"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundDomain>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a route
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingEmailDomainsDomainnameRoutes(domainName domainName: String, body: ININInboundRoute? = nil, completion: ((data: ININInboundRoute?, error: ErrorType?) -> Void)) {
        postRoutingEmailDomainsDomainnameRoutesWithRequestBuilder(domainName: domainName, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a route
     - POST /api/v2/routing/email/domains/{domainName}/routes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "skills" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : "aeiou",
  "fromName" : "aeiou",
  "language" : "",
  "id" : "aeiou",
  "priority" : 123,
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "fromEmail" : "aeiou"
}}]
     
     - parameter domainName: (path) email domain 
     - parameter body: (body) Route (optional)

     - returns: RequestBuilder<ININInboundRoute> 
     */
    public class func postRoutingEmailDomainsDomainnameRoutesWithRequestBuilder(domainName domainName: String, body: ININInboundRoute? = nil) -> RequestBuilder<ININInboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes"
        path = path.stringByReplacingOccurrencesOfString("{domainName}", withString: "\(domainName)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundRoute>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create queue
     
     - parameter body: (body) Queue (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingQueues(body body: ININQueue? = nil, completion: ((data: ININQueue?, error: ErrorType?) -> Void)) {
        postRoutingQueuesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create queue
     - POST /api/v2/routing/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createdByApp" : "aeiou",
  "version" : 123,
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedByApp" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter body: (body) Queue (optional)

     - returns: RequestBuilder<ININQueue> 
     */
    public class func postRoutingQueuesWithRequestBuilder(body body: ININQueue? = nil) -> RequestBuilder<ININQueue> {
        let path = "/api/v2/routing/queues"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueue>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Bulk add or delete up to 100 queue members
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members (optional)
     - parameter delete: (query) True to delete queue members (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingQueuesQueueIdUsers(queueId queueId: String, body: [ININQueueMember]? = nil, delete: Bool? = nil, completion: ((data: ININQueueMember?, error: ErrorType?) -> Void)) {
        postRoutingQueuesQueueIdUsersWithRequestBuilder(queueId: queueId, body: body, delete: delete).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Bulk add or delete up to 100 queue members
     - POST /api/v2/routing/queues/{queueId}/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "joined" : true,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "memberBy" : "aeiou",
  "routingStatus" : "",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "ringNumber" : 123
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue Members (optional)
     - parameter delete: (query) True to delete queue members (optional, default to false)

     - returns: RequestBuilder<ININQueueMember> 
     */
    public class func postRoutingQueuesQueueIdUsersWithRequestBuilder(queueId queueId: String, body: [ININQueueMember]? = nil, delete: Bool? = nil) -> RequestBuilder<ININQueueMember> {
        var path = "/api/v2/routing/queues/{queueId}/users"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueueMember>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Add up to 100 wrap-up codes to a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingQueuesQueueIdWrapupcodes(queueId queueId: String, codeId: String, body: [ININWrapupCode]? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        postRoutingQueuesQueueIdWrapupcodesWithRequestBuilder(queueId: queueId, codeId: codeId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add up to 100 wrap-up codes to a queue
     - POST /api/v2/routing/queues/{queueId}/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter codeId: (path) Code ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func postRoutingQueuesQueueIdWrapupcodesWithRequestBuilder(queueId queueId: String, codeId: String, body: [ININWrapupCode]? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/routing/queues/{queueId}/wrapupcodes"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create Skill
     
     - parameter body: (body) Skill (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingSkills(body body: ININRoutingSkill? = nil, completion: ((data: ININRoutingSkill?, error: ErrorType?) -> Void)) {
        postRoutingSkillsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create Skill
     - POST /api/v2/routing/skills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "state" : "aeiou",
  "version" : "aeiou"
}}]
     
     - parameter body: (body) Skill (optional)

     - returns: RequestBuilder<ININRoutingSkill> 
     */
    public class func postRoutingSkillsWithRequestBuilder(body body: ININRoutingSkill? = nil) -> RequestBuilder<ININRoutingSkill> {
        let path = "/api/v2/routing/skills"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a wrap-up code
     
     - parameter body: (body) WrapupCode (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postRoutingWrapupcodes(body body: ININWrapupCode? = nil, completion: ((data: ININCallableTimeSet?, error: ErrorType?) -> Void)) {
        postRoutingWrapupcodesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a wrap-up code
     - POST /api/v2/routing/wrapupcodes
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callableTimes" : [ {
    "timeZoneId" : "Africa/Abidjan",
    "timeSlots" : [ {
      "startTime" : "08:00:00",
      "stopTime" : "16:59:59",
      "day" : 1
    } ]
  } ],
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "version" : 123
}}]
     
     - parameter body: (body) WrapupCode (optional)

     - returns: RequestBuilder<ININCallableTimeSet> 
     */
    public class func postRoutingWrapupcodesWithRequestBuilder(body body: ININWrapupCode? = nil) -> RequestBuilder<ININCallableTimeSet> {
        let path = "/api/v2/routing/wrapupcodes"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallableTimeSet>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUsersUserIdRoutingskills(userId userId: String, body: ININUserRoutingSkill? = nil, completion: ((data: ININUserRoutingSkill?, error: ErrorType?) -> Void)) {
        postUsersUserIdRoutingskillsWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add routing skill to user
     - POST /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill (optional)

     - returns: RequestBuilder<ININUserRoutingSkill> 
     */
    public class func postUsersUserIdRoutingskillsWithRequestBuilder(userId userId: String, body: ININUserRoutingSkill? = nil) -> RequestBuilder<ININUserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a route
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRoutingEmailDomainsDomainnameRoutesRouteId(domainName domainName: String, routeId: String, body: ININInboundRoute? = nil, completion: ((data: ININInboundRoute?, error: ErrorType?) -> Void)) {
        putRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName: domainName, routeId: routeId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a route
     - PUT /api/v2/routing/email/domains/{domainName}/routes/{routeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "skills" : [ "" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "pattern" : "aeiou",
  "fromName" : "aeiou",
  "language" : "",
  "id" : "aeiou",
  "priority" : 123,
  "queue" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "fromEmail" : "aeiou"
}}]
     
     - parameter domainName: (path) email domain 
     - parameter routeId: (path) route ID 
     - parameter body: (body) Route (optional)

     - returns: RequestBuilder<ININInboundRoute> 
     */
    public class func putRoutingEmailDomainsDomainnameRoutesRouteIdWithRequestBuilder(domainName domainName: String, routeId: String, body: ININInboundRoute? = nil) -> RequestBuilder<ININInboundRoute> {
        var path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}"
        path = path.stringByReplacingOccurrencesOfString("{domainName}", withString: "\(domainName)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{routeId}", withString: "\(routeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInboundRoute>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a queue
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRoutingQueuesQueueId(queueId queueId: String, body: ININQueue? = nil, completion: ((data: ININQueue?, error: ErrorType?) -> Void)) {
        putRoutingQueuesQueueIdWithRequestBuilder(queueId: queueId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a queue
     - PUT /api/v2/routing/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createdByApp" : "aeiou",
  "version" : 123,
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedByApp" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter body: (body) Queue (optional)

     - returns: RequestBuilder<ININQueue> 
     */
    public class func putRoutingQueuesQueueIdWithRequestBuilder(queueId queueId: String, body: ININQueue? = nil) -> RequestBuilder<ININQueue> {
        var path = "/api/v2/routing/queues/{queueId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQueue>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the utilization settings.
     
     - parameter body: (body) utilization (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRoutingUtilization(body body: ININUtilization? = nil, completion: ((data: ININUtilization?, error: ErrorType?) -> Void)) {
        putRoutingUtilizationWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update the utilization settings.
     - PUT /api/v2/routing/utilization
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "utilization" : {
    "key" : {
      "interruptableMediaTypes" : [ "aeiou" ],
      "includeNonAcd" : true,
      "maximumCapacity" : 123
    }
  }
}}]
     
     - parameter body: (body) utilization (optional)

     - returns: RequestBuilder<ININUtilization> 
     */
    public class func putRoutingUtilizationWithRequestBuilder(body body: ININUtilization? = nil) -> RequestBuilder<ININUtilization> {
        let path = "/api/v2/routing/utilization"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUtilization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update wrap-up code
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putRoutingWrapupcodesCodeId(codeId codeId: String, body: ININWrapupCode? = nil, completion: ((data: ININWrapupCode?, error: ErrorType?) -> Void)) {
        putRoutingWrapupcodesCodeIdWithRequestBuilder(codeId: codeId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update wrap-up code
     - PUT /api/v2/routing/wrapupcodes/{codeId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "createdBy" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "modifiedBy" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter codeId: (path) Wrapup Code ID 
     - parameter body: (body) WrapupCode (optional)

     - returns: RequestBuilder<ININWrapupCode> 
     */
    public class func putRoutingWrapupcodesCodeIdWithRequestBuilder(codeId codeId: String, body: ININWrapupCode? = nil) -> RequestBuilder<ININWrapupCode> {
        var path = "/api/v2/routing/wrapupcodes/{codeId}"
        path = path.stringByReplacingOccurrencesOfString("{codeId}", withString: "\(codeId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININWrapupCode>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter body: (body) Skill (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdRoutingskillsSkillId(userId userId: String, skillId: String, body: ININUserRoutingSkill? = nil, completion: ((data: ININUserRoutingSkill?, error: ErrorType?) -> Void)) {
        putUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId: userId, skillId: skillId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update routing skill proficiency or state.
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter body: (body) Skill (optional)

     - returns: RequestBuilder<ININUserRoutingSkill> 
     */
    public class func putUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId userId: String, skillId: String, body: ININUserRoutingSkill? = nil) -> RequestBuilder<ININUserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
