//
// ININFlowDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details about the current state of a Flow Instance */
public class ININFlowDetails: JSONEncodable {
    public enum ININLaunchType: String { 
        case Unknown = "UNKNOWN"
        case Normal = "NORMAL"
        case Test = "TEST"
        case Automatic = "AUTOMATIC"
    }
    public enum ININStatus: String { 
        case Unknown = "UNKNOWN"
        case Running = "RUNNING"
        case Error = "ERROR"
        case Terminated = "TERMINATED"
        case Completed = "COMPLETED"
    }
    /** The globally unique identifier for the object. */
    public var id: String?
    public var name: String?
    /** The FlowConfigId that was used to launch this flow. */
    public var flowConfigId: ININFlowConfigId?
    /** The time the flow was launched. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var launchTime: NSDate?
    /** The launch mode for this flow instance. */
    public var launchType: ININLaunchType?
    /** The user who launched the flow, if the flow was launched as the result of that user&#39;s action. */
    public var launchedBy: ININUser?
    /** The flow&#39;s running status, which indicates whether the flow is running normally or completed, etc. */
    public var status: ININStatus?
    /** The documents associated with this flow. */
    public var associatedDocuments: [ININAssociatedDocument]?
    /** The time the flow completed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var flowCompletionTime: NSDate?
    /** The completion reason set at the flow completion time, if applicable. */
    public var flowCompletionReason: String?
    /** Additional information if the flow is in error */
    public var flowErrorInfo: ININErrorBody?
    /** The URI for this object */
    public var selfUri: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["name"] = self.name
        nillableDictionary["flowConfigId"] = self.flowConfigId?.encodeToJSON()
        nillableDictionary["launchTime"] = self.launchTime?.encodeToJSON()
        nillableDictionary["launchType"] = self.launchType?.rawValue
        nillableDictionary["launchedBy"] = self.launchedBy?.encodeToJSON()
        nillableDictionary["status"] = self.status?.rawValue
        nillableDictionary["associatedDocuments"] = self.associatedDocuments?.encodeToJSON()
        nillableDictionary["flowCompletionTime"] = self.flowCompletionTime?.encodeToJSON()
        nillableDictionary["flowCompletionReason"] = self.flowCompletionReason
        nillableDictionary["flowErrorInfo"] = self.flowErrorInfo?.encodeToJSON()
        nillableDictionary["selfUri"] = self.selfUri
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
