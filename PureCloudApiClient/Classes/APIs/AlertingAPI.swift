//
// AlertingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AlertingAPI: APIBase {
    /**
     Delete an interaction stats alert
     
     - parameter alertId: (path) Alert ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAlertingInteractionstatsAlertsAlertId(alertId alertId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an interaction stats alert
     - DELETE /api/v2/alerting/interactionstats/alerts/{alertId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter alertId: (path) Alert ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId alertId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/alerting/interactionstats/alerts/{alertId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete an interaction stats rule.
     
     - parameter ruleId: (path) Rule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAlertingInteractionstatsRulesRuleId(ruleId ruleId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId: ruleId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an interaction stats rule.
     - DELETE /api/v2/alerting/interactionstats/rules/{ruleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter ruleId: (path) Rule ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId ruleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/alerting/interactionstats/rules/{ruleId}"
        path = path.stringByReplacingOccurrencesOfString("{ruleId}", withString: "\(ruleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get interaction stats alert list.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertingInteractionstatsAlerts(completion: ((data: ININInteractionStatsAlertContainer?, error: ErrorType?) -> Void)) {
        getAlertingInteractionstatsAlertsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get interaction stats alert list.
     - GET /api/v2/alerting/interactionstats/alerts
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "statistic" : "aeiou",
    "numericRange" : "aeiou",
    "unread" : true,
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "alertTypes" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "mediaType" : "aeiou",
    "dimensionValue" : "aeiou",
    "metric" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "ruleId" : "aeiou",
    "dimension" : "aeiou",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "notificationUsers" : [ {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ],
    "startDate" : "2000-01-23T04:56:07.000+0000",
    "ruleUri" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININInteractionStatsAlertContainer> 
     */
    public class func getAlertingInteractionstatsAlertsWithRequestBuilder() -> RequestBuilder<ININInteractionStatsAlertContainer> {
        let path = "/api/v2/alerting/interactionstats/alerts"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsAlertContainer>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an interaction stats alert
     
     - parameter alertId: (path) Alert ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertingInteractionstatsAlertsAlertId(alertId alertId: String, completion: ((data: ININInteractionStatsAlert?, error: ErrorType?) -> Void)) {
        getAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId: alertId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an interaction stats alert
     - GET /api/v2/alerting/interactionstats/alerts/{alertId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "statistic" : "aeiou",
  "numericRange" : "aeiou",
  "unread" : true,
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "alertTypes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "mediaType" : "aeiou",
  "dimensionValue" : "aeiou",
  "metric" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "ruleId" : "aeiou",
  "dimension" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "notificationUsers" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "startDate" : "2000-01-23T04:56:07.000+0000",
  "ruleUri" : "aeiou"
}}]
     
     - parameter alertId: (path) Alert ID 

     - returns: RequestBuilder<ININInteractionStatsAlert> 
     */
    public class func getAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId alertId: String) -> RequestBuilder<ININInteractionStatsAlert> {
        var path = "/api/v2/alerting/interactionstats/alerts/{alertId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsAlert>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets user unread count of interaction stats alerts.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertingInteractionstatsAlertsUnread(completion: ((data: ININUnreadMetric?, error: ErrorType?) -> Void)) {
        getAlertingInteractionstatsAlertsUnreadWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets user unread count of interaction stats alerts.
     - GET /api/v2/alerting/interactionstats/alerts/unread
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "count" : 123
}}]

     - returns: RequestBuilder<ININUnreadMetric> 
     */
    public class func getAlertingInteractionstatsAlertsUnreadWithRequestBuilder() -> RequestBuilder<ININUnreadMetric> {
        let path = "/api/v2/alerting/interactionstats/alerts/unread"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUnreadMetric>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an interaction stats rule list.
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertingInteractionstatsRules(completion: ((data: ININInteractionStatsRuleContainer?, error: ErrorType?) -> Void)) {
        getAlertingInteractionstatsRulesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an interaction stats rule list.
     - GET /api/v2/alerting/interactionstats/rules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "statistic" : "aeiou",
    "numericRange" : "aeiou",
    "inAlarm" : true,
    "alertTypes" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "mediaType" : "aeiou",
    "enabled" : true,
    "dimensionValue" : "aeiou",
    "metric" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "dimension" : "aeiou",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "notificationUsers" : [ {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININInteractionStatsRuleContainer> 
     */
    public class func getAlertingInteractionstatsRulesWithRequestBuilder() -> RequestBuilder<ININInteractionStatsRuleContainer> {
        let path = "/api/v2/alerting/interactionstats/rules"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsRuleContainer>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get an interaction stats rule.
     
     - parameter ruleId: (path) Rule ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlertingInteractionstatsRulesRuleId(ruleId ruleId: String, completion: ((data: ININInteractionStatsRule?, error: ErrorType?) -> Void)) {
        getAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId: ruleId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an interaction stats rule.
     - GET /api/v2/alerting/interactionstats/rules/{ruleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "statistic" : "aeiou",
  "numericRange" : "aeiou",
  "inAlarm" : true,
  "alertTypes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "mediaType" : "aeiou",
  "enabled" : true,
  "dimensionValue" : "aeiou",
  "metric" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "dimension" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "notificationUsers" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter ruleId: (path) Rule ID 

     - returns: RequestBuilder<ININInteractionStatsRule> 
     */
    public class func getAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId ruleId: String) -> RequestBuilder<ININInteractionStatsRule> {
        var path = "/api/v2/alerting/interactionstats/rules/{ruleId}"
        path = path.stringByReplacingOccurrencesOfString("{ruleId}", withString: "\(ruleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsRule>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an interaction stats rule.
     
     - parameter body: (body) AlertingRule (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAlertingInteractionstatsRules(body body: ININInteractionStatsRule? = nil, completion: ((data: ININInteractionStatsRule?, error: ErrorType?) -> Void)) {
        postAlertingInteractionstatsRulesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an interaction stats rule.
     - POST /api/v2/alerting/interactionstats/rules
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "statistic" : "aeiou",
  "numericRange" : "aeiou",
  "inAlarm" : true,
  "alertTypes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "mediaType" : "aeiou",
  "enabled" : true,
  "dimensionValue" : "aeiou",
  "metric" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "dimension" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "notificationUsers" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter body: (body) AlertingRule (optional)

     - returns: RequestBuilder<ININInteractionStatsRule> 
     */
    public class func postAlertingInteractionstatsRulesWithRequestBuilder(body body: ININInteractionStatsRule? = nil) -> RequestBuilder<ININInteractionStatsRule> {
        let path = "/api/v2/alerting/interactionstats/rules"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsRule>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an interaction stats alert read status
     
     - parameter alertId: (path) Alert ID 
     - parameter body: (body) InteractionStatsAlert (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAlertingInteractionstatsAlertsAlertId(alertId alertId: String, body: ININUnreadStatus? = nil, completion: ((data: ININUnreadStatus?, error: ErrorType?) -> Void)) {
        putAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId: alertId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an interaction stats alert read status
     - PUT /api/v2/alerting/interactionstats/alerts/{alertId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "unread" : true
}}]
     
     - parameter alertId: (path) Alert ID 
     - parameter body: (body) InteractionStatsAlert (optional)

     - returns: RequestBuilder<ININUnreadStatus> 
     */
    public class func putAlertingInteractionstatsAlertsAlertIdWithRequestBuilder(alertId alertId: String, body: ININUnreadStatus? = nil) -> RequestBuilder<ININUnreadStatus> {
        var path = "/api/v2/alerting/interactionstats/alerts/{alertId}"
        path = path.stringByReplacingOccurrencesOfString("{alertId}", withString: "\(alertId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUnreadStatus>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an interaction stats rule
     
     - parameter ruleId: (path) Rule ID 
     - parameter body: (body) AlertingRule (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAlertingInteractionstatsRulesRuleId(ruleId ruleId: String, body: ININInteractionStatsRule? = nil, completion: ((data: ININInteractionStatsRule?, error: ErrorType?) -> Void)) {
        putAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId: ruleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an interaction stats rule
     - PUT /api/v2/alerting/interactionstats/rules/{ruleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "statistic" : "aeiou",
  "numericRange" : "aeiou",
  "inAlarm" : true,
  "alertTypes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "mediaType" : "aeiou",
  "enabled" : true,
  "dimensionValue" : "aeiou",
  "metric" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "dimension" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "notificationUsers" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter ruleId: (path) Rule ID 
     - parameter body: (body) AlertingRule (optional)

     - returns: RequestBuilder<ININInteractionStatsRule> 
     */
    public class func putAlertingInteractionstatsRulesRuleIdWithRequestBuilder(ruleId ruleId: String, body: ININInteractionStatsRule? = nil) -> RequestBuilder<ININInteractionStatsRule> {
        var path = "/api/v2/alerting/interactionstats/rules/{ruleId}"
        path = path.stringByReplacingOccurrencesOfString("{ruleId}", withString: "\(ruleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININInteractionStatsRule>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
