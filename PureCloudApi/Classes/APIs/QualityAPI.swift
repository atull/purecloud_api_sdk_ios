//
// QualityAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class QualityAPI: APIBase {
    /**
     Delete a calibration by id.
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQualityCalibrationsCalibrationId(calibrationId calibrationId: String, calibratorId: String, completion: ((data: ININCalibration?, error: ErrorType?) -> Void)) {
        deleteQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId: calibrationId, calibratorId: calibratorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a calibration by id.
     - DELETE /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : "",
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 

     - returns: RequestBuilder<ININCalibration> 
     */
    public class func deleteQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId calibrationId: String, calibratorId: String) -> RequestBuilder<ININCalibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        path = path.stringByReplacingOccurrencesOfString("{calibrationId}", withString: "\(calibrationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "calibratorId": calibratorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCalibration>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete an evaluation
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQualityConversationsConversationIdEvaluationsEvaluationId(conversationId conversationId: String, evaluationId: String, expand: String? = nil, completion: ((data: ININEvaluation?, error: ErrorType?) -> Void)) {
        deleteQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete an evaluation
     - DELETE /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "redacted" : true,
  "selfUri" : "aeiou",
  "answers" : {
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "neverRelease" : true,
  "agentHasRead" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "isScoringIndex" : true,
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<ININEvaluation> 
     */
    public class func deleteQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId conversationId: String, evaluationId: String, expand: String? = nil) -> RequestBuilder<ININEvaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{evaluationId}", withString: "\(evaluationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQualityFormsFormId(formId formId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteQualityFormsFormIdWithRequestBuilder(formId: formId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete an evaluation form.
     - DELETE /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteQualityFormsFormIdWithRequestBuilder(formId formId: String) -> RequestBuilder<String> {
        var path = "/api/v2/quality/forms/{formId}"
        path = path.stringByReplacingOccurrencesOfString("{formId}", withString: "\(formId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete keyword sets
     
     - parameter ids: (query) A comma-delimited list of valid KeywordSet ids 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQualityKeywordsets(ids ids: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteQualityKeywordsetsWithRequestBuilder(ids: ids).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete keyword sets
     - DELETE /api/v2/quality/keywordsets
     - Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter ids: (query) A comma-delimited list of valid KeywordSet ids 

     - returns: RequestBuilder<String> 
     */
    public class func deleteQualityKeywordsetsWithRequestBuilder(ids ids: String) -> RequestBuilder<String> {
        let path = "/api/v2/quality/keywordsets"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ids": ids
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a keywordSet by id.
     
     - parameter keywordSetId: (path) KeywordSet ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQualityKeywordsetsKeywordsetId(keywordSetId keywordSetId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId: keywordSetId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a keywordSet by id.
     - DELETE /api/v2/quality/keywordsets/{keywordSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter keywordSetId: (path) KeywordSet ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId keywordSetId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/quality/keywordsets/{keywordSetId}"
        path = path.stringByReplacingOccurrencesOfString("{keywordSetId}", withString: "\(keywordSetId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets a list of Agent Activities
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter agentUserId: (query) user id of agent requested (optional)
     - parameter evaluatorUserId: (query) user id of the evaluator (optional)
     - parameter name: (query) name (optional)
     - parameter group: (query) group id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityAgentsActivity(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, agentUserId: [String]? = nil, evaluatorUserId: String? = nil, name: String? = nil, group: String? = nil, completion: ((data: ININAgentActivityEntityListing?, error: ErrorType?) -> Void)) {
        getQualityAgentsActivityWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, name: name, group: group).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets a list of Agent Activities
     - GET /api/v2/quality/agents/activity
     - Including the number of evaluations and average evaluation score
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "numEvaluations" : 123,
    "agent" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "agentEvaluatorActivityList" : [ {
      "numEvaluations" : 123,
      "agent" : "",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "averageEvaluationScore" : 123,
      "evaluator" : ""
    } ],
    "id" : "aeiou",
    "averageEvaluationScore" : 123
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter agentUserId: (query) user id of agent requested (optional)
     - parameter evaluatorUserId: (query) user id of the evaluator (optional)
     - parameter name: (query) name (optional)
     - parameter group: (query) group id (optional)

     - returns: RequestBuilder<ININAgentActivityEntityListing> 
     */
    public class func getQualityAgentsActivityWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, agentUserId: [String]? = nil, evaluatorUserId: String? = nil, name: String? = nil, group: String? = nil) -> RequestBuilder<ININAgentActivityEntityListing> {
        let path = "/api/v2/quality/agents/activity"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "startTime": startTime,
            "endTime": endTime,
            "agentUserId": agentUserId,
            "evaluatorUserId": evaluatorUserId,
            "name": name,
            "group": group
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAgentActivityEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the list of calibrations
     
     - parameter calibratorId: (query) user id of calibrator 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversation id (optional)
     - parameter startTime: (query) Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityCalibrations(calibratorId calibratorId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, completion: ((data: ININCalibrationEntityListing?, error: ErrorType?) -> Void)) {
        getQualityCalibrationsWithRequestBuilder(calibratorId: calibratorId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, startTime: startTime, endTime: endTime).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of calibrations
     - GET /api/v2/quality/calibrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : {
      "address" : "aeiou",
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "callbackUserName" : "aeiou",
          "disconnectType" : "aeiou",
          "timeoutSeconds" : 123,
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou"
        } ],
        "videos" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "videoMuted" : true,
          "peerCount" : 123,
          "context" : "aeiou",
          "audioMuted" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "sharingScreen" : true,
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "locale" : "aeiou",
        "emails" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "subject" : "aeiou",
          "messagesSent" : 123,
          "errorInfo" : "",
          "segments" : [ "" ],
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ {
          "assignedDate" : "2000-01-23T04:56:07.000+0000",
          "agent" : "",
          "resourceId" : "aeiou",
          "releaseDate" : "2000-01-23T04:56:07.000+0000",
          "redacted" : true,
          "selfUri" : "aeiou",
          "answers" : {
            "comments" : "aeiou",
            "agentComments" : "aeiou",
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "questionGroupScores" : [ {
              "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "markedNA" : true,
              "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
              "questionScores" : [ {
                "answerId" : "aeiou",
                "failedKillQuestion" : true,
                "score" : 123,
                "questionId" : "aeiou",
                "comments" : "aeiou",
                "markedNA" : true
              } ],
              "questionGroupId" : "aeiou",
              "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
              "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
            } ],
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "anyFailedKillQuestions" : true
          },
          "changedDate" : "2000-01-23T04:56:07.000+0000",
          "neverRelease" : true,
          "agentHasRead" : true,
          "name" : "aeiou",
          "id" : "aeiou",
          "calibration" : "",
          "conversation" : "",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          },
          "isScoringIndex" : true,
          "evaluationForm" : {
            "publishedVersions" : {
              "total" : 123456789,
              "pageCount" : 123,
              "pageNumber" : 123,
              "entities" : [ "" ],
              "firstUri" : "aeiou",
              "selfUri" : "aeiou",
              "lastUri" : "aeiou",
              "pageSize" : 123,
              "previousUri" : "aeiou",
              "nextUri" : "aeiou"
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "contextId" : "aeiou",
            "id" : "aeiou",
            "published" : true,
            "type" : "aeiou",
            "questionGroups" : [ {
              "defaultAnswersToHighest" : true,
              "manualWeight" : true,
              "name" : "aeiou",
              "questions" : [ {
                "key" : "{}"
              } ],
              "weight" : 1.3579000000000001069366817318950779736042022705078125,
              "id" : "aeiou",
              "defaultAnswersToNA" : true,
              "type" : "aeiou",
              "naEnabled" : true
            } ]
          },
          "evaluator" : "",
          "status" : "aeiou",
          "resourceType" : "aeiou"
        } ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "consultParticipantId" : "aeiou",
        "queueName" : "aeiou",
        "calls" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "confined" : true,
          "held" : true,
          "recording" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "recordingState" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "documentId" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "direction" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "segments" : [ "" ],
          "socialMediaHub" : "aeiou",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000"
      } ],
      "maxParticipants" : 123
    },
    "evaluationForm" : ""
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter calibratorId: (query) user id of calibrator 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversation id (optional)
     - parameter startTime: (query) Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)

     - returns: RequestBuilder<ININCalibrationEntityListing> 
     */
    public class func getQualityCalibrationsWithRequestBuilder(calibratorId calibratorId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil) -> RequestBuilder<ININCalibrationEntityListing> {
        let path = "/api/v2/quality/calibrations"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "conversationId": conversationId,
            "startTime": startTime,
            "endTime": endTime,
            "calibratorId": calibratorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCalibrationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a calibration by id.
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityCalibrationsCalibrationId(calibrationId calibrationId: String, calibratorId: String, completion: ((data: ININCalibration?, error: ErrorType?) -> Void)) {
        getQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId: calibrationId, calibratorId: calibratorId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a calibration by id.
     - GET /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : "",
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter calibratorId: (query) calibratorId 

     - returns: RequestBuilder<ININCalibration> 
     */
    public class func getQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId calibrationId: String, calibratorId: String) -> RequestBuilder<ININCalibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        path = path.stringByReplacingOccurrencesOfString("{calibrationId}", withString: "\(calibrationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "calibratorId": calibratorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCalibration>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get audits for conversation or recording
     
     - parameter conversationId: (path) Conversation ID 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter recordingId: (query) id of the recording (optional)
     - parameter entityType: (query) entity type options: Recording, Calibration, Evaluation, Annotation (optional, default to RECORDING)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityConversationsConversationIdAudits(conversationId conversationId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, recordingId: String? = nil, entityType: String? = nil, completion: ((data: ININQualityAuditPage?, error: ErrorType?) -> Void)) {
        getQualityConversationsConversationIdAuditsWithRequestBuilder(conversationId: conversationId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, recordingId: recordingId, entityType: entityType).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get audits for conversation or recording
     - GET /api/v2/quality/conversations/{conversationId}/audits
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "level" : "aeiou",
    "entityType" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "changes" : [ {
      "property" : "aeiou",
      "newValues" : [ "aeiou" ],
      "oldValues" : [ "aeiou" ],
      "entity" : ""
    } ],
    "action" : "aeiou",
    "id" : "aeiou",
    "user" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "entity" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou"
    },
    "timestamp" : "aeiou",
    "status" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter conversationId: (path) Conversation ID 
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter recordingId: (query) id of the recording (optional)
     - parameter entityType: (query) entity type options: Recording, Calibration, Evaluation, Annotation (optional, default to RECORDING)

     - returns: RequestBuilder<ININQualityAuditPage> 
     */
    public class func getQualityConversationsConversationIdAuditsWithRequestBuilder(conversationId conversationId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, recordingId: String? = nil, entityType: String? = nil) -> RequestBuilder<ININQualityAuditPage> {
        var path = "/api/v2/quality/conversations/{conversationId}/audits"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "recordingId": recordingId,
            "entityType": entityType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININQualityAuditPage>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an evaluation
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter expand: (query) agent, evaluator, evaluationForm (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityConversationsConversationIdEvaluationsEvaluationId(conversationId conversationId: String, evaluationId: String, expand: String? = nil, completion: ((data: ININEvaluation?, error: ErrorType?) -> Void)) {
        getQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an evaluation
     - GET /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "redacted" : true,
  "selfUri" : "aeiou",
  "answers" : {
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "neverRelease" : true,
  "agentHasRead" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "isScoringIndex" : true,
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter expand: (query) agent, evaluator, evaluationForm (optional)

     - returns: RequestBuilder<ININEvaluation> 
     */
    public class func getQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId conversationId: String, evaluationId: String, expand: String? = nil) -> RequestBuilder<ININEvaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{evaluationId}", withString: "\(evaluationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Queries Evaluations and returns a paged list
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversationId specified (optional)
     - parameter agentUserId: (query) user id of the agent (optional)
     - parameter evaluatorUserId: (query) evaluator user id (optional)
     - parameter queueId: (query) queue id (optional)
     - parameter startTime: (query) start time of the evaluation query (optional)
     - parameter endTime: (query) end time of the evaluation query (optional)
     - parameter evaluationState: (query) evaluation state options: Pending, InProgress, Finished (optional)
     - parameter isReleased: (query) the evaluation has been released (optional)
     - parameter agentHasRead: (query) agent has the evaluation (optional)
     - parameter expandAnswerTotalScores: (query) get the total scores for evaluations (optional)
     - parameter maximum: (query) maximum (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityEvaluationsQuery(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, agentUserId: String? = nil, evaluatorUserId: String? = nil, queueId: String? = nil, startTime: String? = nil, endTime: String? = nil, evaluationState: [String]? = nil, isReleased: Bool? = nil, agentHasRead: Bool? = nil, expandAnswerTotalScores: Bool? = nil, maximum: Int32? = nil, completion: ((data: ININEvaluationEntityListing?, error: ErrorType?) -> Void)) {
        getQualityEvaluationsQueryWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, conversationId: conversationId, agentUserId: agentUserId, evaluatorUserId: evaluatorUserId, queueId: queueId, startTime: startTime, endTime: endTime, evaluationState: evaluationState, isReleased: isReleased, agentHasRead: agentHasRead, expandAnswerTotalScores: expandAnswerTotalScores, maximum: maximum).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Queries Evaluations and returns a paged list
     - GET /api/v2/quality/evaluations/query
     - Query params must include one of conversationId, evaluatorUserId, or agentUserId
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "assignedDate" : "2000-01-23T04:56:07.000+0000",
    "agent" : "",
    "resourceId" : "aeiou",
    "releaseDate" : "2000-01-23T04:56:07.000+0000",
    "redacted" : true,
    "selfUri" : "aeiou",
    "answers" : {
      "comments" : "aeiou",
      "agentComments" : "aeiou",
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "questionGroupScores" : [ {
        "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "markedNA" : true,
        "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
        "questionScores" : [ {
          "answerId" : "aeiou",
          "failedKillQuestion" : true,
          "score" : 123,
          "questionId" : "aeiou",
          "comments" : "aeiou",
          "markedNA" : true
        } ],
        "questionGroupId" : "aeiou",
        "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
        "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
      } ],
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "anyFailedKillQuestions" : true
    },
    "changedDate" : "2000-01-23T04:56:07.000+0000",
    "neverRelease" : true,
    "agentHasRead" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "calibration" : {
      "agent" : "",
      "evaluations" : [ "" ],
      "selfUri" : "aeiou",
      "evaluators" : [ "" ],
      "contextId" : "aeiou",
      "averageScore" : 123,
      "calibrator" : "",
      "highScore" : 123,
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "scoringIndex" : "",
      "expertEvaluator" : "",
      "name" : "aeiou",
      "id" : "aeiou",
      "lowScore" : 123,
      "conversation" : "",
      "evaluationForm" : ""
    },
    "conversation" : {
      "address" : "aeiou",
      "conversationIds" : [ "aeiou" ],
      "recordingState" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "endTime" : "2000-01-23T04:56:07.000+0000",
      "participants" : [ {
        "queueId" : "aeiou",
        "monitoredParticipantId" : "aeiou",
        "externalContactId" : "aeiou",
        "wrapupSkipped" : true,
        "purpose" : "aeiou",
        "groupId" : "aeiou",
        "wrapupTimeoutMs" : 123,
        "callbacks" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "callbackNumbers" : [ "aeiou" ],
          "skipEnabled" : true,
          "segments" : [ "" ],
          "scriptId" : "aeiou",
          "callbackUserName" : "aeiou",
          "disconnectType" : "aeiou",
          "timeoutSeconds" : 123,
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "dialerPreview" : {
            "contactId" : "aeiou",
            "campaignId" : "aeiou",
            "phoneNumberColumns" : [ {
              "type" : "aeiou",
              "columnName" : "aeiou"
            } ],
            "contactListId" : "aeiou",
            "id" : "aeiou"
          },
          "direction" : "aeiou"
        } ],
        "videos" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "videoMuted" : true,
          "peerCount" : 123,
          "context" : "aeiou",
          "audioMuted" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "sharingScreen" : true,
          "state" : "aeiou",
          "id" : "aeiou"
        } ],
        "locale" : "aeiou",
        "emails" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "subject" : "aeiou",
          "messagesSent" : 123,
          "errorInfo" : "",
          "segments" : [ "" ],
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "direction" : "aeiou"
        } ],
        "wrapupRequired" : true,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "userUri" : "aeiou",
        "dnis" : "aeiou",
        "ani" : "aeiou",
        "wrapup" : {
          "provisional" : true,
          "code" : "aeiou",
          "notes" : "aeiou",
          "durationSeconds" : 123,
          "name" : "aeiou",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "tags" : [ "aeiou" ]
        },
        "address" : "aeiou",
        "evaluations" : [ "" ],
        "participantType" : "aeiou",
        "userId" : "aeiou",
        "consultParticipantId" : "aeiou",
        "queueName" : "aeiou",
        "calls" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "confined" : true,
          "held" : true,
          "recording" : true,
          "errorInfo" : {
            "messageWithParams" : "aeiou",
            "code" : "aeiou",
            "entityName" : "aeiou",
            "entityId" : "aeiou",
            "contextId" : "aeiou",
            "details" : [ {
              "fieldName" : "aeiou",
              "entityName" : "aeiou",
              "errorCode" : "aeiou",
              "entityId" : "aeiou"
            } ],
            "messageParams" : {
              "key" : "aeiou"
            },
            "message" : "aeiou",
            "errors" : [ "" ],
            "status" : 123
          },
          "segments" : [ {
            "howEnded" : "aeiou",
            "disconnectType" : "aeiou",
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "endTime" : "2000-01-23T04:56:07.000+0000",
            "type" : "aeiou"
          } ],
          "recordingState" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "documentId" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "muted" : true,
          "direction" : "aeiou",
          "disconnectReasons" : [ {
            "code" : 123,
            "phrase" : "aeiou",
            "type" : "aeiou"
          } ]
        } ],
        "name" : "aeiou",
        "wrapupPrompt" : "aeiou",
        "chats" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "recordingId" : "aeiou",
          "roomId" : "aeiou",
          "segments" : [ "" ],
          "direction" : "aeiou"
        } ],
        "socialExpressions" : [ {
          "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
          "held" : true,
          "segments" : [ "" ],
          "socialMediaHub" : "aeiou",
          "socialMediaId" : "aeiou",
          "disconnectType" : "aeiou",
          "connectedTime" : "2000-01-23T04:56:07.000+0000",
          "socialUserName" : "aeiou",
          "state" : "aeiou",
          "id" : "aeiou",
          "startHoldTime" : "2000-01-23T04:56:07.000+0000",
          "previewText" : "aeiou",
          "recordingId" : "aeiou"
        } ],
        "attributes" : {
          "key" : "aeiou"
        },
        "endTime" : "2000-01-23T04:56:07.000+0000"
      } ],
      "maxParticipants" : 123
    },
    "queue" : {
      "callingPartyName" : "aeiou",
      "acwSettings" : {
        "timeoutMs" : 123,
        "wrapupPrompt" : "aeiou"
      },
      "mediaSettings" : {
        "key" : {
          "alertingTimeoutSeconds" : 123,
          "serviceLevel" : {
            "percentage" : 1.3579000000000001069366817318950779736042022705078125,
            "durationMs" : 123456789
          }
        }
      },
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "createdByApp" : "aeiou",
      "version" : 123,
      "bullseye" : {
        "rings" : [ {
          "expansionCriteria" : [ {
            "threshold" : 1.3579000000000001069366817318950779736042022705078125,
            "type" : "aeiou"
          } ],
          "actions" : {
            "skillsToRemove" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          }
        } ]
      },
      "skillEvaluationMethod" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "queueFlow" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "createdBy" : "aeiou",
      "callingPartyNumber" : "aeiou",
      "name" : "aeiou",
      "modifiedByApp" : "aeiou",
      "modifiedBy" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    },
    "isScoringIndex" : true,
    "evaluationForm" : {
      "publishedVersions" : {
        "total" : 123456789,
        "pageCount" : 123,
        "pageNumber" : 123,
        "entities" : [ "" ],
        "firstUri" : "aeiou",
        "selfUri" : "aeiou",
        "lastUri" : "aeiou",
        "pageSize" : 123,
        "previousUri" : "aeiou",
        "nextUri" : "aeiou"
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "contextId" : "aeiou",
      "id" : "aeiou",
      "published" : true,
      "type" : "aeiou",
      "questionGroups" : [ {
        "defaultAnswersToHighest" : true,
        "manualWeight" : true,
        "name" : "aeiou",
        "questions" : [ {
          "key" : "{}"
        } ],
        "weight" : 1.3579000000000001069366817318950779736042022705078125,
        "id" : "aeiou",
        "defaultAnswersToNA" : true,
        "type" : "aeiou",
        "naEnabled" : true
      } ]
    },
    "evaluator" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "status" : "aeiou",
    "resourceType" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter conversationId: (query) conversationId specified (optional)
     - parameter agentUserId: (query) user id of the agent (optional)
     - parameter evaluatorUserId: (query) evaluator user id (optional)
     - parameter queueId: (query) queue id (optional)
     - parameter startTime: (query) start time of the evaluation query (optional)
     - parameter endTime: (query) end time of the evaluation query (optional)
     - parameter evaluationState: (query) evaluation state options: Pending, InProgress, Finished (optional)
     - parameter isReleased: (query) the evaluation has been released (optional)
     - parameter agentHasRead: (query) agent has the evaluation (optional)
     - parameter expandAnswerTotalScores: (query) get the total scores for evaluations (optional)
     - parameter maximum: (query) maximum (optional)

     - returns: RequestBuilder<ININEvaluationEntityListing> 
     */
    public class func getQualityEvaluationsQueryWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, conversationId: String? = nil, agentUserId: String? = nil, evaluatorUserId: String? = nil, queueId: String? = nil, startTime: String? = nil, endTime: String? = nil, evaluationState: [String]? = nil, isReleased: Bool? = nil, agentHasRead: Bool? = nil, expandAnswerTotalScores: Bool? = nil, maximum: Int32? = nil) -> RequestBuilder<ININEvaluationEntityListing> {
        let path = "/api/v2/quality/evaluations/query"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "conversationId": conversationId,
            "agentUserId": agentUserId,
            "evaluatorUserId": evaluatorUserId,
            "queueId": queueId,
            "startTime": startTime,
            "endTime": endTime,
            "evaluationState": evaluationState,
            "isReleased": isReleased,
            "agentHasRead": agentHasRead,
            "expandAnswerTotalScores": expandAnswerTotalScores,
            "maximum": maximum?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an evaluator activity
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter name: (query) Evaluator name (optional)
     - parameter permission: (query) permission strings (optional)
     - parameter group: (query) group id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityEvaluatorsActivity(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, name: String? = nil, permission: [String]? = nil, group: String? = nil, completion: ((data: ININEvaluatorActivityEntityListing?, error: ErrorType?) -> Void)) {
        getQualityEvaluatorsActivityWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, startTime: startTime, endTime: endTime, name: name, permission: permission, group: group).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an evaluator activity
     - GET /api/v2/quality/evaluators/activity
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "numCalibrationsStarted" : 123,
    "numEvaluationsAssigned" : 123,
    "numEvaluationsCompleted" : 123,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "numEvaluationsStarted" : 123,
    "id" : "aeiou",
    "numCalibrationsAssigned" : 123,
    "numCalibrationsCompleted" : 123,
    "evaluator" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter startTime: (query) The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter endTime: (query) The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     - parameter name: (query) Evaluator name (optional)
     - parameter permission: (query) permission strings (optional)
     - parameter group: (query) group id (optional)

     - returns: RequestBuilder<ININEvaluatorActivityEntityListing> 
     */
    public class func getQualityEvaluatorsActivityWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, startTime: NSDate? = nil, endTime: NSDate? = nil, name: String? = nil, permission: [String]? = nil, group: String? = nil) -> RequestBuilder<ININEvaluatorActivityEntityListing> {
        let path = "/api/v2/quality/evaluators/activity"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "startTime": startTime,
            "endTime": endTime,
            "name": name,
            "permission": permission,
            "group": group
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluatorActivityEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the list of evaluation forms
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityForms(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil, completion: ((data: ININEvaluationFormEntityListing?, error: ErrorType?) -> Void)) {
        getQualityFormsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, nextPage: nextPage, previousPage: previousPage, expand: expand, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of evaluation forms
     - GET /api/v2/quality/forms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter expand: (query) Expand (optional)
     - parameter name: (query) Name (optional)

     - returns: RequestBuilder<ININEvaluationFormEntityListing> 
     */
    public class func getQualityFormsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, nextPage: String? = nil, previousPage: String? = nil, expand: String? = nil, name: String? = nil) -> RequestBuilder<ININEvaluationFormEntityListing> {
        let path = "/api/v2/quality/forms"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "expand": expand,
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationFormEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an evaluation form
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityFormsFormId(formId formId: String, completion: ((data: ININEvaluationForm?, error: ErrorType?) -> Void)) {
        getQualityFormsFormIdWithRequestBuilder(formId: formId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an evaluation form
     - GET /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "previousUri" : "aeiou",
    "nextUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "type" : "aeiou",
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "name" : "aeiou",
    "questions" : [ {
      "key" : "{}"
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<ININEvaluationForm> 
     */
    public class func getQualityFormsFormIdWithRequestBuilder(formId formId: String) -> RequestBuilder<ININEvaluationForm> {
        var path = "/api/v2/quality/forms/{formId}"
        path = path.stringByReplacingOccurrencesOfString("{formId}", withString: "\(formId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationForm>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets all the revisions for a specific evaluation.
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityFormsFormIdVersions(formId formId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, completion: ((data: ININEvaluationFormEntityListing?, error: ErrorType?) -> Void)) {
        getQualityFormsFormIdVersionsWithRequestBuilder(formId: formId, pageSize: pageSize, pageNumber: pageNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets all the revisions for a specific evaluation.
     - GET /api/v2/quality/forms/{formId}/versions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter formId: (path) Form ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ININEvaluationFormEntityListing> 
     */
    public class func getQualityFormsFormIdVersionsWithRequestBuilder(formId formId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil) -> RequestBuilder<ININEvaluationFormEntityListing> {
        var path = "/api/v2/quality/forms/{formId}/versions"
        path = path.stringByReplacingOccurrencesOfString("{formId}", withString: "\(formId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationFormEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the list of keyword sets
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the keyword set name - used for filtering results in searches. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityKeywordsets(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil, completion: ((data: ININKeywordSetEntityListing?, error: ErrorType?) -> Void)) {
        getQualityKeywordsetsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of keyword sets
     - GET /api/v2/quality/keywordsets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "keywords" : [ {
      "alternateSpellings" : [ "aeiou" ],
      "phrase" : "aeiou",
      "customerScoreModifier" : 123,
      "confidence" : 123,
      "name" : "aeiou",
      "id" : "aeiou",
      "agentScoreModifier" : 123
    } ],
    "participantPurposes" : [ "aeiou" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "language" : "aeiou",
    "id" : "aeiou",
    "queue" : {
      "callingPartyName" : "aeiou",
      "acwSettings" : {
        "timeoutMs" : 123,
        "wrapupPrompt" : "aeiou"
      },
      "mediaSettings" : {
        "key" : {
          "alertingTimeoutSeconds" : 123,
          "serviceLevel" : {
            "percentage" : 1.3579000000000001069366817318950779736042022705078125,
            "durationMs" : 123456789
          }
        }
      },
      "memberCount" : 123,
      "selfUri" : "aeiou",
      "description" : "aeiou",
      "dateModified" : "2000-01-23T04:56:07.000+0000",
      "createdByApp" : "aeiou",
      "version" : 123,
      "bullseye" : {
        "rings" : [ {
          "expansionCriteria" : [ {
            "threshold" : 1.3579000000000001069366817318950779736042022705078125,
            "type" : "aeiou"
          } ],
          "actions" : {
            "skillsToRemove" : [ {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          }
        } ]
      },
      "skillEvaluationMethod" : "aeiou",
      "dateCreated" : "2000-01-23T04:56:07.000+0000",
      "queueFlow" : {
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou"
      },
      "createdBy" : "aeiou",
      "callingPartyNumber" : "aeiou",
      "name" : "aeiou",
      "modifiedByApp" : "aeiou",
      "modifiedBy" : "aeiou",
      "id" : "aeiou",
      "state" : "aeiou"
    },
    "agents" : [ {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : {
        "defaultStation" : "",
        "lastAssociatedStation" : "",
        "associatedStation" : {
          "associatedDate" : "2000-01-23T04:56:07.000+0000",
          "defaultUser" : "",
          "id" : "aeiou",
          "associatedUser" : "",
          "providerInfo" : {
            "key" : "aeiou"
          }
        },
        "effectiveStation" : ""
      },
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter name: (query) the keyword set name - used for filtering results in searches. (optional)

     - returns: RequestBuilder<ININKeywordSetEntityListing> 
     */
    public class func getQualityKeywordsetsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, name: String? = nil) -> RequestBuilder<ININKeywordSetEntityListing> {
        let path = "/api/v2/quality/keywordsets"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININKeywordSetEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a keywordSet by id.
     
     - parameter keywordSetId: (path) KeywordSet ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityKeywordsetsKeywordsetId(keywordSetId keywordSetId: String, completion: ((data: ININKeywordSet?, error: ErrorType?) -> Void)) {
        getQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId: keywordSetId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a keywordSet by id.
     - GET /api/v2/quality/keywordsets/{keywordSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "keywords" : [ {
    "alternateSpellings" : [ "aeiou" ],
    "phrase" : "aeiou",
    "customerScoreModifier" : 123,
    "confidence" : 123,
    "name" : "aeiou",
    "id" : "aeiou",
    "agentScoreModifier" : 123
  } ],
  "participantPurposes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "agents" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter keywordSetId: (path) KeywordSet ID 

     - returns: RequestBuilder<ININKeywordSet> 
     */
    public class func getQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId keywordSetId: String) -> RequestBuilder<ININKeywordSet> {
        var path = "/api/v2/quality/keywordsets/{keywordSetId}"
        path = path.stringByReplacingOccurrencesOfString("{keywordSetId}", withString: "\(keywordSetId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININKeywordSet>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the published evaluation forms.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityPublishedforms(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, name: String? = nil, completion: ((data: ININEvaluationFormEntityListing?, error: ErrorType?) -> Void)) {
        getQualityPublishedformsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the published evaluation forms.
     - GET /api/v2/quality/publishedforms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter name: (query) Name (optional)

     - returns: RequestBuilder<ININEvaluationFormEntityListing> 
     */
    public class func getQualityPublishedformsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, name: String? = nil) -> RequestBuilder<ININEvaluationFormEntityListing> {
        let path = "/api/v2/quality/publishedforms"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationFormEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the published evaluation forms.
     
     - parameter formId: (path) Form ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQualityPublishedformsFormId(formId formId: String, completion: ((data: ININEvaluationForm?, error: ErrorType?) -> Void)) {
        getQualityPublishedformsFormIdWithRequestBuilder(formId: formId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the published evaluation forms.
     - GET /api/v2/quality/publishedforms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "previousUri" : "aeiou",
    "nextUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "type" : "aeiou",
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "name" : "aeiou",
    "questions" : [ {
      "key" : "{}"
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 

     - returns: RequestBuilder<ININEvaluationForm> 
     */
    public class func getQualityPublishedformsFormIdWithRequestBuilder(formId formId: String) -> RequestBuilder<ININEvaluationForm> {
        var path = "/api/v2/quality/publishedforms/{formId}"
        path = path.stringByReplacingOccurrencesOfString("{formId}", withString: "\(formId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationForm>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for evaluation aggregates
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsEvaluationsAggregatesQuery(body body: ININAggregationQuery? = nil, completion: ((data: ININAggregateQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for evaluation aggregates
     - POST /api/v2/analytics/evaluations/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININAggregateQueryResponse> 
     */
    public class func postAnalyticsEvaluationsAggregatesQueryWithRequestBuilder(body body: ININAggregationQuery? = nil) -> RequestBuilder<ININAggregateQueryResponse> {
        let path = "/api/v2/analytics/evaluations/aggregates/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAggregateQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a calibration
     
     - parameter body: (body) calibration (optional)
     - parameter expand: (query) calibratorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityCalibrations(body body: ININCalibration? = nil, expand: String? = nil, completion: ((data: ININCalibration?, error: ErrorType?) -> Void)) {
        postQualityCalibrationsWithRequestBuilder(body: body, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a calibration
     - POST /api/v2/quality/calibrations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : "",
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "evaluationForm" : ""
}}]
     
     - parameter body: (body) calibration (optional)
     - parameter expand: (query) calibratorId (optional)

     - returns: RequestBuilder<ININCalibration> 
     */
    public class func postQualityCalibrationsWithRequestBuilder(body body: ININCalibration? = nil, expand: String? = nil) -> RequestBuilder<ININCalibration> {
        let path = "/api/v2/quality/calibrations"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCalibration>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create an evaluation
     
     - parameter conversationId: (path)  
     - parameter body: (body) evaluation (optional)
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityConversationsConversationIdEvaluations(conversationId conversationId: String, body: ININEvaluation? = nil, expand: String? = nil, completion: ((data: ININEvaluation?, error: ErrorType?) -> Void)) {
        postQualityConversationsConversationIdEvaluationsWithRequestBuilder(conversationId: conversationId, body: body, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an evaluation
     - POST /api/v2/quality/conversations/{conversationId}/evaluations
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "redacted" : true,
  "selfUri" : "aeiou",
  "answers" : {
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "neverRelease" : true,
  "agentHasRead" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "isScoringIndex" : true,
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path)  
     - parameter body: (body) evaluation (optional)
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<ININEvaluation> 
     */
    public class func postQualityConversationsConversationIdEvaluationsWithRequestBuilder(conversationId conversationId: String, body: ININEvaluation? = nil, expand: String? = nil) -> RequestBuilder<ININEvaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Score evaluation
     
     - parameter body: (body) evaluationAndScoringSet (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityEvaluationsScoring(body body: ININEvaluationFormAndScoringSet? = nil, completion: ((data: ININEvaluationScoringSet?, error: ErrorType?) -> Void)) {
        postQualityEvaluationsScoringWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Score evaluation
     - POST /api/v2/quality/evaluations/scoring
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "comments" : "aeiou",
  "agentComments" : "aeiou",
  "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "questionGroupScores" : [ {
    "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "markedNA" : true,
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
    "questionScores" : [ {
      "answerId" : "aeiou",
      "failedKillQuestion" : true,
      "score" : 123,
      "questionId" : "aeiou",
      "comments" : "aeiou",
      "markedNA" : true
    } ],
    "questionGroupId" : "aeiou",
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
  "anyFailedKillQuestions" : true
}}]
     
     - parameter body: (body) evaluationAndScoringSet (optional)

     - returns: RequestBuilder<ININEvaluationScoringSet> 
     */
    public class func postQualityEvaluationsScoringWithRequestBuilder(body body: ININEvaluationFormAndScoringSet? = nil) -> RequestBuilder<ININEvaluationScoringSet> {
        let path = "/api/v2/quality/evaluations/scoring"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationScoringSet>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an evaluation form.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityForms(body body: ININEvaluationForm? = nil, completion: ((data: ININEvaluationForm?, error: ErrorType?) -> Void)) {
        postQualityFormsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an evaluation form.
     - POST /api/v2/quality/forms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "previousUri" : "aeiou",
    "nextUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "type" : "aeiou",
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "name" : "aeiou",
    "questions" : [ {
      "key" : "{}"
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININEvaluationForm> 
     */
    public class func postQualityFormsWithRequestBuilder(body body: ININEvaluationForm? = nil) -> RequestBuilder<ININEvaluationForm> {
        let path = "/api/v2/quality/forms"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationForm>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a Keyword Set
     
     - parameter body: (body) keywordSet (optional)
     - parameter expand: (query) queueId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityKeywordsets(body body: ININKeywordSet? = nil, expand: String? = nil, completion: ((data: ININKeywordSet?, error: ErrorType?) -> Void)) {
        postQualityKeywordsetsWithRequestBuilder(body: body, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a Keyword Set
     - POST /api/v2/quality/keywordsets
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "keywords" : [ {
    "alternateSpellings" : [ "aeiou" ],
    "phrase" : "aeiou",
    "customerScoreModifier" : 123,
    "confidence" : 123,
    "name" : "aeiou",
    "id" : "aeiou",
    "agentScoreModifier" : 123
  } ],
  "participantPurposes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "agents" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter body: (body) keywordSet (optional)
     - parameter expand: (query) queueId (optional)

     - returns: RequestBuilder<ININKeywordSet> 
     */
    public class func postQualityKeywordsetsWithRequestBuilder(body body: ININKeywordSet? = nil, expand: String? = nil) -> RequestBuilder<ININKeywordSet> {
        let path = "/api/v2/quality/keywordsets"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININKeywordSet>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Publish an evaluation form.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postQualityPublishedforms(body body: ININEvaluationForm? = nil, completion: ((data: ININEvaluationForm?, error: ErrorType?) -> Void)) {
        postQualityPublishedformsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Publish an evaluation form.
     - POST /api/v2/quality/publishedforms
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "previousUri" : "aeiou",
    "nextUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "type" : "aeiou",
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "name" : "aeiou",
    "questions" : [ {
      "key" : "{}"
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININEvaluationForm> 
     */
    public class func postQualityPublishedformsWithRequestBuilder(body body: ININEvaluationForm? = nil) -> RequestBuilder<ININEvaluationForm> {
        let path = "/api/v2/quality/publishedforms"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationForm>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter body: (body) Calibration (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putQualityCalibrationsCalibrationId(calibrationId calibrationId: String, body: ININCalibration? = nil, completion: ((data: ININCalibration?, error: ErrorType?) -> Void)) {
        putQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId: calibrationId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     - PUT /api/v2/quality/calibrations/{calibrationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "agent" : "",
  "evaluations" : [ "" ],
  "selfUri" : "aeiou",
  "evaluators" : [ "" ],
  "contextId" : "aeiou",
  "averageScore" : 123,
  "calibrator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "highScore" : 123,
  "createdDate" : "2000-01-23T04:56:07.000+0000",
  "scoringIndex" : "",
  "expertEvaluator" : "",
  "name" : "aeiou",
  "id" : "aeiou",
  "lowScore" : 123,
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ {
        "assignedDate" : "2000-01-23T04:56:07.000+0000",
        "agent" : "",
        "resourceId" : "aeiou",
        "releaseDate" : "2000-01-23T04:56:07.000+0000",
        "redacted" : true,
        "selfUri" : "aeiou",
        "answers" : {
          "comments" : "aeiou",
          "agentComments" : "aeiou",
          "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "questionGroupScores" : [ {
            "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "markedNA" : true,
            "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
            "questionScores" : [ {
              "answerId" : "aeiou",
              "failedKillQuestion" : true,
              "score" : 123,
              "questionId" : "aeiou",
              "comments" : "aeiou",
              "markedNA" : true
            } ],
            "questionGroupId" : "aeiou",
            "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
            "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
          } ],
          "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
          "anyFailedKillQuestions" : true
        },
        "changedDate" : "2000-01-23T04:56:07.000+0000",
        "neverRelease" : true,
        "agentHasRead" : true,
        "name" : "aeiou",
        "id" : "aeiou",
        "calibration" : "",
        "conversation" : "",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        },
        "isScoringIndex" : true,
        "evaluationForm" : {
          "publishedVersions" : {
            "total" : 123456789,
            "pageCount" : 123,
            "pageNumber" : 123,
            "entities" : [ "" ],
            "firstUri" : "aeiou",
            "selfUri" : "aeiou",
            "lastUri" : "aeiou",
            "pageSize" : 123,
            "previousUri" : "aeiou",
            "nextUri" : "aeiou"
          },
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "contextId" : "aeiou",
          "id" : "aeiou",
          "published" : true,
          "type" : "aeiou",
          "questionGroups" : [ {
            "defaultAnswersToHighest" : true,
            "manualWeight" : true,
            "name" : "aeiou",
            "questions" : [ {
              "key" : "{}"
            } ],
            "weight" : 1.3579000000000001069366817318950779736042022705078125,
            "id" : "aeiou",
            "defaultAnswersToNA" : true,
            "type" : "aeiou",
            "naEnabled" : true
          } ]
        },
        "evaluator" : "",
        "status" : "aeiou",
        "resourceType" : "aeiou"
      } ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "evaluationForm" : ""
}}]
     
     - parameter calibrationId: (path) Calibration ID 
     - parameter body: (body) Calibration (optional)

     - returns: RequestBuilder<ININCalibration> 
     */
    public class func putQualityCalibrationsCalibrationIdWithRequestBuilder(calibrationId calibrationId: String, body: ININCalibration? = nil) -> RequestBuilder<ININCalibration> {
        var path = "/api/v2/quality/calibrations/{calibrationId}"
        path = path.stringByReplacingOccurrencesOfString("{calibrationId}", withString: "\(calibrationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCalibration>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an evaluation
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter body: (body) evaluation (optional)
     - parameter expand: (query) evaluatorId (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putQualityConversationsConversationIdEvaluationsEvaluationId(conversationId conversationId: String, evaluationId: String, body: ININEvaluation? = nil, expand: String? = nil, completion: ((data: ININEvaluation?, error: ErrorType?) -> Void)) {
        putQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId: conversationId, evaluationId: evaluationId, body: body, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an evaluation
     - PUT /api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "assignedDate" : "2000-01-23T04:56:07.000+0000",
  "agent" : "",
  "resourceId" : "aeiou",
  "releaseDate" : "2000-01-23T04:56:07.000+0000",
  "redacted" : true,
  "selfUri" : "aeiou",
  "answers" : {
    "comments" : "aeiou",
    "agentComments" : "aeiou",
    "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "questionGroupScores" : [ {
      "maxTotalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "totalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "totalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "markedNA" : true,
      "totalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalCriticalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125,
      "questionScores" : [ {
        "answerId" : "aeiou",
        "failedKillQuestion" : true,
        "score" : 123,
        "questionId" : "aeiou",
        "comments" : "aeiou",
        "markedNA" : true
      } ],
      "questionGroupId" : "aeiou",
      "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
      "maxTotalScoreUnweighted" : 1.3579000000000001069366817318950779736042022705078125
    } ],
    "totalScore" : 1.3579000000000001069366817318950779736042022705078125,
    "anyFailedKillQuestions" : true
  },
  "changedDate" : "2000-01-23T04:56:07.000+0000",
  "neverRelease" : true,
  "agentHasRead" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "calibration" : {
    "agent" : "",
    "evaluations" : [ "" ],
    "selfUri" : "aeiou",
    "evaluators" : [ "" ],
    "contextId" : "aeiou",
    "averageScore" : 123,
    "calibrator" : "",
    "highScore" : 123,
    "createdDate" : "2000-01-23T04:56:07.000+0000",
    "scoringIndex" : "",
    "expertEvaluator" : "",
    "name" : "aeiou",
    "id" : "aeiou",
    "lowScore" : 123,
    "conversation" : "",
    "evaluationForm" : ""
  },
  "conversation" : {
    "address" : "aeiou",
    "conversationIds" : [ "aeiou" ],
    "recordingState" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "endTime" : "2000-01-23T04:56:07.000+0000",
    "participants" : [ {
      "queueId" : "aeiou",
      "monitoredParticipantId" : "aeiou",
      "externalContactId" : "aeiou",
      "wrapupSkipped" : true,
      "purpose" : "aeiou",
      "groupId" : "aeiou",
      "wrapupTimeoutMs" : 123,
      "callbacks" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "callbackScheduledTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "callbackNumbers" : [ "aeiou" ],
        "skipEnabled" : true,
        "segments" : [ "" ],
        "scriptId" : "aeiou",
        "callbackUserName" : "aeiou",
        "disconnectType" : "aeiou",
        "timeoutSeconds" : 123,
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "dialerPreview" : {
          "contactId" : "aeiou",
          "campaignId" : "aeiou",
          "phoneNumberColumns" : [ {
            "type" : "aeiou",
            "columnName" : "aeiou"
          } ],
          "contactListId" : "aeiou",
          "id" : "aeiou"
        },
        "direction" : "aeiou"
      } ],
      "videos" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "videoMuted" : true,
        "peerCount" : 123,
        "context" : "aeiou",
        "audioMuted" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "sharingScreen" : true,
        "state" : "aeiou",
        "id" : "aeiou"
      } ],
      "locale" : "aeiou",
      "emails" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "subject" : "aeiou",
        "messagesSent" : 123,
        "errorInfo" : "",
        "segments" : [ "" ],
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "direction" : "aeiou"
      } ],
      "wrapupRequired" : true,
      "connectedTime" : "2000-01-23T04:56:07.000+0000",
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "userUri" : "aeiou",
      "dnis" : "aeiou",
      "ani" : "aeiou",
      "wrapup" : {
        "provisional" : true,
        "code" : "aeiou",
        "notes" : "aeiou",
        "durationSeconds" : 123,
        "name" : "aeiou",
        "endTime" : "2000-01-23T04:56:07.000+0000",
        "tags" : [ "aeiou" ]
      },
      "address" : "aeiou",
      "evaluations" : [ "" ],
      "participantType" : "aeiou",
      "userId" : "aeiou",
      "consultParticipantId" : "aeiou",
      "queueName" : "aeiou",
      "calls" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "confined" : true,
        "held" : true,
        "recording" : true,
        "errorInfo" : {
          "messageWithParams" : "aeiou",
          "code" : "aeiou",
          "entityName" : "aeiou",
          "entityId" : "aeiou",
          "contextId" : "aeiou",
          "details" : [ {
            "fieldName" : "aeiou",
            "entityName" : "aeiou",
            "errorCode" : "aeiou",
            "entityId" : "aeiou"
          } ],
          "messageParams" : {
            "key" : "aeiou"
          },
          "message" : "aeiou",
          "errors" : [ "" ],
          "status" : 123
        },
        "segments" : [ {
          "howEnded" : "aeiou",
          "disconnectType" : "aeiou",
          "startTime" : "2000-01-23T04:56:07.000+0000",
          "endTime" : "2000-01-23T04:56:07.000+0000",
          "type" : "aeiou"
        } ],
        "recordingState" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "documentId" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "muted" : true,
        "direction" : "aeiou",
        "disconnectReasons" : [ {
          "code" : 123,
          "phrase" : "aeiou",
          "type" : "aeiou"
        } ]
      } ],
      "name" : "aeiou",
      "wrapupPrompt" : "aeiou",
      "chats" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "recordingId" : "aeiou",
        "roomId" : "aeiou",
        "segments" : [ "" ],
        "direction" : "aeiou"
      } ],
      "socialExpressions" : [ {
        "disconnectedTime" : "2000-01-23T04:56:07.000+0000",
        "held" : true,
        "segments" : [ "" ],
        "socialMediaHub" : "aeiou",
        "socialMediaId" : "aeiou",
        "disconnectType" : "aeiou",
        "connectedTime" : "2000-01-23T04:56:07.000+0000",
        "socialUserName" : "aeiou",
        "state" : "aeiou",
        "id" : "aeiou",
        "startHoldTime" : "2000-01-23T04:56:07.000+0000",
        "previewText" : "aeiou",
        "recordingId" : "aeiou"
      } ],
      "attributes" : {
        "key" : "aeiou"
      },
      "endTime" : "2000-01-23T04:56:07.000+0000"
    } ],
    "maxParticipants" : 123
  },
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "isScoringIndex" : true,
  "evaluationForm" : {
    "publishedVersions" : {
      "total" : 123456789,
      "pageCount" : 123,
      "pageNumber" : 123,
      "entities" : [ "" ],
      "firstUri" : "aeiou",
      "selfUri" : "aeiou",
      "lastUri" : "aeiou",
      "pageSize" : 123,
      "previousUri" : "aeiou",
      "nextUri" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "contextId" : "aeiou",
    "id" : "aeiou",
    "published" : true,
    "type" : "aeiou",
    "questionGroups" : [ {
      "defaultAnswersToHighest" : true,
      "manualWeight" : true,
      "name" : "aeiou",
      "questions" : [ {
        "key" : "{}"
      } ],
      "weight" : 1.3579000000000001069366817318950779736042022705078125,
      "id" : "aeiou",
      "defaultAnswersToNA" : true,
      "type" : "aeiou",
      "naEnabled" : true
    } ]
  },
  "evaluator" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "status" : "aeiou",
  "resourceType" : "aeiou"
}}]
     
     - parameter conversationId: (path)  
     - parameter evaluationId: (path)  
     - parameter body: (body) evaluation (optional)
     - parameter expand: (query) evaluatorId (optional)

     - returns: RequestBuilder<ININEvaluation> 
     */
    public class func putQualityConversationsConversationIdEvaluationsEvaluationIdWithRequestBuilder(conversationId conversationId: String, evaluationId: String, body: ININEvaluation? = nil, expand: String? = nil) -> RequestBuilder<ININEvaluation> {
        var path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}"
        path = path.stringByReplacingOccurrencesOfString("{conversationId}", withString: "\(conversationId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{evaluationId}", withString: "\(evaluationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update an evaluation form.
     
     - parameter formId: (path) Form ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putQualityFormsFormId(formId formId: String, body: ININEvaluationForm? = nil, completion: ((data: ININEvaluationForm?, error: ErrorType?) -> Void)) {
        putQualityFormsFormIdWithRequestBuilder(formId: formId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an evaluation form.
     - PUT /api/v2/quality/forms/{formId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "publishedVersions" : {
    "total" : 123456789,
    "pageCount" : 123,
    "pageNumber" : 123,
    "entities" : [ "" ],
    "firstUri" : "aeiou",
    "selfUri" : "aeiou",
    "lastUri" : "aeiou",
    "pageSize" : 123,
    "previousUri" : "aeiou",
    "nextUri" : "aeiou"
  },
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "contextId" : "aeiou",
  "id" : "aeiou",
  "published" : true,
  "type" : "aeiou",
  "questionGroups" : [ {
    "defaultAnswersToHighest" : true,
    "manualWeight" : true,
    "name" : "aeiou",
    "questions" : [ {
      "key" : "{}"
    } ],
    "weight" : 1.3579000000000001069366817318950779736042022705078125,
    "id" : "aeiou",
    "defaultAnswersToNA" : true,
    "type" : "aeiou",
    "naEnabled" : true
  } ]
}}]
     
     - parameter formId: (path) Form ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININEvaluationForm> 
     */
    public class func putQualityFormsFormIdWithRequestBuilder(formId formId: String, body: ININEvaluationForm? = nil) -> RequestBuilder<ININEvaluationForm> {
        var path = "/api/v2/quality/forms/{formId}"
        path = path.stringByReplacingOccurrencesOfString("{formId}", withString: "\(formId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININEvaluationForm>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a keywordSet to the specified keywordSet via PUT.
     
     - parameter keywordSetId: (path) KeywordSet ID 
     - parameter body: (body) keywordSet (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putQualityKeywordsetsKeywordsetId(keywordSetId keywordSetId: String, body: ININKeywordSet? = nil, completion: ((data: ININKeywordSet?, error: ErrorType?) -> Void)) {
        putQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId: keywordSetId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a keywordSet to the specified keywordSet via PUT.
     - PUT /api/v2/quality/keywordsets/{keywordSetId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "keywords" : [ {
    "alternateSpellings" : [ "aeiou" ],
    "phrase" : "aeiou",
    "customerScoreModifier" : 123,
    "confidence" : 123,
    "name" : "aeiou",
    "id" : "aeiou",
    "agentScoreModifier" : 123
  } ],
  "participantPurposes" : [ "aeiou" ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "language" : "aeiou",
  "id" : "aeiou",
  "queue" : {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  },
  "agents" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ]
}}]
     
     - parameter keywordSetId: (path) KeywordSet ID 
     - parameter body: (body) keywordSet (optional)

     - returns: RequestBuilder<ININKeywordSet> 
     */
    public class func putQualityKeywordsetsKeywordsetIdWithRequestBuilder(keywordSetId keywordSetId: String, body: ININKeywordSet? = nil) -> RequestBuilder<ININKeywordSet> {
        var path = "/api/v2/quality/keywordsets/{keywordSetId}"
        path = path.stringByReplacingOccurrencesOfString("{keywordSetId}", withString: "\(keywordSetId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININKeywordSet>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
