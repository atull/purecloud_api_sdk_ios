//
// NotificationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class NotificationsAPI: APIBase {
    /**
     Remove all subscriptions
     
     - parameter channelId: (path) Channel ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteNotificationsChannelsChannelIdSubscriptions(channelId channelId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId: channelId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove all subscriptions
     - DELETE /api/v2/notifications/channels/{channelId}/subscriptions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter channelId: (path) Channel ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId channelId: String) -> RequestBuilder<String> {
        var path = "/api/v2/notifications/channels/{channelId}/subscriptions"
        path = path.stringByReplacingOccurrencesOfString("{channelId}", withString: "\(channelId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get available notification topics.
     
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNotificationsAvailabletopics(expand expand: [String]? = nil, completion: ((data: ININAvailableTopicEntityListing?, error: ErrorType?) -> Void)) {
        getNotificationsAvailabletopicsWithRequestBuilder(expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get available notification topics.
     - GET /api/v2/notifications/availabletopics
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "schema" : {
      "key" : "{}"
    },
    "description" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<ININAvailableTopicEntityListing> 
     */
    public class func getNotificationsAvailabletopicsWithRequestBuilder(expand expand: [String]? = nil) -> RequestBuilder<ININAvailableTopicEntityListing> {
        let path = "/api/v2/notifications/availabletopics"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININAvailableTopicEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     The list of existing channels
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNotificationsChannels(completion: ((data: ININChannelEntityListing?, error: ErrorType?) -> Void)) {
        getNotificationsChannelsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     The list of existing channels
     - GET /api/v2/notifications/channels
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "connectUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]

     - returns: RequestBuilder<ININChannelEntityListing> 
     */
    public class func getNotificationsChannelsWithRequestBuilder() -> RequestBuilder<ININChannelEntityListing> {
        let path = "/api/v2/notifications/channels"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChannelEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     The list of all subscriptions for this channel
     
     - parameter channelId: (path) Channel ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getNotificationsChannelsChannelIdSubscriptions(channelId channelId: String, completion: ((data: ININChannelTopicEntityListing?, error: ErrorType?) -> Void)) {
        getNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId: channelId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     The list of all subscriptions for this channel
     - GET /api/v2/notifications/channels/{channelId}/subscriptions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter channelId: (path) Channel ID 

     - returns: RequestBuilder<ININChannelTopicEntityListing> 
     */
    public class func getNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId channelId: String) -> RequestBuilder<ININChannelTopicEntityListing> {
        var path = "/api/v2/notifications/channels/{channelId}/subscriptions"
        path = path.stringByReplacingOccurrencesOfString("{channelId}", withString: "\(channelId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChannelTopicEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create a new channel
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postNotificationsChannels(completion: ((data: ININChannel?, error: ErrorType?) -> Void)) {
        postNotificationsChannelsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a new channel
     - POST /api/v2/notifications/channels
     - There is a limit of 10 channels. Creating an 11th channel will remove the channel with oldest last used date.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "connectUri" : "aeiou",
  "id" : "aeiou"
}}]

     - returns: RequestBuilder<ININChannel> 
     */
    public class func postNotificationsChannelsWithRequestBuilder() -> RequestBuilder<ININChannel> {
        let path = "/api/v2/notifications/channels"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChannel>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a list of subscriptions to the existing list of subscriptions
     
     - parameter channelId: (path) Channel ID 
     - parameter body: (body) Topic (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postNotificationsChannelsChannelIdSubscriptions(channelId channelId: String, body: [ININChannelTopic]? = nil, completion: ((data: ININChannelTopicEntityListing?, error: ErrorType?) -> Void)) {
        postNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId: channelId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a list of subscriptions to the existing list of subscriptions
     - POST /api/v2/notifications/channels/{channelId}/subscriptions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter channelId: (path) Channel ID 
     - parameter body: (body) Topic (optional)

     - returns: RequestBuilder<ININChannelTopicEntityListing> 
     */
    public class func postNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId channelId: String, body: [ININChannelTopic]? = nil) -> RequestBuilder<ININChannelTopicEntityListing> {
        var path = "/api/v2/notifications/channels/{channelId}/subscriptions"
        path = path.stringByReplacingOccurrencesOfString("{channelId}", withString: "\(channelId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChannelTopicEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Replace the current list of subscriptions with a new list.
     
     - parameter channelId: (path) Channel ID 
     - parameter body: (body) Topic (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putNotificationsChannelsChannelIdSubscriptions(channelId channelId: String, body: [ININChannelTopic]? = nil, completion: ((data: ININChannelTopicEntityListing?, error: ErrorType?) -> Void)) {
        putNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId: channelId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Replace the current list of subscriptions with a new list.
     - PUT /api/v2/notifications/channels/{channelId}/subscriptions
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter channelId: (path) Channel ID 
     - parameter body: (body) Topic (optional)

     - returns: RequestBuilder<ININChannelTopicEntityListing> 
     */
    public class func putNotificationsChannelsChannelIdSubscriptionsWithRequestBuilder(channelId channelId: String, body: [ININChannelTopic]? = nil) -> RequestBuilder<ININChannelTopicEntityListing> {
        var path = "/api/v2/notifications/channels/{channelId}/subscriptions"
        path = path.stringByReplacingOccurrencesOfString("{channelId}", withString: "\(channelId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININChannelTopicEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
