//
// AuthorizationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AuthorizationAPI: APIBase {
    /**
     Delete an organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteAuthorizationRolesRoleId(roleId roleId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteAuthorizationRolesRoleIdWithRequestBuilder(roleId: roleId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete an organization role.
     - DELETE /api/v2/authorization/roles/{roleId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter roleId: (path) Role ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteAuthorizationRolesRoleIdWithRequestBuilder(roleId roleId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/authorization/roles/{roleId}"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes all the roles from the user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdRoles(userId userId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteUsersUserIdRolesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes all the roles from the user.
     - DELETE /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUsersUserIdRolesWithRequestBuilder(userId userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get all permissions.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAuthorizationPermissions(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, completion: ((data: ININPermissionCollectionEntityListing?, error: ErrorType?) -> Void)) {
        getAuthorizationPermissionsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all permissions.
     - GET /api/v2/authorization/permissions
     - Retrieve a list of all permission defined in the system.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "domain" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "permissionMap" : {
      "key" : [ {
        "entityType" : "aeiou",
        "domain" : "aeiou",
        "action" : "aeiou",
        "label" : "aeiou",
        "allowsConditions" : true
      } ]
    },
    "id" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ININPermissionCollectionEntityListing> 
     */
    public class func getAuthorizationPermissionsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil) -> RequestBuilder<ININPermissionCollectionEntityListing> {
        let path = "/api/v2/authorization/permissions"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPermissionCollectionEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get the list of enabled products
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAuthorizationProducts(completion: ((data: ININOrganizationProductEntityListing?, error: ErrorType?) -> Void)) {
        getAuthorizationProductsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of enabled products
     - GET /api/v2/authorization/products
     - Gets the list of enabled products. Some example product names are: collaborateFree, collaboratePro, communicate, and engage.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "id" : "aeiou"
  } ],
  "pageSize" : 123
}}]

     - returns: RequestBuilder<ININOrganizationProductEntityListing> 
     */
    public class func getAuthorizationProductsWithRequestBuilder() -> RequestBuilder<ININOrganizationProductEntityListing> {
        let path = "/api/v2/authorization/products"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrganizationProductEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Retrieve a list of all roles defined for the organization
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter permission: (query)  (optional)
     - parameter userCount: (query)  (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAuthorizationRoles(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, permission: [String]? = nil, userCount: Bool? = nil, completion: ((data: ININOrganizationRoleEntityListing?, error: ErrorType?) -> Void)) {
        getAuthorizationRolesWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, expand: expand, nextPage: nextPage, previousPage: previousPage, permission: permission, userCount: userCount).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieve a list of all roles defined for the organization
     - GET /api/v2/authorization/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) The total page size requested (optional, default to 25)
     - parameter pageNumber: (query) The page number requested (optional, default to 1)
     - parameter sortBy: (query) variable name requested to sort by (optional)
     - parameter expand: (query) variable name requested by expand list (optional)
     - parameter nextPage: (query) next page token (optional)
     - parameter previousPage: (query) Previous page token (optional)
     - parameter permission: (query)  (optional)
     - parameter userCount: (query)  (optional, default to true)

     - returns: RequestBuilder<ININOrganizationRoleEntityListing> 
     */
    public class func getAuthorizationRolesWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortBy: String? = nil, expand: [String]? = nil, nextPage: String? = nil, previousPage: String? = nil, permission: [String]? = nil, userCount: Bool? = nil) -> RequestBuilder<ININOrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortBy": sortBy,
            "expand": expand,
            "nextPage": nextPage,
            "previousPage": previousPage,
            "permission": permission,
            "userCount": userCount
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrganizationRoleEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get an org role to default role comparison comparison
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAuthorizationRolesLeftroleIdComparedefaultRightroleId(leftRoleId leftRoleId: String, rightRoleId: String, completion: ((data: ININDomainOrgRoleDifference?, error: ErrorType?) -> Void)) {
        getAuthorizationRolesLeftroleIdComparedefaultRightroleIdWithRequestBuilder(leftRoleId: leftRoleId, rightRoleId: rightRoleId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an org role to default role comparison comparison
     - GET /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}
     - Compares any organization role to a default role id and show differences
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "addedPermissionPolicies" : [ "" ],
  "samePermissionPolicies" : [ "" ],
  "roleFromDefault" : "",
  "removedPermissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "userOrgRole" : {
    "default" : true,
    "userCount" : 123,
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou"
  }
}}]
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 

     - returns: RequestBuilder<ININDomainOrgRoleDifference> 
     */
    public class func getAuthorizationRolesLeftroleIdComparedefaultRightroleIdWithRequestBuilder(leftRoleId leftRoleId: String, rightRoleId: String) -> RequestBuilder<ININDomainOrgRoleDifference> {
        var path = "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}"
        path = path.stringByReplacingOccurrencesOfString("{leftRoleId}", withString: "\(leftRoleId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{rightRoleId}", withString: "\(rightRoleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrgRoleDifference>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a single organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAuthorizationRolesRoleId(roleId roleId: String, completion: ((data: ININDomainOrganizationRole?, error: ErrorType?) -> Void)) {
        getAuthorizationRolesRoleIdWithRequestBuilder(roleId: roleId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a single organization role.
     - GET /api/v2/authorization/roles/{roleId}
     - Get the organization role specified by its ID.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou"
}}]
     
     - parameter roleId: (path) Role ID 

     - returns: RequestBuilder<ININDomainOrganizationRole> 
     */
    public class func getAuthorizationRolesRoleIdWithRequestBuilder(roleId roleId: String) -> RequestBuilder<ININDomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrganizationRole>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Returns a listing of roles and permissions for a user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdRoles(userId userId: String, completion: ((data: ININUserAuthorization?, error: ErrorType?) -> Void)) {
        getUsersUserIdRolesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a listing of roles and permissions for a user.
     - GET /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININUserAuthorization> 
     */
    public class func getUsersUserIdRolesWithRequestBuilder(userId userId: String) -> RequestBuilder<ININUserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserAuthorization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch Organization Role for needsUpdate Field
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchAuthorizationRolesRoleId(roleId roleId: String, body: ININDomainOrganizationRole? = nil, completion: ((data: ININDomainOrganizationRole?, error: ErrorType?) -> Void)) {
        patchAuthorizationRolesRoleIdWithRequestBuilder(roleId: roleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch Organization Role for needsUpdate Field
     - PATCH /api/v2/authorization/roles/{roleId}
     - Patch Organization Role for needsUpdate Field
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou"
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININDomainOrganizationRole> 
     */
    public class func patchAuthorizationRolesRoleIdWithRequestBuilder(roleId roleId: String, body: ININDomainOrganizationRole? = nil) -> RequestBuilder<ININDomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrganizationRole>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create an organization role.
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAuthorizationRoles(body body: ININDomainOrganizationRole? = nil, completion: ((data: ININDomainOrganizationRole?, error: ErrorType?) -> Void)) {
        postAuthorizationRolesWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an organization role.
     - POST /api/v2/authorization/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININDomainOrganizationRole> 
     */
    public class func postAuthorizationRolesWithRequestBuilder(body body: ININDomainOrganizationRole? = nil) -> RequestBuilder<ININDomainOrganizationRole> {
        let path = "/api/v2/authorization/roles"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrganizationRole>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Restores all default roles
     
     - parameter force: (query) Restore default roles (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAuthorizationRolesDefault(force force: Bool? = nil, completion: ((data: ININOrganizationRoleEntityListing?, error: ErrorType?) -> Void)) {
        postAuthorizationRolesDefaultWithRequestBuilder(force: force).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Restores all default roles
     - POST /api/v2/authorization/roles/default
     - This endpoint serves several purposes. 1. It provides the org with default roles. This is important for default roles that will be added after go-live (they can retroactively add the new default-role). Note: When not using a query param of force=true, it only adds the default roles not configured for the org; it does not overwrite roles. 2. Using the query param force=true, you can restore all default roles. Note: This does not have an effect on custom roles.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter force: (query) Restore default roles (optional, default to false)

     - returns: RequestBuilder<ININOrganizationRoleEntityListing> 
     */
    public class func postAuthorizationRolesDefaultWithRequestBuilder(force force: Bool? = nil) -> RequestBuilder<ININOrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles/default"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "force": force
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrganizationRoleEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
      Get an unsaved org role to default role comparison
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAuthorizationRolesLeftroleIdComparedefaultRightroleId(leftRoleId leftRoleId: String, rightRoleId: String, body: ININDomainOrganizationRole? = nil, completion: ((data: ININDomainOrgRoleDifference?, error: ErrorType?) -> Void)) {
        postAuthorizationRolesLeftroleIdComparedefaultRightroleIdWithRequestBuilder(leftRoleId: leftRoleId, rightRoleId: rightRoleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
      Get an unsaved org role to default role comparison
     - POST /api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}
     - Allows users to compare their existing roles in an unsaved state to its default role
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "addedPermissionPolicies" : [ "" ],
  "samePermissionPolicies" : [ "" ],
  "roleFromDefault" : "",
  "removedPermissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "userOrgRole" : {
    "default" : true,
    "userCount" : 123,
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ "" ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou"
  }
}}]
     
     - parameter leftRoleId: (path) Left Role ID 
     - parameter rightRoleId: (path) Right Role id 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININDomainOrgRoleDifference> 
     */
    public class func postAuthorizationRolesLeftroleIdComparedefaultRightroleIdWithRequestBuilder(leftRoleId leftRoleId: String, rightRoleId: String, body: ININDomainOrganizationRole? = nil) -> RequestBuilder<ININDomainOrgRoleDifference> {
        var path = "/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}"
        path = path.stringByReplacingOccurrencesOfString("{leftRoleId}", withString: "\(leftRoleId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{rightRoleId}", withString: "\(rightRoleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrgRoleDifference>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Restore specified default roles
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAuthorizationRolesDefault(body body: [ININDomainOrganizationRole]? = nil, completion: ((data: ININOrganizationRoleEntityListing?, error: ErrorType?) -> Void)) {
        putAuthorizationRolesDefaultWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Restore specified default roles
     - PUT /api/v2/authorization/roles/default
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "default" : true,
    "userCount" : 123,
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "user" : {
            "addresses" : [ "" ],
            "images" : [ {
              "imageUri" : "aeiou",
              "resolution" : "aeiou"
            } ],
            "selfUri" : "aeiou",
            "conversationSummary" : {
              "call" : {
                "enterprise" : "",
                "contactCenter" : {
                  "acw" : 123,
                  "active" : 123
                }
              },
              "socialExpression" : "",
              "chat" : "",
              "callback" : "",
              "video" : "",
              "userId" : "aeiou",
              "email" : ""
            },
            "primaryContactInfo" : [ {
              "address" : "aeiou",
              "display" : "aeiou",
              "mediaType" : "aeiou",
              "type" : "aeiou"
            } ],
            "routingStatus" : {
              "startTime" : "2000-01-23T04:56:07.000+0000",
              "userId" : "aeiou",
              "status" : "aeiou"
            },
            "title" : "aeiou",
            "version" : 123,
            "outOfOffice" : {
              "endDate" : "2000-01-23T04:56:07.000+0000",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "active" : true,
              "id" : "aeiou",
              "user" : "",
              "startDate" : "2000-01-23T04:56:07.000+0000"
            },
            "authorization" : {
              "permissions" : [ "aeiou" ],
              "permissionPolicies" : [ {
                "policyDescription" : "aeiou",
                "resourceConditionNode" : {
                  "operands" : [ {
                    "type" : "aeiou",
                    "value" : "aeiou"
                  } ],
                  "variableName" : "aeiou",
                  "conjunction" : "aeiou",
                  "terms" : [ "" ],
                  "operator" : "aeiou"
                },
                "actionSetKey" : "aeiou",
                "namedResources" : [ "aeiou" ],
                "policyName" : "aeiou",
                "entityName" : "aeiou",
                "domain" : "aeiou",
                "id" : "aeiou",
                "resourceCondition" : "aeiou",
                "actionSet" : [ "aeiou" ]
              } ],
              "roles" : [ {
                "name" : "aeiou",
                "id" : "aeiou"
              } ]
            },
            "chat" : {
              "jabberId" : "aeiou"
            },
            "name" : "aeiou",
            "station" : {
              "defaultStation" : "",
              "lastAssociatedStation" : "",
              "associatedStation" : {
                "associatedDate" : "2000-01-23T04:56:07.000+0000",
                "defaultUser" : "",
                "id" : "aeiou",
                "associatedUser" : "",
                "providerInfo" : {
                  "key" : "aeiou"
                }
              },
              "effectiveStation" : ""
            },
            "id" : "aeiou",
            "state" : "aeiou",
            "department" : "aeiou",
            "presence" : {
              "presenceDefinition" : {
                "createdDate" : "2000-01-23T04:56:07.000+0000",
                "createdBy" : "",
                "languageLabels" : {
                  "key" : "aeiou"
                },
                "systemPresence" : "aeiou",
                "selfUri" : "aeiou",
                "name" : "aeiou",
                "modifiedDate" : "2000-01-23T04:56:07.000+0000",
                "modifiedBy" : "",
                "id" : "aeiou",
                "deactivated" : true,
                "primary" : true
              },
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "id" : "aeiou",
              "source" : "aeiou",
              "message" : "aeiou",
              "primary" : true
            },
            "email" : "aeiou",
            "username" : "aeiou",
            "geolocation" : {
              "country" : "aeiou",
              "city" : "aeiou",
              "latitude" : 1.3579000000000001069366817318950779736042022705078125,
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou",
              "type" : "aeiou",
              "region" : "aeiou",
              "primary" : true,
              "longitude" : 1.3579000000000001069366817318950779736042022705078125
            }
          },
          "value" : "aeiou",
          "queue" : {
            "callingPartyName" : "aeiou",
            "acwSettings" : {
              "timeoutMs" : 123,
              "wrapupPrompt" : "aeiou"
            },
            "mediaSettings" : {
              "key" : {
                "alertingTimeoutSeconds" : 123,
                "serviceLevel" : {
                  "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                  "durationMs" : 123456789
                }
              }
            },
            "memberCount" : 123,
            "selfUri" : "aeiou",
            "description" : "aeiou",
            "dateModified" : "2000-01-23T04:56:07.000+0000",
            "createdByApp" : "aeiou",
            "version" : 123,
            "bullseye" : {
              "rings" : [ {
                "expansionCriteria" : [ {
                  "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                  "type" : "aeiou"
                } ],
                "actions" : {
                  "skillsToRemove" : [ {
                    "selfUri" : "aeiou",
                    "name" : "aeiou",
                    "id" : "aeiou"
                  } ]
                }
              } ]
            },
            "skillEvaluationMethod" : "aeiou",
            "dateCreated" : "2000-01-23T04:56:07.000+0000",
            "queueFlow" : {
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "id" : "aeiou"
            },
            "createdBy" : "aeiou",
            "callingPartyNumber" : "aeiou",
            "name" : "aeiou",
            "modifiedByApp" : "aeiou",
            "modifiedBy" : "aeiou",
            "id" : "aeiou",
            "state" : "aeiou"
          }
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "allowConditions" : true,
      "actionSet" : [ "aeiou" ]
    } ],
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "id" : "aeiou",
    "roleNeedsUpdate" : true,
    "defaultRoleId" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININOrganizationRoleEntityListing> 
     */
    public class func putAuthorizationRolesDefaultWithRequestBuilder(body body: [ININDomainOrganizationRole]? = nil) -> RequestBuilder<ININOrganizationRoleEntityListing> {
        let path = "/api/v2/authorization/roles/default"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOrganizationRoleEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an organization role.
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAuthorizationRolesRoleId(roleId roleId: String, body: ININDomainOrganizationRole? = nil, completion: ((data: ININDomainOrganizationRole?, error: ErrorType?) -> Void)) {
        putAuthorizationRolesRoleIdWithRequestBuilder(roleId: roleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an organization role.
     - PUT /api/v2/authorization/roles/{roleId}
     - Update
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "default" : true,
  "userCount" : 123,
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "user" : {
          "addresses" : [ "" ],
          "images" : [ {
            "imageUri" : "aeiou",
            "resolution" : "aeiou"
          } ],
          "selfUri" : "aeiou",
          "conversationSummary" : {
            "call" : {
              "enterprise" : "",
              "contactCenter" : {
                "acw" : 123,
                "active" : 123
              }
            },
            "socialExpression" : "",
            "chat" : "",
            "callback" : "",
            "video" : "",
            "userId" : "aeiou",
            "email" : ""
          },
          "primaryContactInfo" : [ {
            "address" : "aeiou",
            "display" : "aeiou",
            "mediaType" : "aeiou",
            "type" : "aeiou"
          } ],
          "routingStatus" : {
            "startTime" : "2000-01-23T04:56:07.000+0000",
            "userId" : "aeiou",
            "status" : "aeiou"
          },
          "title" : "aeiou",
          "version" : 123,
          "outOfOffice" : {
            "endDate" : "2000-01-23T04:56:07.000+0000",
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "active" : true,
            "id" : "aeiou",
            "user" : "",
            "startDate" : "2000-01-23T04:56:07.000+0000"
          },
          "authorization" : {
            "permissions" : [ "aeiou" ],
            "permissionPolicies" : [ {
              "policyDescription" : "aeiou",
              "resourceConditionNode" : {
                "operands" : [ {
                  "type" : "aeiou",
                  "value" : "aeiou"
                } ],
                "variableName" : "aeiou",
                "conjunction" : "aeiou",
                "terms" : [ "" ],
                "operator" : "aeiou"
              },
              "actionSetKey" : "aeiou",
              "namedResources" : [ "aeiou" ],
              "policyName" : "aeiou",
              "entityName" : "aeiou",
              "domain" : "aeiou",
              "id" : "aeiou",
              "resourceCondition" : "aeiou",
              "actionSet" : [ "aeiou" ]
            } ],
            "roles" : [ {
              "name" : "aeiou",
              "id" : "aeiou"
            } ]
          },
          "chat" : {
            "jabberId" : "aeiou"
          },
          "name" : "aeiou",
          "station" : {
            "defaultStation" : "",
            "lastAssociatedStation" : "",
            "associatedStation" : {
              "associatedDate" : "2000-01-23T04:56:07.000+0000",
              "defaultUser" : "",
              "id" : "aeiou",
              "associatedUser" : "",
              "providerInfo" : {
                "key" : "aeiou"
              }
            },
            "effectiveStation" : ""
          },
          "id" : "aeiou",
          "state" : "aeiou",
          "department" : "aeiou",
          "presence" : {
            "presenceDefinition" : {
              "createdDate" : "2000-01-23T04:56:07.000+0000",
              "createdBy" : "",
              "languageLabels" : {
                "key" : "aeiou"
              },
              "systemPresence" : "aeiou",
              "selfUri" : "aeiou",
              "name" : "aeiou",
              "modifiedDate" : "2000-01-23T04:56:07.000+0000",
              "modifiedBy" : "",
              "id" : "aeiou",
              "deactivated" : true,
              "primary" : true
            },
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "modifiedDate" : "2000-01-23T04:56:07.000+0000",
            "id" : "aeiou",
            "source" : "aeiou",
            "message" : "aeiou",
            "primary" : true
          },
          "email" : "aeiou",
          "username" : "aeiou",
          "geolocation" : {
            "country" : "aeiou",
            "city" : "aeiou",
            "latitude" : 1.3579000000000001069366817318950779736042022705078125,
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou",
            "type" : "aeiou",
            "region" : "aeiou",
            "primary" : true,
            "longitude" : 1.3579000000000001069366817318950779736042022705078125
          }
        },
        "value" : "aeiou",
        "queue" : {
          "callingPartyName" : "aeiou",
          "acwSettings" : {
            "timeoutMs" : 123,
            "wrapupPrompt" : "aeiou"
          },
          "mediaSettings" : {
            "key" : {
              "alertingTimeoutSeconds" : 123,
              "serviceLevel" : {
                "percentage" : 1.3579000000000001069366817318950779736042022705078125,
                "durationMs" : 123456789
              }
            }
          },
          "memberCount" : 123,
          "selfUri" : "aeiou",
          "description" : "aeiou",
          "dateModified" : "2000-01-23T04:56:07.000+0000",
          "createdByApp" : "aeiou",
          "version" : 123,
          "bullseye" : {
            "rings" : [ {
              "expansionCriteria" : [ {
                "threshold" : 1.3579000000000001069366817318950779736042022705078125,
                "type" : "aeiou"
              } ],
              "actions" : {
                "skillsToRemove" : [ {
                  "selfUri" : "aeiou",
                  "name" : "aeiou",
                  "id" : "aeiou"
                } ]
              }
            } ]
          },
          "skillEvaluationMethod" : "aeiou",
          "dateCreated" : "2000-01-23T04:56:07.000+0000",
          "queueFlow" : {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          },
          "createdBy" : "aeiou",
          "callingPartyNumber" : "aeiou",
          "name" : "aeiou",
          "modifiedByApp" : "aeiou",
          "modifiedBy" : "aeiou",
          "id" : "aeiou",
          "state" : "aeiou"
        }
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "allowConditions" : true,
    "actionSet" : [ "aeiou" ]
  } ],
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "description" : "aeiou",
  "id" : "aeiou",
  "roleNeedsUpdate" : true,
  "defaultRoleId" : "aeiou"
}}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININDomainOrganizationRole> 
     */
    public class func putAuthorizationRolesRoleIdWithRequestBuilder(roleId roleId: String, body: ININDomainOrganizationRole? = nil) -> RequestBuilder<ININDomainOrganizationRole> {
        var path = "/api/v2/authorization/roles/{roleId}"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININDomainOrganizationRole>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Sets the users for the role
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAuthorizationRolesRoleIdUsersAdd(roleId roleId: String, body: [String]? = nil, completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        putAuthorizationRolesRoleIdUsersAddWithRequestBuilder(roleId: roleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Sets the users for the role
     - PUT /api/v2/authorization/roles/{roleId}/users/add
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[String]> 
     */
    public class func putAuthorizationRolesRoleIdUsersAddWithRequestBuilder(roleId roleId: String, body: [String]? = nil) -> RequestBuilder<[String]> {
        var path = "/api/v2/authorization/roles/{roleId}/users/add"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes the users from the role
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putAuthorizationRolesRoleIdUsersRemove(roleId roleId: String, body: [String]? = nil, completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        putAuthorizationRolesRoleIdUsersRemoveWithRequestBuilder(roleId: roleId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Removes the users from the role
     - PUT /api/v2/authorization/roles/{roleId}/users/remove
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example=[ "aeiou" ]}]
     
     - parameter roleId: (path) Role ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[String]> 
     */
    public class func putAuthorizationRolesRoleIdUsersRemoveWithRequestBuilder(roleId roleId: String, body: [String]? = nil) -> RequestBuilder<[String]> {
        var path = "/api/v2/authorization/roles/{roleId}/users/remove"
        path = path.stringByReplacingOccurrencesOfString("{roleId}", withString: "\(roleId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Sets the user's roles
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdRoles(userId userId: String, body: [String]? = nil, completion: ((data: ININUserAuthorization?, error: ErrorType?) -> Void)) {
        putUsersUserIdRolesWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Sets the user's roles
     - PUT /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININUserAuthorization> 
     */
    public class func putUsersUserIdRolesWithRequestBuilder(userId userId: String, body: [String]? = nil) -> RequestBuilder<ININUserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserAuthorization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
