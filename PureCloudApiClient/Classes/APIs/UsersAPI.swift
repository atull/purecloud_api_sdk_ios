//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UsersAPI: APIBase {
    /**
     Delete user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserId(userId userId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteUsersUserIdWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete user
     - DELETE /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<String> 
     */
    public class func deleteUsersUserIdWithRequestBuilder(userId userId: String) -> RequestBuilder<String> {
        var path = "/api/v2/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Removes all the roles from the user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdRoles(userId userId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteUsersUserIdRolesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Removes all the roles from the user.
     - DELETE /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUsersUserIdRolesWithRequestBuilder(userId userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove routing skill from user
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdRoutingskillsSkillId(userId userId: String, skillId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId: userId, skillId: skillId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove routing skill from user
     - DELETE /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example="aeiou"}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  

     - returns: RequestBuilder<String> 
     */
    public class func deleteUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId userId: String, skillId: String) -> RequestBuilder<String> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Clear associated station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdStationAssociatedstation(userId userId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteUsersUserIdStationAssociatedstationWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Clear associated station
     - DELETE /api/v2/users/{userId}/station/associatedstation
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUsersUserIdStationAssociatedstationWithRequestBuilder(userId userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/associatedstation"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Clear default station
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUsersUserIdStationDefaultstation(userId userId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteUsersUserIdStationDefaultstationWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Clear default station
     - DELETE /api/v2/users/{userId}/station/defaultstation
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUsersUserIdStationDefaultstationWithRequestBuilder(userId userId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/defaultstation"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the list of available users.
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter role: (query) Role (optional)
     - parameter name: (query) Name (optional)
     - parameter username: (query) Username (optional)
     - parameter skill: (query) Skill (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsers(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, id: [String]? = nil, sortBy: String? = nil, role: String? = nil, name: String? = nil, username: String? = nil, skill: [String]? = nil, expand: [String]? = nil, completion: ((data: ININUsersEntityListing?, error: ErrorType?) -> Void)) {
        getUsersWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, id: id, sortBy: sortBy, role: role, name: name, username: username, skill: skill, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get the list of available users.
     - GET /api/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter id: (query) id (optional)
     - parameter sortBy: (query) Sort by (optional, default to name)
     - parameter role: (query) Role (optional)
     - parameter name: (query) Name (optional)
     - parameter username: (query) Username (optional)
     - parameter skill: (query) Skill (optional)
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<ININUsersEntityListing> 
     */
    public class func getUsersWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, id: [String]? = nil, sortBy: String? = nil, role: String? = nil, name: String? = nil, username: String? = nil, skill: [String]? = nil, expand: [String]? = nil) -> RequestBuilder<ININUsersEntityListing> {
        let path = "/api/v2/users"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "id": id,
            "sortBy": sortBy,
            "role": role,
            "name": name,
            "username": username,
            "skill": skill,
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUsersEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get user.
     
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersMe(expand expand: [String]? = nil, completion: ((data: ININUserMe?, error: ErrorType?) -> Void)) {
        getUsersMeWithRequestBuilder(expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user.
     - GET /api/v2/users/me
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "date" : {
    "currentDate" : "2000-01-23T04:56:07.000+0000"
  },
  "addresses" : [ "" ],
  "geolocationSettings" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "enabled" : true
  },
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "authorization" : "",
  "station" : "",
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : {
        "addresses" : [ "" ],
        "images" : [ "" ],
        "selfUri" : "aeiou",
        "conversationSummary" : {
          "call" : {
            "enterprise" : "",
            "contactCenter" : {
              "acw" : 123,
              "active" : 123
            }
          },
          "socialExpression" : "",
          "chat" : "",
          "callback" : "",
          "video" : "",
          "userId" : "aeiou",
          "email" : ""
        },
        "primaryContactInfo" : [ "" ],
        "routingStatus" : "",
        "title" : "aeiou",
        "version" : 123,
        "outOfOffice" : {
          "endDate" : "2000-01-23T04:56:07.000+0000",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "active" : true,
          "id" : "aeiou",
          "user" : "",
          "startDate" : "2000-01-23T04:56:07.000+0000"
        },
        "authorization" : {
          "permissions" : [ "aeiou" ],
          "permissionPolicies" : [ {
            "policyDescription" : "aeiou",
            "resourceConditionNode" : {
              "operands" : [ {
                "type" : "aeiou",
                "value" : "aeiou"
              } ],
              "variableName" : "aeiou",
              "conjunction" : "aeiou",
              "terms" : [ "" ],
              "operator" : "aeiou"
            },
            "actionSetKey" : "aeiou",
            "namedResources" : [ "aeiou" ],
            "policyName" : "aeiou",
            "entityName" : "aeiou",
            "domain" : "aeiou",
            "id" : "aeiou",
            "resourceCondition" : "aeiou",
            "actionSet" : [ "aeiou" ]
          } ],
          "roles" : [ {
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        },
        "chat" : "",
        "name" : "aeiou",
        "station" : {
          "defaultStation" : "",
          "lastAssociatedStation" : "",
          "associatedStation" : {
            "associatedDate" : "2000-01-23T04:56:07.000+0000",
            "defaultUser" : "",
            "id" : "aeiou",
            "associatedUser" : "",
            "providerInfo" : {
              "key" : "aeiou"
            }
          },
          "effectiveStation" : ""
        },
        "id" : "aeiou",
        "state" : "aeiou",
        "department" : "aeiou",
        "presence" : "",
        "email" : "aeiou",
        "username" : "aeiou",
        "geolocation" : {
          "country" : "aeiou",
          "city" : "aeiou",
          "latitude" : 1.3579000000000001069366817318950779736042022705078125,
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou",
          "type" : "aeiou",
          "region" : "aeiou",
          "primary" : true,
          "longitude" : 1.3579000000000001069366817318950779736042022705078125
        }
      },
      "languageLabels" : {
        "key" : "aeiou"
      },
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "deactivated" : true,
      "primary" : true
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "email" : "aeiou",
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : "",
  "primaryContactInfo" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "version" : 123,
  "outOfOffice" : "",
  "chat" : {
    "jabberId" : "aeiou"
  },
  "presenceDefinitions" : [ "" ],
  "organization" : {
    "thirdPartyOrgName" : "aeiou",
    "defaultSiteId" : "aeiou",
    "domain" : "aeiou",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "thirdPartyOrgId" : "aeiou",
    "thirdPartyURI" : "aeiou",
    "deletable" : true,
    "id" : "aeiou",
    "state" : "aeiou",
    "version" : 123
  },
  "name" : "aeiou",
  "locations" : [ {
    "address" : {
      "zipcode" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street1" : "aeiou",
      "countryName" : "aeiou",
      "state" : "aeiou",
      "street2" : "aeiou"
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "addressVerified" : true,
    "emergencyNumber" : {
      "number" : "aeiou",
      "e164" : "aeiou",
      "type" : "aeiou"
    },
    "version" : 123
  } ],
  "username" : "aeiou",
  "geolocation" : ""
}}]
     
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<ININUserMe> 
     */
    public class func getUsersMeWithRequestBuilder(expand expand: [String]? = nil) -> RequestBuilder<ININUserMe> {
        let path = "/api/v2/users/me"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserMe>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search using q64
     
     - parameter q64: (query)  
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersSearch(q64 q64: String, expand: [String]? = nil, completion: ((data: ININUsersSearchResponse?, error: ErrorType?) -> Void)) {
        getUsersSearchWithRequestBuilder(q64: q64, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search using q64
     - GET /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "aggregations" : [ "" ]
}}]
     
     - parameter q64: (query)  
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<ININUsersSearchResponse> 
     */
    public class func getUsersSearchWithRequestBuilder(q64 q64: String, expand: [String]? = nil) -> RequestBuilder<ININUsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "q64": q64,
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUsersSearchResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get user.
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserId(userId userId: String, expand: [String]? = nil, completion: ((data: ININUser?, error: ErrorType?) -> Void)) {
        getUsersUserIdWithRequestBuilder(userId: userId, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user.
     - GET /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "primaryContactInfo" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000"
  },
  "authorization" : {
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "defaultUser" : "",
      "id" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "languageLabels" : {
        "key" : "aeiou"
      },
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "deactivated" : true,
      "primary" : true
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "email" : "aeiou",
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter expand: (query) Which fields, if any, to expand (optional)

     - returns: RequestBuilder<ININUser> 
     */
    public class func getUsersUserIdWithRequestBuilder(userId userId: String, expand: [String]? = nil) -> RequestBuilder<ININUser> {
        var path = "/api/v2/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUser>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdCallforwarding(userId userId: String, completion: ((data: ININCallForwarding?, error: ErrorType?) -> Void)) {
        getUsersUserIdCallforwardingWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user's CallForwarding
     - GET /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININCallForwarding> 
     */
    public class func getUsersUserIdCallforwardingWithRequestBuilder(userId userId: String) -> RequestBuilder<ININCallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallForwarding>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdGeolocationsClientId(userId userId: String, clientId: String, completion: ((data: ININGeolocation?, error: ErrorType?) -> Void)) {
        getUsersUserIdGeolocationsClientIdWithRequestBuilder(userId: userId, clientId: clientId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a user's Geolocation
     - GET /api/v2/users/{userId}/geolocations/{clientId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "city" : "aeiou",
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "type" : "aeiou",
  "region" : "aeiou",
  "primary" : true,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 

     - returns: RequestBuilder<ININGeolocation> 
     */
    public class func getUsersUserIdGeolocationsClientIdWithRequestBuilder(userId userId: String, clientId: String) -> RequestBuilder<ININGeolocation> {
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{clientId}", withString: "\(clientId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGeolocation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get a OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdOutofoffice(userId userId: String, completion: ((data: ININOutOfOffice?, error: ErrorType?) -> Void)) {
        getUsersUserIdOutofofficeWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a OutOfOffice
     - GET /api/v2/users/{userId}/outofoffice
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : "",
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "startDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININOutOfOffice> 
     */
    public class func getUsersUserIdOutofofficeWithRequestBuilder(userId userId: String) -> RequestBuilder<ININOutOfOffice> {
        var path = "/api/v2/users/{userId}/outofoffice"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOutOfOffice>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get queues for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdQueues(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, completion: ((data: ININUserQueueEntityListing?, error: ErrorType?) -> Void)) {
        getUsersUserIdQueuesWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get queues for user
     - GET /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "callingPartyName" : "aeiou",
    "acwSettings" : {
      "timeoutMs" : 123,
      "wrapupPrompt" : "aeiou"
    },
    "joined" : true,
    "mediaSettings" : {
      "key" : {
        "alertingTimeoutSeconds" : 123,
        "serviceLevel" : {
          "percentage" : 1.3579000000000001069366817318950779736042022705078125,
          "durationMs" : 123456789
        }
      }
    },
    "memberCount" : 123,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "createdByApp" : "aeiou",
    "version" : 123,
    "bullseye" : {
      "rings" : [ {
        "expansionCriteria" : [ {
          "threshold" : 1.3579000000000001069366817318950779736042022705078125,
          "type" : "aeiou"
        } ],
        "actions" : {
          "skillsToRemove" : [ {
            "selfUri" : "aeiou",
            "name" : "aeiou",
            "id" : "aeiou"
          } ]
        }
      } ]
    },
    "skillEvaluationMethod" : "aeiou",
    "dateCreated" : "2000-01-23T04:56:07.000+0000",
    "queueFlow" : {
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou"
    },
    "createdBy" : "aeiou",
    "callingPartyNumber" : "aeiou",
    "name" : "aeiou",
    "modifiedByApp" : "aeiou",
    "modifiedBy" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)

     - returns: RequestBuilder<ININUserQueueEntityListing> 
     */
    public class func getUsersUserIdQueuesWithRequestBuilder(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil) -> RequestBuilder<ININUserQueueEntityListing> {
        var path = "/api/v2/users/{userId}/queues"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserQueueEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Returns a listing of roles and permissions for a user.
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdRoles(userId userId: String, completion: ((data: ININUserAuthorization?, error: ErrorType?) -> Void)) {
        getUsersUserIdRolesWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Returns a listing of roles and permissions for a user.
     - GET /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININUserAuthorization> 
     */
    public class func getUsersUserIdRolesWithRequestBuilder(userId userId: String) -> RequestBuilder<ININUserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserAuthorization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

    enum for parameter sortOrder
    */
    public enum ININSortOrder_getUsersUserIdRoutingskills: String { 
        case Ascending = "ascending"
        case Descending = "descending"
    }

    /**
     List routing skills for user
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdRoutingskills(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getUsersUserIdRoutingskills? = nil, completion: ((data: ININUserSkillEntityListing?, error: ErrorType?) -> Void)) {
        getUsersUserIdRoutingskillsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List routing skills for user
     - GET /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "skillUri" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou",
    "proficiency" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<ININUserSkillEntityListing> 
     */
    public class func getUsersUserIdRoutingskillsWithRequestBuilder(userId userId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getUsersUserIdRoutingskills? = nil) -> RequestBuilder<ININUserSkillEntityListing> {
        var path = "/api/v2/users/{userId}/routingskills"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortOrder": sortOrder?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserSkillEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Fetch the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdRoutingstatus(userId userId: String, completion: ((data: ININRoutingStatus?, error: ErrorType?) -> Void)) {
        getUsersUserIdRoutingstatusWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Fetch the routing status of a user
     - GET /api/v2/users/{userId}/routingstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININRoutingStatus> 
     */
    public class func getUsersUserIdRoutingstatusWithRequestBuilder(userId userId: String) -> RequestBuilder<ININRoutingStatus> {
        var path = "/api/v2/users/{userId}/routingstatus"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRoutingStatus>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get station information for user
     
     - parameter userId: (path) User ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUsersUserIdStation(userId userId: String, completion: ((data: ININUserStations?, error: ErrorType?) -> Void)) {
        getUsersUserIdStationWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get station information for user
     - GET /api/v2/users/{userId}/station
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "defaultStation" : "",
  "lastAssociatedStation" : "",
  "associatedStation" : {
    "associatedDate" : "2000-01-23T04:56:07.000+0000",
    "defaultUser" : "",
    "id" : "aeiou",
    "associatedUser" : {
      "addresses" : [ "" ],
      "images" : [ {
        "imageUri" : "aeiou",
        "resolution" : "aeiou"
      } ],
      "selfUri" : "aeiou",
      "conversationSummary" : {
        "call" : {
          "enterprise" : "",
          "contactCenter" : {
            "acw" : 123,
            "active" : 123
          }
        },
        "socialExpression" : "",
        "chat" : "",
        "callback" : "",
        "video" : "",
        "userId" : "aeiou",
        "email" : ""
      },
      "primaryContactInfo" : [ {
        "address" : "aeiou",
        "display" : "aeiou",
        "mediaType" : "aeiou",
        "type" : "aeiou"
      } ],
      "routingStatus" : {
        "startTime" : "2000-01-23T04:56:07.000+0000",
        "userId" : "aeiou",
        "status" : "aeiou"
      },
      "title" : "aeiou",
      "version" : 123,
      "outOfOffice" : {
        "endDate" : "2000-01-23T04:56:07.000+0000",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "active" : true,
        "id" : "aeiou",
        "user" : "",
        "startDate" : "2000-01-23T04:56:07.000+0000"
      },
      "authorization" : {
        "permissions" : [ "aeiou" ],
        "permissionPolicies" : [ {
          "policyDescription" : "aeiou",
          "resourceConditionNode" : {
            "operands" : [ {
              "type" : "aeiou",
              "value" : "aeiou"
            } ],
            "variableName" : "aeiou",
            "conjunction" : "aeiou",
            "terms" : [ "" ],
            "operator" : "aeiou"
          },
          "actionSetKey" : "aeiou",
          "namedResources" : [ "aeiou" ],
          "policyName" : "aeiou",
          "entityName" : "aeiou",
          "domain" : "aeiou",
          "id" : "aeiou",
          "resourceCondition" : "aeiou",
          "actionSet" : [ "aeiou" ]
        } ],
        "roles" : [ {
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      },
      "chat" : {
        "jabberId" : "aeiou"
      },
      "name" : "aeiou",
      "station" : "",
      "id" : "aeiou",
      "state" : "aeiou",
      "department" : "aeiou",
      "presence" : {
        "presenceDefinition" : {
          "createdDate" : "2000-01-23T04:56:07.000+0000",
          "createdBy" : "",
          "languageLabels" : {
            "key" : "aeiou"
          },
          "systemPresence" : "aeiou",
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "modifiedDate" : "2000-01-23T04:56:07.000+0000",
          "modifiedBy" : "",
          "id" : "aeiou",
          "deactivated" : true,
          "primary" : true
        },
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "id" : "aeiou",
        "source" : "aeiou",
        "message" : "aeiou",
        "primary" : true
      },
      "email" : "aeiou",
      "username" : "aeiou",
      "geolocation" : {
        "country" : "aeiou",
        "city" : "aeiou",
        "latitude" : 1.3579000000000001069366817318950779736042022705078125,
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "id" : "aeiou",
        "type" : "aeiou",
        "region" : "aeiou",
        "primary" : true,
        "longitude" : 1.3579000000000001069366817318950779736042022705078125
      }
    },
    "providerInfo" : {
      "key" : "aeiou"
    }
  },
  "effectiveStation" : ""
}}]
     
     - parameter userId: (path) User ID 

     - returns: RequestBuilder<ININUserStations> 
     */
    public class func getUsersUserIdStationWithRequestBuilder(userId userId: String) -> RequestBuilder<ININUserStations> {
        var path = "/api/v2/users/{userId}/station"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserStations>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update user
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchUsersUserId(userId userId: String, body: ININUser? = nil, completion: ((data: ININUser?, error: ErrorType?) -> Void)) {
        patchUsersUserIdWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update user
     - PATCH /api/v2/users/{userId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "primaryContactInfo" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000"
  },
  "authorization" : {
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "defaultUser" : "",
      "id" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "languageLabels" : {
        "key" : "aeiou"
      },
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "deactivated" : true,
      "primary" : true
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "email" : "aeiou",
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININUser> 
     */
    public class func patchUsersUserIdWithRequestBuilder(userId userId: String, body: ININUser? = nil) -> RequestBuilder<ININUser> {
        var path = "/api/v2/users/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUser>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchUsersUserIdCallforwarding(userId userId: String, body: ININCallForwarding? = nil, completion: ((data: ININCallForwarding?, error: ErrorType?) -> Void)) {
        patchUsersUserIdCallforwardingWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch a user's CallForwarding
     - PATCH /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININCallForwarding> 
     */
    public class func patchUsersUserIdCallforwardingWithRequestBuilder(userId userId: String, body: ININCallForwarding? = nil) -> RequestBuilder<ININCallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallForwarding>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Patch a user's Geolocation
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchUsersUserIdGeolocationsClientId(userId userId: String, clientId: String, body: ININGeolocation? = nil, completion: ((data: ININGeolocation?, error: ErrorType?) -> Void)) {
        patchUsersUserIdGeolocationsClientIdWithRequestBuilder(userId: userId, clientId: clientId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Patch a user's Geolocation
     - PATCH /api/v2/users/{userId}/geolocations/{clientId}
     - The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "country" : "aeiou",
  "city" : "aeiou",
  "latitude" : 1.3579000000000001069366817318950779736042022705078125,
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "type" : "aeiou",
  "region" : "aeiou",
  "primary" : true,
  "longitude" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) user Id 
     - parameter clientId: (path) client Id 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININGeolocation> 
     */
    public class func patchUsersUserIdGeolocationsClientIdWithRequestBuilder(userId userId: String, clientId: String, body: ININGeolocation? = nil) -> RequestBuilder<ININGeolocation> {
        var path = "/api/v2/users/{userId}/geolocations/{clientId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{clientId}", withString: "\(clientId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGeolocation>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Join or unjoin a set of queues for a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchUsersUserIdQueues(userId userId: String, body: [ININUserQueue]? = nil, completion: ((data: ININUserQueue?, error: ErrorType?) -> Void)) {
        patchUsersUserIdQueuesWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Join or unjoin a set of queues for a user
     - PATCH /api/v2/users/{userId}/queues
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "joined" : true,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createdByApp" : "aeiou",
  "version" : 123,
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedByApp" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) User Queues (optional)

     - returns: RequestBuilder<ININUserQueue> 
     */
    public class func patchUsersUserIdQueuesWithRequestBuilder(userId userId: String, body: [ININUserQueue]? = nil) -> RequestBuilder<ININUserQueue> {
        var path = "/api/v2/users/{userId}/queues"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserQueue>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Join or unjoin a queue for a user
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func patchUsersUserIdQueuesQueueId(queueId queueId: String, userId: String, body: ININUserQueue? = nil, completion: ((data: ININUserQueue?, error: ErrorType?) -> Void)) {
        patchUsersUserIdQueuesQueueIdWithRequestBuilder(queueId: queueId, userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Join or unjoin a queue for a user
     - PATCH /api/v2/users/{userId}/queues/{queueId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "callingPartyName" : "aeiou",
  "acwSettings" : {
    "timeoutMs" : 123,
    "wrapupPrompt" : "aeiou"
  },
  "joined" : true,
  "mediaSettings" : {
    "key" : {
      "alertingTimeoutSeconds" : 123,
      "serviceLevel" : {
        "percentage" : 1.3579000000000001069366817318950779736042022705078125,
        "durationMs" : 123456789
      }
    }
  },
  "memberCount" : 123,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "createdByApp" : "aeiou",
  "version" : 123,
  "bullseye" : {
    "rings" : [ {
      "expansionCriteria" : [ {
        "threshold" : 1.3579000000000001069366817318950779736042022705078125,
        "type" : "aeiou"
      } ],
      "actions" : {
        "skillsToRemove" : [ {
          "selfUri" : "aeiou",
          "name" : "aeiou",
          "id" : "aeiou"
        } ]
      }
    } ]
  },
  "skillEvaluationMethod" : "aeiou",
  "dateCreated" : "2000-01-23T04:56:07.000+0000",
  "queueFlow" : {
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "createdBy" : "aeiou",
  "callingPartyNumber" : "aeiou",
  "name" : "aeiou",
  "modifiedByApp" : "aeiou",
  "modifiedBy" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter queueId: (path) Queue ID 
     - parameter userId: (path) User ID 
     - parameter body: (body) Queue Member (optional)

     - returns: RequestBuilder<ININUserQueue> 
     */
    public class func patchUsersUserIdQueuesQueueIdWithRequestBuilder(queueId queueId: String, userId: String, body: ININUserQueue? = nil) -> RequestBuilder<ININUserQueue> {
        var path = "/api/v2/users/{userId}/queues/{queueId}"
        path = path.stringByReplacingOccurrencesOfString("{queueId}", withString: "\(queueId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserQueue>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for user aggregates
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsUsersAggregatesQuery(body body: ININAggregationQuery? = nil, completion: ((data: ININPresenceQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsUsersAggregatesQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for user aggregates
     - POST /api/v2/analytics/users/aggregates/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "systemToOrganizationMappings" : {
    "key" : [ "aeiou" ]
  },
  "results" : [ {
    "data" : [ {
      "interval" : "aeiou",
      "metrics" : [ {
        "metric" : "aeiou",
        "stats" : {
          "current" : 1.3579000000000001069366817318950779736042022705078125,
          "min" : 1.3579000000000001069366817318950779736042022705078125,
          "max" : 1.3579000000000001069366817318950779736042022705078125,
          "count" : 123456789,
          "sum" : 1.3579000000000001069366817318950779736042022705078125,
          "ratio" : 1.3579000000000001069366817318950779736042022705078125,
          "numerator" : 1.3579000000000001069366817318950779736042022705078125,
          "denominator" : 1.3579000000000001069366817318950779736042022705078125,
          "target" : 1.3579000000000001069366817318950779736042022705078125
        },
        "qualifier" : "aeiou"
      } ]
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININPresenceQueryResponse> 
     */
    public class func postAnalyticsUsersAggregatesQueryWithRequestBuilder(body body: ININAggregationQuery? = nil) -> RequestBuilder<ININPresenceQueryResponse> {
        let path = "/api/v2/analytics/users/aggregates/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININPresenceQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query for user observations
     
     - parameter body: (body) query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postAnalyticsUsersObservationsQuery(body body: ININObservationQuery? = nil, completion: ((data: ININObservationQueryResponse?, error: ErrorType?) -> Void)) {
        postAnalyticsUsersObservationsQueryWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query for user observations
     - POST /api/v2/analytics/users/observations/query
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "results" : [ {
    "data" : [ {
      "metric" : "aeiou",
      "stats" : {
        "current" : 1.3579000000000001069366817318950779736042022705078125,
        "min" : 1.3579000000000001069366817318950779736042022705078125,
        "max" : 1.3579000000000001069366817318950779736042022705078125,
        "count" : 123456789,
        "sum" : 1.3579000000000001069366817318950779736042022705078125,
        "ratio" : 1.3579000000000001069366817318950779736042022705078125,
        "numerator" : 1.3579000000000001069366817318950779736042022705078125,
        "denominator" : 1.3579000000000001069366817318950779736042022705078125,
        "target" : 1.3579000000000001069366817318950779736042022705078125
      },
      "qualifier" : "aeiou"
    } ],
    "group" : {
      "key" : "aeiou"
    }
  } ]
}}]
     
     - parameter body: (body) query (optional)

     - returns: RequestBuilder<ININObservationQueryResponse> 
     */
    public class func postAnalyticsUsersObservationsQueryWithRequestBuilder(body body: ININObservationQuery? = nil) -> RequestBuilder<ININObservationQueryResponse> {
        let path = "/api/v2/analytics/users/observations/query"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININObservationQueryResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create user
     
     - parameter body: (body) User (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUsers(body body: ININCreateUser? = nil, completion: ((data: ININUser?, error: ErrorType?) -> Void)) {
        postUsersWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create user
     - POST /api/v2/users
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "addresses" : [ "" ],
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "selfUri" : "aeiou",
  "conversationSummary" : {
    "call" : {
      "enterprise" : "",
      "contactCenter" : {
        "acw" : 123,
        "active" : 123
      }
    },
    "socialExpression" : "",
    "chat" : "",
    "callback" : "",
    "video" : "",
    "userId" : "aeiou",
    "email" : ""
  },
  "primaryContactInfo" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "routingStatus" : {
    "startTime" : "2000-01-23T04:56:07.000+0000",
    "userId" : "aeiou",
    "status" : "aeiou"
  },
  "title" : "aeiou",
  "version" : 123,
  "outOfOffice" : {
    "endDate" : "2000-01-23T04:56:07.000+0000",
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "active" : true,
    "id" : "aeiou",
    "user" : "",
    "startDate" : "2000-01-23T04:56:07.000+0000"
  },
  "authorization" : {
    "permissions" : [ "aeiou" ],
    "permissionPolicies" : [ {
      "policyDescription" : "aeiou",
      "resourceConditionNode" : {
        "operands" : [ {
          "type" : "aeiou",
          "value" : "aeiou"
        } ],
        "variableName" : "aeiou",
        "conjunction" : "aeiou",
        "terms" : [ "" ],
        "operator" : "aeiou"
      },
      "actionSetKey" : "aeiou",
      "namedResources" : [ "aeiou" ],
      "policyName" : "aeiou",
      "entityName" : "aeiou",
      "domain" : "aeiou",
      "id" : "aeiou",
      "resourceCondition" : "aeiou",
      "actionSet" : [ "aeiou" ]
    } ],
    "roles" : [ {
      "name" : "aeiou",
      "id" : "aeiou"
    } ]
  },
  "chat" : {
    "jabberId" : "aeiou"
  },
  "name" : "aeiou",
  "station" : {
    "defaultStation" : "",
    "lastAssociatedStation" : "",
    "associatedStation" : {
      "associatedDate" : "2000-01-23T04:56:07.000+0000",
      "defaultUser" : "",
      "id" : "aeiou",
      "associatedUser" : "",
      "providerInfo" : {
        "key" : "aeiou"
      }
    },
    "effectiveStation" : ""
  },
  "id" : "aeiou",
  "state" : "aeiou",
  "department" : "aeiou",
  "presence" : {
    "presenceDefinition" : {
      "createdDate" : "2000-01-23T04:56:07.000+0000",
      "createdBy" : "",
      "languageLabels" : {
        "key" : "aeiou"
      },
      "systemPresence" : "aeiou",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "modifiedBy" : "",
      "id" : "aeiou",
      "deactivated" : true,
      "primary" : true
    },
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "modifiedDate" : "2000-01-23T04:56:07.000+0000",
    "id" : "aeiou",
    "source" : "aeiou",
    "message" : "aeiou",
    "primary" : true
  },
  "email" : "aeiou",
  "username" : "aeiou",
  "geolocation" : {
    "country" : "aeiou",
    "city" : "aeiou",
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "selfUri" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "type" : "aeiou",
    "region" : "aeiou",
    "primary" : true,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125
  }
}}]
     
     - parameter body: (body) User (optional)

     - returns: RequestBuilder<ININUser> 
     */
    public class func postUsersWithRequestBuilder(body body: ININCreateUser? = nil) -> RequestBuilder<ININUser> {
        let path = "/api/v2/users"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUser>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search
     
     - parameter body: (body) Search request options (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUsersSearch(body body: ININUserSearchRequest? = nil, completion: ((data: ININUsersSearchResponse?, error: ErrorType?) -> Void)) {
        postUsersSearchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search
     - POST /api/v2/users/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "aggregations" : [ "" ]
}}]
     
     - parameter body: (body) Search request options (optional)

     - returns: RequestBuilder<ININUsersSearchResponse> 
     */
    public class func postUsersSearchWithRequestBuilder(body body: ININUserSearchRequest? = nil) -> RequestBuilder<ININUsersSearchResponse> {
        let path = "/api/v2/users/search"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUsersSearchResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add routing skill to user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUsersUserIdRoutingskills(userId userId: String, body: ININUserRoutingSkill? = nil, completion: ((data: ININUserRoutingSkill?, error: ErrorType?) -> Void)) {
        postUsersUserIdRoutingskillsWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add routing skill to user
     - POST /api/v2/users/{userId}/routingskills
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Skill (optional)

     - returns: RequestBuilder<ININUserRoutingSkill> 
     */
    public class func postUsersUserIdRoutingskillsWithRequestBuilder(userId userId: String, body: ININUserRoutingSkill? = nil) -> RequestBuilder<ININUserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a user's CallForwarding
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdCallforwarding(userId userId: String, body: ININCallForwarding? = nil, completion: ((data: ININCallForwarding?, error: ErrorType?) -> Void)) {
        putUsersUserIdCallforwardingWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a user's CallForwarding
     - PUT /api/v2/users/{userId}/callforwarding
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "phoneNumber" : "aeiou",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "modifiedDate" : "2000-01-23T04:56:07.000+0000",
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "enabled" : true
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININCallForwarding> 
     */
    public class func putUsersUserIdCallforwardingWithRequestBuilder(userId userId: String, body: ININCallForwarding? = nil) -> RequestBuilder<ININCallForwarding> {
        var path = "/api/v2/users/{userId}/callforwarding"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININCallForwarding>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update an OutOfOffice
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated UserPresence 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdOutofoffice(userId userId: String, body: ININOutOfOffice, completion: ((data: ININOutOfOffice?, error: ErrorType?) -> Void)) {
        putUsersUserIdOutofofficeWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update an OutOfOffice
     - PUT /api/v2/users/{userId}/outofoffice
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "endDate" : "2000-01-23T04:56:07.000+0000",
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "active" : true,
  "id" : "aeiou",
  "user" : {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : "",
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  },
  "startDate" : "2000-01-23T04:56:07.000+0000"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) The updated UserPresence 

     - returns: RequestBuilder<ININOutOfOffice> 
     */
    public class func putUsersUserIdOutofofficeWithRequestBuilder(userId userId: String, body: ININOutOfOffice) -> RequestBuilder<ININOutOfOffice> {
        var path = "/api/v2/users/{userId}/outofoffice"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININOutOfOffice>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Sets the user's roles
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdRoles(userId userId: String, body: [String]? = nil, completion: ((data: ININUserAuthorization?, error: ErrorType?) -> Void)) {
        putUsersUserIdRolesWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Sets the user's roles
     - PUT /api/v2/users/{userId}/roles
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "permissions" : [ "aeiou" ],
  "permissionPolicies" : [ {
    "policyDescription" : "aeiou",
    "resourceConditionNode" : {
      "operands" : [ {
        "type" : "aeiou",
        "value" : "aeiou"
      } ],
      "variableName" : "aeiou",
      "conjunction" : "aeiou",
      "terms" : [ "" ],
      "operator" : "aeiou"
    },
    "actionSetKey" : "aeiou",
    "namedResources" : [ "aeiou" ],
    "policyName" : "aeiou",
    "entityName" : "aeiou",
    "domain" : "aeiou",
    "id" : "aeiou",
    "resourceCondition" : "aeiou",
    "actionSet" : [ "aeiou" ]
  } ],
  "roles" : [ {
    "name" : "aeiou",
    "id" : "aeiou"
  } ]
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININUserAuthorization> 
     */
    public class func putUsersUserIdRolesWithRequestBuilder(userId userId: String, body: [String]? = nil) -> RequestBuilder<ININUserAuthorization> {
        var path = "/api/v2/users/{userId}/roles"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserAuthorization>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update routing skill proficiency or state.
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter body: (body) Skill (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdRoutingskillsSkillId(userId userId: String, skillId: String, body: ININUserRoutingSkill? = nil, completion: ((data: ININUserRoutingSkill?, error: ErrorType?) -> Void)) {
        putUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId: userId, skillId: skillId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update routing skill proficiency or state.
     - PUT /api/v2/users/{userId}/routingskills/{skillId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "selfUri" : "aeiou",
  "name" : "aeiou",
  "skillUri" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou",
  "proficiency" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter userId: (path) User ID 
     - parameter skillId: (path)  
     - parameter body: (body) Skill (optional)

     - returns: RequestBuilder<ININUserRoutingSkill> 
     */
    public class func putUsersUserIdRoutingskillsSkillIdWithRequestBuilder(userId userId: String, skillId: String, body: ININUserRoutingSkill? = nil) -> RequestBuilder<ININUserRoutingSkill> {
        var path = "/api/v2/users/{userId}/routingskills/{skillId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{skillId}", withString: "\(skillId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserRoutingSkill>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update the routing status of a user
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdRoutingstatus(userId userId: String, body: ININRoutingStatus? = nil, completion: ((data: ININRoutingStatus?, error: ErrorType?) -> Void)) {
        putUsersUserIdRoutingstatusWithRequestBuilder(userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update the routing status of a user
     - PUT /api/v2/users/{userId}/routingstatus
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "startTime" : "2000-01-23T04:56:07.000+0000",
  "userId" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter userId: (path) User ID 
     - parameter body: (body) Routing Status (optional)

     - returns: RequestBuilder<ININRoutingStatus> 
     */
    public class func putUsersUserIdRoutingstatusWithRequestBuilder(userId userId: String, body: ININRoutingStatus? = nil) -> RequestBuilder<ININRoutingStatus> {
        var path = "/api/v2/users/{userId}/routingstatus"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININRoutingStatus>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set associated station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdStationAssociatedstationStationId(userId userId: String, stationId: String, completion: ((error: ErrorType?) -> Void)) {
        putUsersUserIdStationAssociatedstationStationIdWithRequestBuilder(userId: userId, stationId: stationId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set associated station
     - PUT /api/v2/users/{userId}/station/associatedstation/{stationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func putUsersUserIdStationAssociatedstationStationIdWithRequestBuilder(userId userId: String, stationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/associatedstation/{stationId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stationId}", withString: "\(stationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set default station
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putUsersUserIdStationDefaultstationStationId(userId userId: String, stationId: String, completion: ((error: ErrorType?) -> Void)) {
        putUsersUserIdStationDefaultstationStationIdWithRequestBuilder(userId: userId, stationId: stationId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Set default station
     - PUT /api/v2/users/{userId}/station/defaultstation/{stationId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter userId: (path) User ID 
     - parameter stationId: (path)  

     - returns: RequestBuilder<Void> 
     */
    public class func putUsersUserIdStationDefaultstationStationIdWithRequestBuilder(userId userId: String, stationId: String) -> RequestBuilder<Void> {
        var path = "/api/v2/users/{userId}/station/defaultstation/{stationId}"
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{stationId}", withString: "\(stationId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
