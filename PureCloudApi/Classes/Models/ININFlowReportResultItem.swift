//
// ININFlowReportResultItem.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Report for one active (running) process found in result to a report request. */
public class ININFlowReportResultItem: JSONEncodable {
    public enum ININFlowStatus: String { 
        case Unknown = "UNKNOWN"
        case Running = "RUNNING"
        case Error = "ERROR"
        case Terminated = "TERMINATED"
        case Completed = "COMPLETED"
    }
    /** The flow instance ID for this process */
    public var flowExecId: ININFlowExecId?
    /** The flow config ID that this workitem was created from. */
    public var flowConfigId: ININFlowConfigId?
    /** The instance name for this flow in relation to its primary document.  If the flow is not a document-centric type, this value will be empty. */
    public var flowInstanceName: String?
    /** the document for this flow (if this flow was launched via a document) */
    public var associatedDocument: ININAssociatedDocument?
    /** The flow&#39;s running status, which indicates whether the flow is running normally or in error, etc; */
    public var flowStatus: ININFlowStatus?
    /** The current state of the flow (EG what action is being processed) */
    public var currentState: String?
    /** The time the flow was started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var startDateTime: NSDate?
    /** The time the flow ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ */
    public var endDateTime: NSDate?
    /** List of users currently assigned to a workItem */
    public var workItemUserAssignees: [ININUser]?
    /** User that completed the flow */
    public var completedUser: ININUser?
    /** Reason for completion */
    public var completionReason: String?
    /** Additional information if the flow is in error */
    public var flowErrorInfo: ININErrorBody?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["flowExecId"] = self.flowExecId?.encodeToJSON()
        nillableDictionary["flowConfigId"] = self.flowConfigId?.encodeToJSON()
        nillableDictionary["flowInstanceName"] = self.flowInstanceName
        nillableDictionary["associatedDocument"] = self.associatedDocument?.encodeToJSON()
        nillableDictionary["flowStatus"] = self.flowStatus?.rawValue
        nillableDictionary["currentState"] = self.currentState
        nillableDictionary["startDateTime"] = self.startDateTime?.encodeToJSON()
        nillableDictionary["endDateTime"] = self.endDateTime?.encodeToJSON()
        nillableDictionary["workItemUserAssignees"] = self.workItemUserAssignees?.encodeToJSON()
        nillableDictionary["completedUser"] = self.completedUser?.encodeToJSON()
        nillableDictionary["completionReason"] = self.completionReason
        nillableDictionary["flowErrorInfo"] = self.flowErrorInfo?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
