//
// GroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GroupsAPI: APIBase {
    /**
     Remove members
     
     - parameter groupId: (path) Group ID 
     - parameter ids: (query) Comma separated list of userIds to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteGroupsGroupIdMembers(groupId groupId: String, ids: String, completion: ((error: ErrorType?) -> Void)) {
        deleteGroupsGroupIdMembersWithRequestBuilder(groupId: groupId, ids: ids).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Remove members
     - DELETE /api/v2/groups/{groupId}/members
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter groupId: (path) Group ID 
     - parameter ids: (query) Comma separated list of userIds to remove 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteGroupsGroupIdMembersWithRequestBuilder(groupId groupId: String, ids: String) -> RequestBuilder<Void> {
        var path = "/api/v2/groups/{groupId}/members"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "ids": ids
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

    enum for parameter sortOrder
    */
    public enum ININSortOrder_getGroups: String { 
        case Ascending = "ascending"
        case Descending = "descending"
    }

    /**
     Get a group list
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroups(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getGroups? = nil, completion: ((data: ININGroupEntityListing?, error: ErrorType?) -> Void)) {
        getGroupsWithRequestBuilder(pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get a group list
     - GET /api/v2/groups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "addresses" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<ININGroupEntityListing> 
     */
    public class func getGroupsWithRequestBuilder(pageSize pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getGroups? = nil) -> RequestBuilder<ININGroupEntityListing> {
        let path = "/api/v2/groups"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortOrder": sortOrder?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGroupEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get group
     
     - parameter groupId: (path) Group ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupsGroupId(groupId groupId: String, completion: ((data: ININGroup?, error: ErrorType?) -> Void)) {
        getGroupsGroupIdWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get group
     - GET /api/v2/groups/{groupId}
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "addresses" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "visibility" : "aeiou",
  "memberCount" : 123456789,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "type" : "aeiou",
  "version" : 123,
  "rulesVisible" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter groupId: (path) Group ID 

     - returns: RequestBuilder<ININGroup> 
     */
    public class func getGroupsGroupIdWithRequestBuilder(groupId groupId: String) -> RequestBuilder<ININGroup> {
        var path = "/api/v2/groups/{groupId}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGroup>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

    enum for parameter sortOrder
    */
    public enum ININSortOrder_getGroupsGroupIdMembers: String { 
        case Ascending = "ascending"
        case Descending = "descending"
    }

    /**
     Get group members
     
     - parameter groupId: (path) Group ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupsGroupIdMembers(groupId groupId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getGroupsGroupIdMembers? = nil, completion: ((data: ININUserEntityListing?, error: ErrorType?) -> Void)) {
        getGroupsGroupIdMembersWithRequestBuilder(groupId: groupId, pageSize: pageSize, pageNumber: pageNumber, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get group members
     - GET /api/v2/groups/{groupId}/members
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "pageNumber" : 123,
  "entities" : [ {
    "addresses" : [ "" ],
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "selfUri" : "aeiou",
    "conversationSummary" : {
      "call" : {
        "enterprise" : "",
        "contactCenter" : {
          "acw" : 123,
          "active" : 123
        }
      },
      "socialExpression" : "",
      "chat" : "",
      "callback" : "",
      "video" : "",
      "userId" : "aeiou",
      "email" : ""
    },
    "primaryContactInfo" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "routingStatus" : {
      "startTime" : "2000-01-23T04:56:07.000+0000",
      "userId" : "aeiou",
      "status" : "aeiou"
    },
    "title" : "aeiou",
    "version" : 123,
    "outOfOffice" : {
      "endDate" : "2000-01-23T04:56:07.000+0000",
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "active" : true,
      "id" : "aeiou",
      "user" : "",
      "startDate" : "2000-01-23T04:56:07.000+0000"
    },
    "authorization" : {
      "permissions" : [ "aeiou" ],
      "permissionPolicies" : [ {
        "policyDescription" : "aeiou",
        "resourceConditionNode" : {
          "operands" : [ {
            "type" : "aeiou",
            "value" : "aeiou"
          } ],
          "variableName" : "aeiou",
          "conjunction" : "aeiou",
          "terms" : [ "" ],
          "operator" : "aeiou"
        },
        "actionSetKey" : "aeiou",
        "namedResources" : [ "aeiou" ],
        "policyName" : "aeiou",
        "entityName" : "aeiou",
        "domain" : "aeiou",
        "id" : "aeiou",
        "resourceCondition" : "aeiou",
        "actionSet" : [ "aeiou" ]
      } ],
      "roles" : [ {
        "name" : "aeiou",
        "id" : "aeiou"
      } ]
    },
    "chat" : {
      "jabberId" : "aeiou"
    },
    "name" : "aeiou",
    "station" : {
      "defaultStation" : "",
      "lastAssociatedStation" : "",
      "associatedStation" : {
        "associatedDate" : "2000-01-23T04:56:07.000+0000",
        "defaultUser" : "",
        "id" : "aeiou",
        "associatedUser" : "",
        "providerInfo" : {
          "key" : "aeiou"
        }
      },
      "effectiveStation" : ""
    },
    "id" : "aeiou",
    "state" : "aeiou",
    "department" : "aeiou",
    "presence" : {
      "presenceDefinition" : {
        "createdDate" : "2000-01-23T04:56:07.000+0000",
        "createdBy" : "",
        "languageLabels" : {
          "key" : "aeiou"
        },
        "systemPresence" : "aeiou",
        "selfUri" : "aeiou",
        "name" : "aeiou",
        "modifiedDate" : "2000-01-23T04:56:07.000+0000",
        "modifiedBy" : "",
        "id" : "aeiou",
        "deactivated" : true,
        "primary" : true
      },
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "modifiedDate" : "2000-01-23T04:56:07.000+0000",
      "id" : "aeiou",
      "source" : "aeiou",
      "message" : "aeiou",
      "primary" : true
    },
    "email" : "aeiou",
    "username" : "aeiou",
    "geolocation" : {
      "country" : "aeiou",
      "city" : "aeiou",
      "latitude" : 1.3579000000000001069366817318950779736042022705078125,
      "selfUri" : "aeiou",
      "name" : "aeiou",
      "id" : "aeiou",
      "type" : "aeiou",
      "region" : "aeiou",
      "primary" : true,
      "longitude" : 1.3579000000000001069366817318950779736042022705078125
    }
  } ],
  "firstUri" : "aeiou",
  "selfUri" : "aeiou",
  "lastUri" : "aeiou",
  "pageSize" : 123,
  "previousUri" : "aeiou",
  "nextUri" : "aeiou"
}}]
     
     - parameter groupId: (path) Group ID 
     - parameter pageSize: (query) Page size (optional, default to 25)
     - parameter pageNumber: (query) Page number (optional, default to 1)
     - parameter sortOrder: (query) Ascending or descending sort order (optional, default to ASC)

     - returns: RequestBuilder<ININUserEntityListing> 
     */
    public class func getGroupsGroupIdMembersWithRequestBuilder(groupId groupId: String, pageSize: Int32? = nil, pageNumber: Int32? = nil, sortOrder: ININSortOrder_getGroupsGroupIdMembers? = nil) -> RequestBuilder<ININUserEntityListing> {
        var path = "/api/v2/groups/{groupId}/members"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageSize": pageSize?.encodeToJSON(),
            "pageNumber": pageNumber?.encodeToJSON(),
            "sortOrder": sortOrder?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININUserEntityListing>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Search using q64
     
     - parameter q64: (query)  
     - parameter expand: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroupsSearch(q64 q64: String, expand: [String]? = nil, completion: ((data: ININGroupsSearchResponse?, error: ErrorType?) -> Void)) {
        getGroupsSearchWithRequestBuilder(q64: q64, expand: expand).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search using q64
     - GET /api/v2/groups/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "addresses" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "aggregations" : [ "" ]
}}]
     
     - parameter q64: (query)  
     - parameter expand: (query)  (optional)

     - returns: RequestBuilder<ININGroupsSearchResponse> 
     */
    public class func getGroupsSearchWithRequestBuilder(q64 q64: String, expand: [String]? = nil) -> RequestBuilder<ININGroupsSearchResponse> {
        let path = "/api/v2/groups/search"
        let URLString = PureCloudApiClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "q64": q64,
            "expand": expand
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGroupsSearchResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create a group
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postGroups(body body: ININGroup? = nil, completion: ((data: ININGroup?, error: ErrorType?) -> Void)) {
        postGroupsWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a group
     - POST /api/v2/groups
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "images" : [ {
    "imageUri" : "aeiou",
    "resolution" : "aeiou"
  } ],
  "addresses" : [ {
    "address" : "aeiou",
    "display" : "aeiou",
    "mediaType" : "aeiou",
    "type" : "aeiou"
  } ],
  "visibility" : "aeiou",
  "memberCount" : 123456789,
  "selfUri" : "aeiou",
  "description" : "aeiou",
  "dateModified" : "2000-01-23T04:56:07.000+0000",
  "type" : "aeiou",
  "version" : 123,
  "rulesVisible" : true,
  "name" : "aeiou",
  "id" : "aeiou",
  "state" : "aeiou"
}}]
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<ININGroup> 
     */
    public class func postGroupsWithRequestBuilder(body body: ININGroup? = nil) -> RequestBuilder<ININGroup> {
        let path = "/api/v2/groups"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGroup>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add members
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Add members (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postGroupsGroupIdMembers(groupId groupId: String, body: ININGroupMembersUpdate? = nil, completion: ((error: ErrorType?) -> Void)) {
        postGroupsGroupIdMembersWithRequestBuilder(groupId: groupId, body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add members
     - POST /api/v2/groups/{groupId}/members
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     
     - parameter groupId: (path) Group ID 
     - parameter body: (body) Add members (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func postGroupsGroupIdMembersWithRequestBuilder(groupId groupId: String, body: ININGroupMembersUpdate? = nil) -> RequestBuilder<Void> {
        var path = "/api/v2/groups/{groupId}/members"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search
     
     - parameter body: (body) Search request options (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postGroupsSearch(body body: ININGroupSearchRequest? = nil, completion: ((data: ININGroupsSearchResponse?, error: ErrorType?) -> Void)) {
        postGroupsSearchWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search
     - POST /api/v2/groups/search
     - 
     - OAuth:
       - type: oauth2
       - name: PureCloud Auth
     - examples: [{contentType=application/json, example={
  "total" : 123456789,
  "pageCount" : 123,
  "types" : [ "aeiou" ],
  "pageNumber" : 123,
  "previousPage" : "aeiou",
  "nextPage" : "aeiou",
  "pageSize" : 123,
  "currentPage" : "aeiou",
  "results" : [ {
    "images" : [ {
      "imageUri" : "aeiou",
      "resolution" : "aeiou"
    } ],
    "addresses" : [ {
      "address" : "aeiou",
      "display" : "aeiou",
      "mediaType" : "aeiou",
      "type" : "aeiou"
    } ],
    "visibility" : "aeiou",
    "memberCount" : 123456789,
    "selfUri" : "aeiou",
    "description" : "aeiou",
    "dateModified" : "2000-01-23T04:56:07.000+0000",
    "type" : "aeiou",
    "version" : 123,
    "rulesVisible" : true,
    "name" : "aeiou",
    "id" : "aeiou",
    "state" : "aeiou"
  } ],
  "aggregations" : [ "" ]
}}]
     
     - parameter body: (body) Search request options (optional)

     - returns: RequestBuilder<ININGroupsSearchResponse> 
     */
    public class func postGroupsSearchWithRequestBuilder(body body: ININGroupSearchRequest? = nil) -> RequestBuilder<ININGroupsSearchResponse> {
        let path = "/api/v2/groups/search"
        let URLString = PureCloudApiClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ININGroupsSearchResponse>.Type = PureCloudApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
